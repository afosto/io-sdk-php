<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Endpoint;

class ListRelayMessages extends \Jane\OpenApiRuntime\Client\BaseEndpoint implements \Jane\OpenApiRuntime\Client\Psr7Endpoint
{
    protected $type;

    /**
     * List a relay's received messages.
     *
     * @param array $queryParameters {
     *
     *     @var string $is_valid
     *     @var string $is_relayed
     *     @var string $is_duplicate
     * }
     */
    public function __construct(string $type, array $queryParameters = [])
    {
        $this->type = $type;
        $this->queryParameters = $queryParameters;
    }

    use \Jane\OpenApiRuntime\Client\Psr7EndpointTrait;

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{type}'], [$this->type], '/mes/webhooks/relays/{type}/messages');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['is_valid', 'is_relayed', 'is_duplicate']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->setAllowedTypes('is_valid', ['string']);
        $optionsResolver->setAllowedTypes('is_relayed', ['string']);
        $optionsResolver->setAllowedTypes('is_duplicate', ['string']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     * @throws \Afosto\Sdk\Exception\ListRelayMessagesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListRelayMessagesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListRelayMessagesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListRelayMessagesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListRelayMessagesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListRelayMessagesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesRelayMessage[]|null
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType)
    {
        if (200 === $status) {
            return $serializer->deserialize($body, 'Afosto\\Sdk\\Model\\MesRelayMessage[]', 'json');
        }
        if (400 === $status) {
            throw new \Afosto\Sdk\Exception\ListRelayMessagesBadRequestException($serializer->deserialize($body, 'Afosto\\Sdk\\Model\\Error', 'json'));
        }
        if (401 === $status) {
            throw new \Afosto\Sdk\Exception\ListRelayMessagesUnauthorizedException($serializer->deserialize($body, 'Afosto\\Sdk\\Model\\Error', 'json'));
        }
        if (403 === $status) {
            throw new \Afosto\Sdk\Exception\ListRelayMessagesForbiddenException($serializer->deserialize($body, 'Afosto\\Sdk\\Model\\Error', 'json'));
        }
        if (404 === $status) {
            throw new \Afosto\Sdk\Exception\ListRelayMessagesNotFoundException($serializer->deserialize($body, 'Afosto\\Sdk\\Model\\Error', 'json'));
        }
        if (500 === $status) {
            throw new \Afosto\Sdk\Exception\ListRelayMessagesInternalServerErrorException($serializer->deserialize($body, 'Afosto\\Sdk\\Model\\Error', 'json'));
        }
        if (503 === $status) {
            throw new \Afosto\Sdk\Exception\ListRelayMessagesServiceUnavailableException($serializer->deserialize($body, 'Afosto\\Sdk\\Model\\Error', 'json'));
        }
    }
}
