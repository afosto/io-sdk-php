<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Endpoint;

class RequestBackup extends \Jane\OpenApiRuntime\Client\BaseEndpoint implements \Jane\OpenApiRuntime\Client\Psr7Endpoint
{
    protected $type;
    protected $channel;

    /**
     * Request a otp over the given channel.
     *
     * @param string $type    Type that we look for
     * @param string $channel Channel of choice
     */
    public function __construct(string $type, string $channel)
    {
        $this->type = $type;
        $this->channel = $channel;
    }

    use \Jane\OpenApiRuntime\Client\Psr7EndpointTrait;

    public function getMethod(): string
    {
        return 'POST';
    }

    public function getUri(): string
    {
        return str_replace(['{type}', '{channel}'], [$this->type, $this->channel], '/iam/2fa/secrets/{type}/backup/{channel}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    /**
     * {@inheritdoc}
     *
     * @throws \Afosto\Sdk\Exception\RequestBackupBadRequestException
     * @throws \Afosto\Sdk\Exception\RequestBackupUnauthorizedException
     * @throws \Afosto\Sdk\Exception\RequestBackupNotFoundException
     * @throws \Afosto\Sdk\Exception\RequestBackupForbiddenException
     * @throws \Afosto\Sdk\Exception\RequestBackupInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\RequestBackupServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamBackupResponse|null
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType)
    {
        if (200 === $status) {
            return $serializer->deserialize($body, 'Afosto\\Sdk\\Model\\IamBackupResponse', 'json');
        }
        if (400 === $status) {
            throw new \Afosto\Sdk\Exception\RequestBackupBadRequestException($serializer->deserialize($body, 'Afosto\\Sdk\\Model\\Error', 'json'));
        }
        if (401 === $status) {
            throw new \Afosto\Sdk\Exception\RequestBackupUnauthorizedException($serializer->deserialize($body, 'Afosto\\Sdk\\Model\\Error', 'json'));
        }
        if (404 === $status) {
            throw new \Afosto\Sdk\Exception\RequestBackupNotFoundException($serializer->deserialize($body, 'Afosto\\Sdk\\Model\\Error', 'json'));
        }
        if (403 === $status) {
            throw new \Afosto\Sdk\Exception\RequestBackupForbiddenException($serializer->deserialize($body, 'Afosto\\Sdk\\Model\\Error', 'json'));
        }
        if (500 === $status) {
            throw new \Afosto\Sdk\Exception\RequestBackupInternalServerErrorException($serializer->deserialize($body, 'Afosto\\Sdk\\Model\\Error', 'json'));
        }
        if (503 === $status) {
            throw new \Afosto\Sdk\Exception\RequestBackupServiceUnavailableException($serializer->deserialize($body, 'Afosto\\Sdk\\Model\\Error', 'json'));
        }
    }
}
