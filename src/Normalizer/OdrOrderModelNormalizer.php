<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OdrOrderModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Afosto\\Sdk\\Model\\OdrOrderModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Afosto\\Sdk\\Model\\OdrOrderModel';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\OdrOrderModel();
        if (property_exists($data, 'client_id') && $data->{'client_id'} !== null) {
            $object->setClientId($data->{'client_id'});
        }
        if (property_exists($data, 'customer_id') && $data->{'customer_id'} !== null) {
            $object->setCustomerId($data->{'customer_id'});
        }
        if (property_exists($data, 'is_confirmed') && $data->{'is_confirmed'} !== null) {
            $object->setIsConfirmed($data->{'is_confirmed'});
        }
        if (property_exists($data, 'stack_reference') && $data->{'stack_reference'} !== null) {
            $object->setStackReference($data->{'stack_reference'});
        }
        if (property_exists($data, 'address_set_id') && $data->{'address_set_id'} !== null) {
            $object->setAddressSetId($data->{'address_set_id'});
        }
        if (property_exists($data, 'metadata') && $data->{'metadata'} !== null) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'due_at') && $data->{'due_at'} !== null) {
            $object->setDueAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'due_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getClientId()) {
            $data->{'client_id'} = $object->getClientId();
        }
        if (null !== $object->getCustomerId()) {
            $data->{'customer_id'} = $object->getCustomerId();
        }
        if (null !== $object->getIsConfirmed()) {
            $data->{'is_confirmed'} = $object->getIsConfirmed();
        }
        if (null !== $object->getStackReference()) {
            $data->{'stack_reference'} = $object->getStackReference();
        }
        if (null !== $object->getAddressSetId()) {
            $data->{'address_set_id'} = $object->getAddressSetId();
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getDueAt()) {
            $data->{'due_at'} = $object->getDueAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
