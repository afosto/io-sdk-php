<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IamClientNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\IamClient' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\IamClient' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\IamClient();
        if (property_exists($data, 'id') && null !== $data->{'id'}) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'client_id') && null !== $data->{'client_id'}) {
            $object->setClientId($data->{'client_id'});
        }
        if (property_exists($data, 'client_secret') && null !== $data->{'client_secret'}) {
            $object->setClientSecret($data->{'client_secret'});
        }
        if (property_exists($data, 'name') && null !== $data->{'name'}) {
            $object->setName($data->{'name'});
        }
        if (property_exists($data, 'redirect_uri') && null !== $data->{'redirect_uri'}) {
            $object->setRedirectUri($data->{'redirect_uri'});
        }
        if (property_exists($data, 'grant_types') && null !== $data->{'grant_types'}) {
            $values = [];
            foreach ($data->{'grant_types'} as $value) {
                $values[] = $value;
            }
            $object->setGrantTypes($values);
        }
        if (property_exists($data, 'scope') && null !== $data->{'scope'}) {
            $values_1 = [];
            foreach ($data->{'scope'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setScope($values_1);
        }
        if (property_exists($data, 'tenant_id') && null !== $data->{'tenant_id'}) {
            $object->setTenantId($data->{'tenant_id'});
        }
        if (property_exists($data, 'is_approved') && null !== $data->{'is_approved'}) {
            $object->setIsApproved($data->{'is_approved'});
        }
        if (property_exists($data, 'is_deleted') && null !== $data->{'is_deleted'}) {
            $object->setIsDeleted($data->{'is_deleted'});
        }
        if (property_exists($data, 'author') && null !== $data->{'author'}) {
            $object->setAuthor($data->{'author'});
        }
        if (property_exists($data, 'deleted_at') && null !== $data->{'deleted_at'}) {
            $object->setDeletedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'deleted_at'}));
        }
        if (property_exists($data, 'created_at') && null !== $data->{'created_at'}) {
            $object->setCreatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'created_at'}));
        }
        if (property_exists($data, 'updated_at') && null !== $data->{'updated_at'}) {
            $object->setUpdatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'updated_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getClientId()) {
            $data->{'client_id'} = $object->getClientId();
        }
        if (null !== $object->getClientSecret()) {
            $data->{'client_secret'} = $object->getClientSecret();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getRedirectUri()) {
            $data->{'redirect_uri'} = $object->getRedirectUri();
        }
        if (null !== $object->getGrantTypes()) {
            $values = [];
            foreach ($object->getGrantTypes() as $value) {
                $values[] = $value;
            }
            $data->{'grant_types'} = $values;
        }
        if (null !== $object->getScope()) {
            $values_1 = [];
            foreach ($object->getScope() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'scope'} = $values_1;
        }
        if (null !== $object->getTenantId()) {
            $data->{'tenant_id'} = $object->getTenantId();
        }
        if (null !== $object->getIsApproved()) {
            $data->{'is_approved'} = $object->getIsApproved();
        }
        if (null !== $object->getIsDeleted()) {
            $data->{'is_deleted'} = $object->getIsDeleted();
        }
        if (null !== $object->getAuthor()) {
            $data->{'author'} = $object->getAuthor();
        }
        if (null !== $object->getDeletedAt()) {
            $data->{'deleted_at'} = $object->getDeletedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getCreatedAt()) {
            $data->{'created_at'} = $object->getCreatedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getUpdatedAt()) {
            $data->{'updated_at'} = $object->getUpdatedAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
