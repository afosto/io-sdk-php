<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class QcqProxyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\QcqProxy' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\QcqProxy' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\QcqProxy();
        if (property_exists($data, 'key') && null !== $data->{'key'}) {
            $object->setKey($data->{'key'});
        }
        if (property_exists($data, 'routes') && null !== $data->{'routes'}) {
            $values = [];
            foreach ($data->{'routes'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Afosto\\Sdk\\Model\\QcqRoute', 'json', $context);
            }
            $object->setRoutes($values);
        }
        if (property_exists($data, 'auth') && null !== $data->{'auth'}) {
            $object->setAuth($this->denormalizer->denormalize($data->{'auth'}, 'Afosto\\Sdk\\Model\\QcqProxyAuth', 'json', $context));
        }
        if (property_exists($data, 'oauth') && null !== $data->{'oauth'}) {
            $object->setOauth($this->denormalizer->denormalize($data->{'oauth'}, 'Afosto\\Sdk\\Model\\QcqProxyOauth', 'json', $context));
        }
        if (property_exists($data, 'tenant_id') && null !== $data->{'tenant_id'}) {
            $object->setTenantId($data->{'tenant_id'});
        }
        if (property_exists($data, 'created_at') && null !== $data->{'created_at'}) {
            $object->setCreatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'created_at'}));
        }
        if (property_exists($data, 'updated_at') && null !== $data->{'updated_at'}) {
            $object->setUpdatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'updated_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getKey()) {
            $data->{'key'} = $object->getKey();
        }
        if (null !== $object->getRoutes()) {
            $values = [];
            foreach ($object->getRoutes() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'routes'} = $values;
        }
        if (null !== $object->getAuth()) {
            $data->{'auth'} = $this->normalizer->normalize($object->getAuth(), 'json', $context);
        }
        if (null !== $object->getOauth()) {
            $data->{'oauth'} = $this->normalizer->normalize($object->getOauth(), 'json', $context);
        }
        if (null !== $object->getTenantId()) {
            $data->{'tenant_id'} = $object->getTenantId();
        }
        if (null !== $object->getCreatedAt()) {
            $data->{'created_at'} = $object->getCreatedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getUpdatedAt()) {
            $data->{'updated_at'} = $object->getUpdatedAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
