<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class WmsPositionLogResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\WmsPositionLogResponse' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\WmsPositionLogResponse' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\WmsPositionLogResponse();
        if (property_exists($data, 'id') && null !== $data->{'id'}) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'is_accurate') && null !== $data->{'is_accurate'}) {
            $object->setIsAccurate($data->{'is_accurate'});
        }
        if (property_exists($data, 'new_items') && null !== $data->{'new_items'}) {
            $values = [];
            foreach ($data->{'new_items'} as $value) {
                $values[] = $value;
            }
            $object->setNewItems($values);
        }
        if (property_exists($data, 'missing_items') && null !== $data->{'missing_items'}) {
            $values_1 = [];
            foreach ($data->{'missing_items'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setMissingItems($values_1);
        }
        if (property_exists($data, 'user_id') && null !== $data->{'user_id'}) {
            $object->setUserId($data->{'user_id'});
        }
        if (property_exists($data, 'verified_at') && null !== $data->{'verified_at'}) {
            $object->setVerifiedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'verified_at'}));
        }
        if (property_exists($data, 'created_at') && null !== $data->{'created_at'}) {
            $object->setCreatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'created_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getIsAccurate()) {
            $data->{'is_accurate'} = $object->getIsAccurate();
        }
        if (null !== $object->getNewItems()) {
            $values = [];
            foreach ($object->getNewItems() as $value) {
                $values[] = $value;
            }
            $data->{'new_items'} = $values;
        }
        if (null !== $object->getMissingItems()) {
            $values_1 = [];
            foreach ($object->getMissingItems() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'missing_items'} = $values_1;
        }
        if (null !== $object->getUserId()) {
            $data->{'user_id'} = $object->getUserId();
        }
        if (null !== $object->getVerifiedAt()) {
            $data->{'verified_at'} = $object->getVerifiedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getCreatedAt()) {
            $data->{'created_at'} = $object->getCreatedAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
