<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OdrCombinedPhoneNumberSetNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\OdrCombinedPhoneNumberSet' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\OdrCombinedPhoneNumberSet' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\OdrCombinedPhoneNumberSet();
        if (property_exists($data, 'contact') && null !== $data->{'contact'}) {
            $object->setContact($this->denormalizer->denormalize($data->{'contact'}, 'Afosto\\Sdk\\Model\\OdrPhonenumberSet', 'json', $context));
        }
        if (property_exists($data, 'organisation') && null !== $data->{'organisation'}) {
            $object->setOrganisation($this->denormalizer->denormalize($data->{'organisation'}, 'Afosto\\Sdk\\Model\\OdrPhonenumberSet', 'json', $context));
        }
        if (property_exists($data, 'session') && null !== $data->{'session'}) {
            $object->setSession($this->denormalizer->denormalize($data->{'session'}, 'Afosto\\Sdk\\Model\\OdrPhonenumberSet', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getContact()) {
            $data->{'contact'} = $this->normalizer->normalize($object->getContact(), 'json', $context);
        }
        if (null !== $object->getOrganisation()) {
            $data->{'organisation'} = $this->normalizer->normalize($object->getOrganisation(), 'json', $context);
        }
        if (null !== $object->getSession()) {
            $data->{'session'} = $this->normalizer->normalize($object->getSession(), 'json', $context);
        }

        return $data;
    }
}
