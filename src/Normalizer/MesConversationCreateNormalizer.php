<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class MesConversationCreateNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\MesConversationCreate' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\MesConversationCreate' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\MesConversationCreate();
        if (property_exists($data, 'event') && null !== $data->{'event'}) {
            $object->setEvent($data->{'event'});
        }
        if (property_exists($data, 'entity_type') && null !== $data->{'entity_type'}) {
            $object->setEntityType($data->{'entity_type'});
        }
        if (property_exists($data, 'name') && null !== $data->{'name'}) {
            $object->setName($data->{'name'});
        }
        if (property_exists($data, 'entity_id') && null !== $data->{'entity_id'}) {
            $object->setEntityId($data->{'entity_id'});
        }
        if (property_exists($data, 'participant') && null !== $data->{'participant'}) {
            $object->setParticipant($this->denormalizer->denormalize($data->{'participant'}, 'Afosto\\Sdk\\Model\\MesParticipantCreate', 'json', $context));
        }
        if (property_exists($data, 'metadata') && null !== $data->{'metadata'}) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data->{'metadata'} as $key => $value) {
                $values[$key] = $value;
            }
            $object->setMetadata($values);
        }
        if (property_exists($data, 'expires_at') && null !== $data->{'expires_at'}) {
            $object->setExpiresAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'expires_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getEvent()) {
            $data->{'event'} = $object->getEvent();
        }
        if (null !== $object->getEntityType()) {
            $data->{'entity_type'} = $object->getEntityType();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getEntityId()) {
            $data->{'entity_id'} = $object->getEntityId();
        }
        if (null !== $object->getParticipant()) {
            $data->{'participant'} = $this->normalizer->normalize($object->getParticipant(), 'json', $context);
        }
        if (null !== $object->getMetadata()) {
            $values = new \stdClass();
            foreach ($object->getMetadata() as $key => $value) {
                $values->{$key} = $value;
            }
            $data->{'metadata'} = $values;
        }
        if (null !== $object->getExpiresAt()) {
            $data->{'expires_at'} = $object->getExpiresAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
