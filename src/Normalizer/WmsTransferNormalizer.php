<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class WmsTransferNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Afosto\\Sdk\\Model\\WmsTransfer';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Afosto\\Sdk\\Model\\WmsTransfer';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\WmsTransfer();
        if (property_exists($data, 'id') && $data->{'id'} !== null) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'target') && $data->{'target'} !== null) {
            $object->setTarget($data->{'target'});
        }
        if (property_exists($data, 'status') && $data->{'status'} !== null) {
            $object->setStatus($data->{'status'});
        }
        if (property_exists($data, 'collect_at') && $data->{'collect_at'} !== null) {
            $object->setCollectAt($data->{'collect_at'});
        }
        if (property_exists($data, 'collections') && $data->{'collections'} !== null) {
            $values = [];
            foreach ($data->{'collections'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Afosto\\Sdk\\Model\\WmsSubTransferSummary', 'json', $context);
            }
            $object->setCollections($values);
        }
        if (property_exists($data, 'deliveries') && $data->{'deliveries'} !== null) {
            $values_1 = [];
            foreach ($data->{'deliveries'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Afosto\\Sdk\\Model\\WmsSubTransferSummary', 'json', $context);
            }
            $object->setDeliveries($values_1);
        }
        if (property_exists($data, 'is_collection_pending') && $data->{'is_collection_pending'} !== null) {
            $object->setIsCollectionPending($data->{'is_collection_pending'});
        }
        if (property_exists($data, 'stack_id') && $data->{'stack_id'} !== null) {
            $object->setStackId($data->{'stack_id'});
        }
        if (property_exists($data, 'created_at') && $data->{'created_at'} !== null) {
            $object->setCreatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'created_at'}));
        }
        if (property_exists($data, 'updated_at') && $data->{'updated_at'} !== null) {
            $object->setUpdatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'updated_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getTarget()) {
            $data->{'target'} = $object->getTarget();
        }
        if (null !== $object->getStatus()) {
            $data->{'status'} = $object->getStatus();
        }
        if (null !== $object->getCollectAt()) {
            $data->{'collect_at'} = $object->getCollectAt();
        }
        if (null !== $object->getCollections()) {
            $values = [];
            foreach ($object->getCollections() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'collections'} = $values;
        }
        if (null !== $object->getDeliveries()) {
            $values_1 = [];
            foreach ($object->getDeliveries() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'deliveries'} = $values_1;
        }
        if (null !== $object->getIsCollectionPending()) {
            $data->{'is_collection_pending'} = $object->getIsCollectionPending();
        }
        if (null !== $object->getStackId()) {
            $data->{'stack_id'} = $object->getStackId();
        }
        if (null !== $object->getCreatedAt()) {
            $data->{'created_at'} = $object->getCreatedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getUpdatedAt()) {
            $data->{'updated_at'} = $object->getUpdatedAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
