<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class MesSearchNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Afosto\\Sdk\\Model\\MesSearch';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Afosto\\Sdk\\Model\\MesSearch';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\MesSearch();
        if (property_exists($data, 'ids') && $data->{'ids'} !== null) {
            $values = [];
            foreach ($data->{'ids'} as $value) {
                $values[] = $value;
            }
            $object->setIds($values);
        }
        if (property_exists($data, 'event') && $data->{'event'} !== null) {
            $object->setEvent($data->{'event'});
        }
        if (property_exists($data, 'entity_type') && $data->{'entity_type'} !== null) {
            $object->setEntityType($data->{'entity_type'});
        }
        if (property_exists($data, 'entity_ids') && $data->{'entity_ids'} !== null) {
            $values_1 = [];
            foreach ($data->{'entity_ids'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setEntityIds($values_1);
        }
        if (property_exists($data, 'medium') && $data->{'medium'} !== null) {
            $object->setMedium($data->{'medium'});
        }
        if (property_exists($data, 'participant_reference') && $data->{'participant_reference'} !== null) {
            $object->setParticipantReference($data->{'participant_reference'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getIds()) {
            $values = [];
            foreach ($object->getIds() as $value) {
                $values[] = $value;
            }
            $data->{'ids'} = $values;
        }
        if (null !== $object->getEvent()) {
            $data->{'event'} = $object->getEvent();
        }
        if (null !== $object->getEntityType()) {
            $data->{'entity_type'} = $object->getEntityType();
        }
        if (null !== $object->getEntityIds()) {
            $values_1 = [];
            foreach ($object->getEntityIds() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'entity_ids'} = $values_1;
        }
        if (null !== $object->getMedium()) {
            $data->{'medium'} = $object->getMedium();
        }
        if (null !== $object->getParticipantReference()) {
            $data->{'participant_reference'} = $object->getParticipantReference();
        }

        return $data;
    }
}
