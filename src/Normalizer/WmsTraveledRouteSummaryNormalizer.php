<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class WmsTraveledRouteSummaryNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\WmsTraveledRouteSummary' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\WmsTraveledRouteSummary' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\WmsTraveledRouteSummary();
        if (property_exists($data, 'claim_id') && null !== $data->{'claim_id'}) {
            $object->setClaimId($data->{'claim_id'});
        }
        if (property_exists($data, 'route') && null !== $data->{'route'}) {
            $values = [];
            foreach ($data->{'route'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Afosto\\Sdk\\Model\\WmsDescriptiveLocation', 'json', $context);
            }
            $object->setRoute($values);
        }
        if (property_exists($data, 'transports') && null !== $data->{'transports'}) {
            $values_1 = [];
            foreach ($data->{'transports'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Afosto\\Sdk\\Model\\WmsTransport', 'json', $context);
            }
            $object->setTransports($values_1);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getClaimId()) {
            $data->{'claim_id'} = $object->getClaimId();
        }
        if (null !== $object->getRoute()) {
            $values = [];
            foreach ($object->getRoute() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'route'} = $values;
        }
        if (null !== $object->getTransports()) {
            $values_1 = [];
            foreach ($object->getTransports() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'transports'} = $values_1;
        }

        return $data;
    }
}
