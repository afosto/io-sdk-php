<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OdrOrderAcceptancesItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\OdrOrderAcceptancesItem' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\OdrOrderAcceptancesItem' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\OdrOrderAcceptancesItem();
        if (property_exists($data, 'id') && null !== $data->{'id'}) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'amount') && null !== $data->{'amount'}) {
            $object->setAmount($data->{'amount'});
        }
        if (property_exists($data, 'is_prepaid') && null !== $data->{'is_prepaid'}) {
            $object->setIsPrepaid($data->{'is_prepaid'});
        }
        if (property_exists($data, 'is_settlement') && null !== $data->{'is_settlement'}) {
            $object->setIsSettlement($data->{'is_settlement'});
        }
        if (property_exists($data, 'is_accepted') && null !== $data->{'is_accepted'}) {
            $object->setIsAccepted($data->{'is_accepted'});
        }
        if (property_exists($data, 'calculation_id') && null !== $data->{'calculation_id'}) {
            $object->setCalculationId($data->{'calculation_id'});
        }
        if (property_exists($data, 'transaction_secret') && null !== $data->{'transaction_secret'}) {
            $object->setTransactionSecret($data->{'transaction_secret'});
        }
        if (property_exists($data, 'created_at') && null !== $data->{'created_at'}) {
            $object->setCreatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'created_at'}));
        }
        if (property_exists($data, 'accepted_at') && null !== $data->{'accepted_at'}) {
            $object->setAcceptedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'accepted_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getAmount()) {
            $data->{'amount'} = $object->getAmount();
        }
        if (null !== $object->getIsPrepaid()) {
            $data->{'is_prepaid'} = $object->getIsPrepaid();
        }
        if (null !== $object->getIsSettlement()) {
            $data->{'is_settlement'} = $object->getIsSettlement();
        }
        if (null !== $object->getIsAccepted()) {
            $data->{'is_accepted'} = $object->getIsAccepted();
        }
        if (null !== $object->getCalculationId()) {
            $data->{'calculation_id'} = $object->getCalculationId();
        }
        if (null !== $object->getTransactionSecret()) {
            $data->{'transaction_secret'} = $object->getTransactionSecret();
        }
        if (null !== $object->getCreatedAt()) {
            $data->{'created_at'} = $object->getCreatedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getAcceptedAt()) {
            $data->{'accepted_at'} = $object->getAcceptedAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
