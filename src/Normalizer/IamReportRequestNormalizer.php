<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IamReportRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\IamReportRequest' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\IamReportRequest' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\IamReportRequest();
        if (property_exists($data, 'interval') && null !== $data->{'interval'}) {
            $object->setInterval($data->{'interval'});
        }
        if (property_exists($data, 'code') && null !== $data->{'code'}) {
            $object->setCode($data->{'code'});
        }
        if (property_exists($data, 'unit') && null !== $data->{'unit'}) {
            $object->setUnit($data->{'unit'});
        }
        if (property_exists($data, 'as') && null !== $data->{'as'}) {
            $object->setAs($data->{'as'});
        }
        if (property_exists($data, 'filter') && null !== $data->{'filter'}) {
            $object->setFilter($data->{'filter'});
        }
        if (property_exists($data, 'keys') && null !== $data->{'keys'}) {
            $values = [];
            foreach ($data->{'keys'} as $value) {
                $values[] = $value;
            }
            $object->setKeys($values);
        }
        if (property_exists($data, 'start_at') && null !== $data->{'start_at'}) {
            $object->setStartAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'start_at'}));
        }
        if (property_exists($data, 'end_at') && null !== $data->{'end_at'}) {
            $object->setEndAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'end_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getInterval()) {
            $data->{'interval'} = $object->getInterval();
        }
        if (null !== $object->getCode()) {
            $data->{'code'} = $object->getCode();
        }
        if (null !== $object->getUnit()) {
            $data->{'unit'} = $object->getUnit();
        }
        if (null !== $object->getAs()) {
            $data->{'as'} = $object->getAs();
        }
        if (null !== $object->getFilter()) {
            $data->{'filter'} = $object->getFilter();
        }
        if (null !== $object->getKeys()) {
            $values = [];
            foreach ($object->getKeys() as $value) {
                $values[] = $value;
            }
            $data->{'keys'} = $values;
        }
        if (null !== $object->getStartAt()) {
            $data->{'start_at'} = $object->getStartAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getEndAt()) {
            $data->{'end_at'} = $object->getEndAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
