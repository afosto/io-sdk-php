<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class LcsGroupedShipmentItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\LcsGroupedShipmentItem' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\LcsGroupedShipmentItem' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\LcsGroupedShipmentItem();
        if (property_exists($data, 'ids') && null !== $data->{'ids'}) {
            $values = [];
            foreach ($data->{'ids'} as $value) {
                $values[] = $value;
            }
            $object->setIds($values);
        }
        if (property_exists($data, 'sku') && null !== $data->{'sku'}) {
            $object->setSku($data->{'sku'});
        }
        if (property_exists($data, 'quantity') && null !== $data->{'quantity'}) {
            $object->setQuantity($data->{'quantity'});
        }
        if (property_exists($data, 'hs_code') && null !== $data->{'hs_code'}) {
            $object->setHsCode($data->{'hs_code'});
        }
        if (property_exists($data, 'description') && null !== $data->{'description'}) {
            $object->setDescription($data->{'description'});
        }
        if (property_exists($data, 'order_item_ids') && null !== $data->{'order_item_ids'}) {
            $values_1 = [];
            foreach ($data->{'order_item_ids'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setOrderItemIds($values_1);
        }
        if (property_exists($data, 'lists') && null !== $data->{'lists'}) {
            $values_2 = [];
            foreach ($data->{'lists'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Afosto\\Sdk\\Model\\LcsGroupedShipmentItemListsItem', 'json', $context);
            }
            $object->setLists($values_2);
        }
        if (property_exists($data, 'parcels') && null !== $data->{'parcels'}) {
            $values_3 = [];
            foreach ($data->{'parcels'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Afosto\\Sdk\\Model\\LcsGroupedShipmentItemParcelsItem', 'json', $context);
            }
            $object->setParcels($values_3);
        }
        if (property_exists($data, 'handled_ids') && null !== $data->{'handled_ids'}) {
            $values_4 = [];
            foreach ($data->{'handled_ids'} as $value_4) {
                $values_4[] = $value_4;
            }
            $object->setHandledIds($values_4);
        }
        if (property_exists($data, 'boxed_ids') && null !== $data->{'boxed_ids'}) {
            $values_5 = [];
            foreach ($data->{'boxed_ids'} as $value_5) {
                $values_5[] = $value_5;
            }
            $object->setBoxedIds($values_5);
        }
        if (property_exists($data, 'listed_ids') && null !== $data->{'listed_ids'}) {
            $values_6 = [];
            foreach ($data->{'listed_ids'} as $value_6) {
                $values_6[] = $value_6;
            }
            $object->setListedIds($values_6);
        }
        if (property_exists($data, 'finished_ids') && null !== $data->{'finished_ids'}) {
            $values_7 = [];
            foreach ($data->{'finished_ids'} as $value_7) {
                $values_7[] = $value_7;
            }
            $object->setFinishedIds($values_7);
        }
        if (property_exists($data, 'missing_ids') && null !== $data->{'missing_ids'}) {
            $values_8 = [];
            foreach ($data->{'missing_ids'} as $value_8) {
                $values_8[] = $value_8;
            }
            $object->setMissingIds($values_8);
        }
        if (property_exists($data, 'shipment_id') && null !== $data->{'shipment_id'}) {
            $object->setShipmentId($data->{'shipment_id'});
        }
        if (property_exists($data, 'totals') && null !== $data->{'totals'}) {
            $object->setTotals($this->denormalizer->denormalize($data->{'totals'}, 'Afosto\\Sdk\\Model\\LcsGroupedShipmentItemTotals', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getIds()) {
            $values = [];
            foreach ($object->getIds() as $value) {
                $values[] = $value;
            }
            $data->{'ids'} = $values;
        }
        if (null !== $object->getSku()) {
            $data->{'sku'} = $object->getSku();
        }
        if (null !== $object->getQuantity()) {
            $data->{'quantity'} = $object->getQuantity();
        }
        if (null !== $object->getHsCode()) {
            $data->{'hs_code'} = $object->getHsCode();
        }
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getOrderItemIds()) {
            $values_1 = [];
            foreach ($object->getOrderItemIds() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'order_item_ids'} = $values_1;
        }
        if (null !== $object->getLists()) {
            $values_2 = [];
            foreach ($object->getLists() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'lists'} = $values_2;
        }
        if (null !== $object->getParcels()) {
            $values_3 = [];
            foreach ($object->getParcels() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'parcels'} = $values_3;
        }
        if (null !== $object->getHandledIds()) {
            $values_4 = [];
            foreach ($object->getHandledIds() as $value_4) {
                $values_4[] = $value_4;
            }
            $data->{'handled_ids'} = $values_4;
        }
        if (null !== $object->getBoxedIds()) {
            $values_5 = [];
            foreach ($object->getBoxedIds() as $value_5) {
                $values_5[] = $value_5;
            }
            $data->{'boxed_ids'} = $values_5;
        }
        if (null !== $object->getListedIds()) {
            $values_6 = [];
            foreach ($object->getListedIds() as $value_6) {
                $values_6[] = $value_6;
            }
            $data->{'listed_ids'} = $values_6;
        }
        if (null !== $object->getFinishedIds()) {
            $values_7 = [];
            foreach ($object->getFinishedIds() as $value_7) {
                $values_7[] = $value_7;
            }
            $data->{'finished_ids'} = $values_7;
        }
        if (null !== $object->getMissingIds()) {
            $values_8 = [];
            foreach ($object->getMissingIds() as $value_8) {
                $values_8[] = $value_8;
            }
            $data->{'missing_ids'} = $values_8;
        }
        if (null !== $object->getShipmentId()) {
            $data->{'shipment_id'} = $object->getShipmentId();
        }
        if (null !== $object->getTotals()) {
            $data->{'totals'} = $this->normalizer->normalize($object->getTotals(), 'json', $context);
        }

        return $data;
    }
}
