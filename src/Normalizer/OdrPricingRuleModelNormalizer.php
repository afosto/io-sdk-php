<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OdrPricingRuleModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\OdrPricingRuleModel' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\OdrPricingRuleModel' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\OdrPricingRuleModel();
        if (property_exists($data, 'name') && null !== $data->{'name'}) {
            $object->setName($data->{'name'});
        }
        if (property_exists($data, 'constraints') && null !== $data->{'constraints'}) {
            $values = [];
            foreach ($data->{'constraints'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Afosto\\Sdk\\Model\\OdrPricingRuleConstraint', 'json', $context);
            }
            $object->setConstraints($values);
        }
        if (property_exists($data, 'filters') && null !== $data->{'filters'}) {
            $values_1 = [];
            foreach ($data->{'filters'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Afosto\\Sdk\\Model\\OdrPricingRuleFilter', 'json', $context);
            }
            $object->setFilters($values_1);
        }
        if (property_exists($data, 'adjustments') && null !== $data->{'adjustments'}) {
            $values_2 = [];
            foreach ($data->{'adjustments'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Afosto\\Sdk\\Model\\OdrAdjustment', 'json', $context);
            }
            $object->setAdjustments($values_2);
        }
        if (property_exists($data, 'apply_to') && null !== $data->{'apply_to'}) {
            $object->setApplyTo($data->{'apply_to'});
        }
        if (property_exists($data, 'grant_limit') && null !== $data->{'grant_limit'}) {
            $object->setGrantLimit($data->{'grant_limit'});
        }
        if (property_exists($data, 'priority') && null !== $data->{'priority'}) {
            $object->setPriority($data->{'priority'});
        }
        if (property_exists($data, 'is_last_rule') && null !== $data->{'is_last_rule'}) {
            $object->setIsLastRule($data->{'is_last_rule'});
        }
        if (property_exists($data, 'evaluate_at') && null !== $data->{'evaluate_at'}) {
            $object->setEvaluateAt($data->{'evaluate_at'});
        }
        if (property_exists($data, 'metadata') && null !== $data->{'metadata'}) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'active_at') && null !== $data->{'active_at'}) {
            $object->setActiveAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'active_at'}));
        }
        if (property_exists($data, 'expires_at') && null !== $data->{'expires_at'}) {
            $object->setExpiresAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'expires_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getConstraints()) {
            $values = [];
            foreach ($object->getConstraints() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'constraints'} = $values;
        }
        if (null !== $object->getFilters()) {
            $values_1 = [];
            foreach ($object->getFilters() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'filters'} = $values_1;
        }
        if (null !== $object->getAdjustments()) {
            $values_2 = [];
            foreach ($object->getAdjustments() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'adjustments'} = $values_2;
        }
        if (null !== $object->getApplyTo()) {
            $data->{'apply_to'} = $object->getApplyTo();
        }
        if (null !== $object->getGrantLimit()) {
            $data->{'grant_limit'} = $object->getGrantLimit();
        }
        if (null !== $object->getPriority()) {
            $data->{'priority'} = $object->getPriority();
        }
        if (null !== $object->getIsLastRule()) {
            $data->{'is_last_rule'} = $object->getIsLastRule();
        }
        if (null !== $object->getEvaluateAt()) {
            $data->{'evaluate_at'} = $object->getEvaluateAt();
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getActiveAt()) {
            $data->{'active_at'} = $object->getActiveAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getExpiresAt()) {
            $data->{'expires_at'} = $object->getExpiresAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
