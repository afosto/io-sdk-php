<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OdrPriceRuleEvaluationNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Afosto\\Sdk\\Model\\OdrPriceRuleEvaluation';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Afosto\\Sdk\\Model\\OdrPriceRuleEvaluation';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\OdrPriceRuleEvaluation();
        if (property_exists($data, 'pricing_at') && $data->{'pricing_at'} !== null) {
            $object->setPricingAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'pricing_at'}));
        }
        if (property_exists($data, 'quantity') && $data->{'quantity'} !== null) {
            $object->setQuantity($data->{'quantity'});
        }
        if (property_exists($data, 'amount') && $data->{'amount'} !== null) {
            $object->setAmount($data->{'amount'});
        }
        if (property_exists($data, 'client') && $data->{'client'} !== null) {
            $object->setClient($data->{'client'});
        }
        if (property_exists($data, 'tags') && $data->{'tags'} !== null) {
            $values = [];
            foreach ($data->{'tags'} as $value) {
                $values[] = $value;
            }
            $object->setTags($values);
        }
        if (property_exists($data, 'shipment_method') && $data->{'shipment_method'} !== null) {
            $object->setShipmentMethod($data->{'shipment_method'});
        }
        if (property_exists($data, 'payment_method') && $data->{'payment_method'} !== null) {
            $object->setPaymentMethod($data->{'payment_method'});
        }
        if (property_exists($data, 'coupons') && $data->{'coupons'} !== null) {
            $values_1 = [];
            foreach ($data->{'coupons'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setCoupons($values_1);
        }
        if (property_exists($data, 'items') && $data->{'items'} !== null) {
            $values_2 = [];
            foreach ($data->{'items'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Afosto\\Sdk\\Model\\OdrEvaluationItem', 'json', $context);
            }
            $object->setItems($values_2);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getPricingAt()) {
            $data->{'pricing_at'} = $object->getPricingAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getQuantity()) {
            $data->{'quantity'} = $object->getQuantity();
        }
        if (null !== $object->getAmount()) {
            $data->{'amount'} = $object->getAmount();
        }
        if (null !== $object->getClient()) {
            $data->{'client'} = $object->getClient();
        }
        if (null !== $object->getTags()) {
            $values = [];
            foreach ($object->getTags() as $value) {
                $values[] = $value;
            }
            $data->{'tags'} = $values;
        }
        if (null !== $object->getShipmentMethod()) {
            $data->{'shipment_method'} = $object->getShipmentMethod();
        }
        if (null !== $object->getPaymentMethod()) {
            $data->{'payment_method'} = $object->getPaymentMethod();
        }
        if (null !== $object->getCoupons()) {
            $values_1 = [];
            foreach ($object->getCoupons() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'coupons'} = $values_1;
        }
        if (null !== $object->getItems()) {
            $values_2 = [];
            foreach ($object->getItems() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'items'} = $values_2;
        }

        return $data;
    }
}
