<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OdrOrderItemReferencesOrderNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\OdrOrderItemReferencesOrder' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\OdrOrderItemReferencesOrder' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\OdrOrderItemReferencesOrder();
        if (property_exists($data, 'id') && null !== $data->{'id'}) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'is_inbound') && null !== $data->{'is_inbound'}) {
            $object->setIsInbound($data->{'is_inbound'});
        }
        if (property_exists($data, 'is_available') && null !== $data->{'is_available'}) {
            $object->setIsAvailable($data->{'is_available'});
        }
        if (property_exists($data, 'is_backorder') && null !== $data->{'is_backorder'}) {
            $object->setIsBackorder($data->{'is_backorder'});
        }
        if (property_exists($data, 'warehouse') && null !== $data->{'warehouse'}) {
            $object->setWarehouse($this->denormalizer->denormalize($data->{'warehouse'}, 'Afosto\\Sdk\\Model\\OdrOrderItemReferencesOrderWarehouse', 'json', $context));
        }
        if (property_exists($data, 'shipments') && null !== $data->{'shipments'}) {
            $values = [];
            foreach ($data->{'shipments'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Afosto\\Sdk\\Model\\OdrOrderItemReferencesOrderShipment', 'json', $context);
            }
            $object->setShipments($values);
        }
        if (property_exists($data, 'backorders') && null !== $data->{'backorders'}) {
            $values_1 = [];
            foreach ($data->{'backorders'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setBackorders($values_1);
        }
        if (property_exists($data, 'target') && null !== $data->{'target'}) {
            $object->setTarget($data->{'target'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getIsInbound()) {
            $data->{'is_inbound'} = $object->getIsInbound();
        }
        if (null !== $object->getIsAvailable()) {
            $data->{'is_available'} = $object->getIsAvailable();
        }
        if (null !== $object->getIsBackorder()) {
            $data->{'is_backorder'} = $object->getIsBackorder();
        }
        if (null !== $object->getWarehouse()) {
            $data->{'warehouse'} = $this->normalizer->normalize($object->getWarehouse(), 'json', $context);
        }
        if (null !== $object->getShipments()) {
            $values = [];
            foreach ($object->getShipments() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'shipments'} = $values;
        }
        if (null !== $object->getBackorders()) {
            $values_1 = [];
            foreach ($object->getBackorders() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'backorders'} = $values_1;
        }
        if (null !== $object->getTarget()) {
            $data->{'target'} = $object->getTarget();
        }

        return $data;
    }
}
