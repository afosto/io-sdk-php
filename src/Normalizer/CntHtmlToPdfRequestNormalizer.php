<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CntHtmlToPdfRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Afosto\\Sdk\\Model\\CntHtmlToPdfRequest';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Afosto\\Sdk\\Model\\CntHtmlToPdfRequest';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\CntHtmlToPdfRequest();
        if (property_exists($data, 'path') && $data->{'path'} !== null) {
            $object->setPath($data->{'path'});
        }
        if (property_exists($data, 'filename') && $data->{'filename'} !== null) {
            $object->setFilename($data->{'filename'});
        }
        if (property_exists($data, 'size') && $data->{'size'} !== null) {
            $object->setSize($this->denormalizer->denormalize($data->{'size'}, 'Afosto\\Sdk\\Model\\CntHtmlToPdfRequestSize', 'json', $context));
        }
        if (property_exists($data, 'margin') && $data->{'margin'} !== null) {
            $object->setMargin($this->denormalizer->denormalize($data->{'margin'}, 'Afosto\\Sdk\\Model\\CntHtmlToPdfRequestMargin', 'json', $context));
        }
        if (property_exists($data, 'method') && $data->{'method'} !== null) {
            $object->setMethod($data->{'method'});
        }
        if (property_exists($data, 'content') && $data->{'content'} !== null) {
            $object->setContent($data->{'content'});
        }
        if (property_exists($data, 'wait_delay') && $data->{'wait_delay'} !== null) {
            $object->setWaitDelay($data->{'wait_delay'});
        }
        if (property_exists($data, 'wait_timeout') && $data->{'wait_timeout'} !== null) {
            $object->setWaitTimeout($data->{'wait_timeout'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getPath()) {
            $data->{'path'} = $object->getPath();
        }
        if (null !== $object->getFilename()) {
            $data->{'filename'} = $object->getFilename();
        }
        if (null !== $object->getSize()) {
            $data->{'size'} = $this->normalizer->normalize($object->getSize(), 'json', $context);
        }
        if (null !== $object->getMargin()) {
            $data->{'margin'} = $this->normalizer->normalize($object->getMargin(), 'json', $context);
        }
        if (null !== $object->getMethod()) {
            $data->{'method'} = $object->getMethod();
        }
        if (null !== $object->getContent()) {
            $data->{'content'} = $object->getContent();
        }
        if (null !== $object->getWaitDelay()) {
            $data->{'wait_delay'} = $object->getWaitDelay();
        }
        if (null !== $object->getWaitTimeout()) {
            $data->{'wait_timeout'} = $object->getWaitTimeout();
        }

        return $data;
    }
}
