<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IamUsageProjectionResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Afosto\\Sdk\\Model\\IamUsageProjectionResponse';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Afosto\\Sdk\\Model\\IamUsageProjectionResponse';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\IamUsageProjectionResponse();
        if (property_exists($data, 'code') && $data->{'code'} !== null) {
            $object->setCode($data->{'code'});
        }
        if (property_exists($data, 'unit') && $data->{'unit'} !== null) {
            $object->setUnit($data->{'unit'});
        }
        if (property_exists($data, 'is_within_active_tier') && $data->{'is_within_active_tier'} !== null) {
            $object->setIsWithinActiveTier($data->{'is_within_active_tier'});
        }
        if (property_exists($data, 'limit') && $data->{'limit'} !== null) {
            $object->setLimit($data->{'limit'});
        }
        if (property_exists($data, 'amount') && $data->{'amount'} !== null) {
            $object->setAmount($data->{'amount'});
        }
        if (property_exists($data, 'new_limit') && $data->{'new_limit'} !== null) {
            $object->setNewLimit($data->{'new_limit'});
        }
        if (property_exists($data, 'new_amount') && $data->{'new_amount'} !== null) {
            $object->setNewAmount($data->{'new_amount'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCode()) {
            $data->{'code'} = $object->getCode();
        }
        if (null !== $object->getUnit()) {
            $data->{'unit'} = $object->getUnit();
        }
        if (null !== $object->getIsWithinActiveTier()) {
            $data->{'is_within_active_tier'} = $object->getIsWithinActiveTier();
        }
        if (null !== $object->getLimit()) {
            $data->{'limit'} = $object->getLimit();
        }
        if (null !== $object->getAmount()) {
            $data->{'amount'} = $object->getAmount();
        }
        if (null !== $object->getNewLimit()) {
            $data->{'new_limit'} = $object->getNewLimit();
        }
        if (null !== $object->getNewAmount()) {
            $data->{'new_amount'} = $object->getNewAmount();
        }

        return $data;
    }
}
