<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OdrProjectionModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Afosto\\Sdk\\Model\\OdrProjectionModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Afosto\\Sdk\\Model\\OdrProjectionModel';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\OdrProjectionModel();
        if (property_exists($data, 'customer_id') && $data->{'customer_id'} !== null) {
            $object->setCustomerId($data->{'customer_id'});
        }
        if (property_exists($data, 'country') && $data->{'country'} !== null) {
            $object->setCountry($data->{'country'});
        }
        if (property_exists($data, 'client_id') && $data->{'client_id'} !== null) {
            $object->setClientId($data->{'client_id'});
        }
        if (property_exists($data, 'stack_reference') && $data->{'stack_reference'} !== null) {
            $object->setStackReference($this->denormalizer->denormalize($data->{'stack_reference'}, 'Afosto\\Sdk\\Model\\OdrStackReference', 'json', $context));
        }
        if (property_exists($data, 'payment_method_id') && $data->{'payment_method_id'} !== null) {
            $object->setPaymentMethodId($data->{'payment_method_id'});
        }
        if (property_exists($data, 'route_ids') && $data->{'route_ids'} !== null) {
            $values = [];
            foreach ($data->{'route_ids'} as $value) {
                $values[] = $value;
            }
            $object->setRouteIds($values);
        }
        if (property_exists($data, 'coupons') && $data->{'coupons'} !== null) {
            $values_1 = [];
            foreach ($data->{'coupons'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setCoupons($values_1);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCustomerId()) {
            $data->{'customer_id'} = $object->getCustomerId();
        }
        if (null !== $object->getCountry()) {
            $data->{'country'} = $object->getCountry();
        }
        if (null !== $object->getClientId()) {
            $data->{'client_id'} = $object->getClientId();
        }
        if (null !== $object->getStackReference()) {
            $data->{'stack_reference'} = $this->normalizer->normalize($object->getStackReference(), 'json', $context);
        }
        if (null !== $object->getPaymentMethodId()) {
            $data->{'payment_method_id'} = $object->getPaymentMethodId();
        }
        if (null !== $object->getRouteIds()) {
            $values = [];
            foreach ($object->getRouteIds() as $value) {
                $values[] = $value;
            }
            $data->{'route_ids'} = $values;
        }
        if (null !== $object->getCoupons()) {
            $values_1 = [];
            foreach ($object->getCoupons() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'coupons'} = $values_1;
        }

        return $data;
    }
}
