<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class LcsShipmentNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\LcsShipment' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\LcsShipment' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\LcsShipment();
        if (property_exists($data, 'id') && null !== $data->{'id'}) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'number') && null !== $data->{'number'}) {
            $object->setNumber($data->{'number'});
        }
        if (property_exists($data, 'type') && null !== $data->{'type'}) {
            $object->setType($data->{'type'});
        }
        if (property_exists($data, 'method_id') && null !== $data->{'method_id'}) {
            $object->setMethodId($data->{'method_id'});
        }
        if (property_exists($data, 'contact_id') && null !== $data->{'contact_id'}) {
            $object->setContactId($data->{'contact_id'});
        }
        if (property_exists($data, 'channel_id') && null !== $data->{'channel_id'}) {
            $object->setChannelId($data->{'channel_id'});
        }
        if (property_exists($data, 'order_id') && null !== $data->{'order_id'}) {
            $object->setOrderId($data->{'order_id'});
        }
        if (property_exists($data, 'addressing') && null !== $data->{'addressing'}) {
            $object->setAddressing($this->denormalizer->denormalize($data->{'addressing'}, 'Afosto\\Sdk\\Model\\LcsListedShipmentAddressing', 'json', $context));
        }
        if (property_exists($data, 'ship_at') && null !== $data->{'ship_at'}) {
            $object->setShipAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'ship_at'}));
        }
        if (property_exists($data, 'estimated_ship_at') && null !== $data->{'estimated_ship_at'}) {
            $object->setEstimatedShipAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'estimated_ship_at'}));
        }
        if (property_exists($data, 'expected_at') && null !== $data->{'expected_at'}) {
            $object->setExpectedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'expected_at'}));
        }
        if (property_exists($data, 'stack_id') && null !== $data->{'stack_id'}) {
            $object->setStackId($data->{'stack_id'});
        }
        if (property_exists($data, 'is_editable') && null !== $data->{'is_editable'}) {
            $object->setIsEditable($data->{'is_editable'});
        }
        if (property_exists($data, 'is_outbound') && null !== $data->{'is_outbound'}) {
            $object->setIsOutbound($data->{'is_outbound'});
        }
        if (property_exists($data, 'is_labeled') && null !== $data->{'is_labeled'}) {
            $object->setIsLabeled($data->{'is_labeled'});
        }
        if (property_exists($data, 'is_serviced') && null !== $data->{'is_serviced'}) {
            $object->setIsServiced($data->{'is_serviced'});
        }
        if (property_exists($data, 'is_complete') && null !== $data->{'is_complete'}) {
            $object->setIsComplete($data->{'is_complete'});
        }
        if (property_exists($data, 'is_overcomplete') && null !== $data->{'is_overcomplete'}) {
            $object->setIsOvercomplete($data->{'is_overcomplete'});
        }
        if (property_exists($data, 'is_boxed') && null !== $data->{'is_boxed'}) {
            $object->setIsBoxed($data->{'is_boxed'});
        }
        if (property_exists($data, 'is_handled') && null !== $data->{'is_handled'}) {
            $object->setIsHandled($data->{'is_handled'});
        }
        if (property_exists($data, 'is_listed') && null !== $data->{'is_listed'}) {
            $object->setIsListed($data->{'is_listed'});
        }
        if (property_exists($data, 'is_finished') && null !== $data->{'is_finished'}) {
            $object->setIsFinished($data->{'is_finished'});
        }
        if (property_exists($data, 'is_in_transit') && null !== $data->{'is_in_transit'}) {
            $object->setIsInTransit($data->{'is_in_transit'});
        }
        if (property_exists($data, 'is_canceled') && null !== $data->{'is_canceled'}) {
            $object->setIsCanceled($data->{'is_canceled'});
        }
        if (property_exists($data, 'items') && null !== $data->{'items'}) {
            $values = [];
            foreach ($data->{'items'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Afosto\\Sdk\\Model\\LcsShipmentItem', 'json', $context);
            }
            $object->setItems($values);
        }
        if (property_exists($data, 'backorders') && null !== $data->{'backorders'}) {
            $values_1 = [];
            foreach ($data->{'backorders'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Afosto\\Sdk\\Model\\LcsShipmentItemCorrection', 'json', $context);
            }
            $object->setBackorders($values_1);
        }
        if (property_exists($data, 'overage') && null !== $data->{'overage'}) {
            $values_2 = [];
            foreach ($data->{'overage'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Afosto\\Sdk\\Model\\LcsShipmentItemCorrection', 'json', $context);
            }
            $object->setOverage($values_2);
        }
        if (property_exists($data, 'parcels') && null !== $data->{'parcels'}) {
            $values_3 = [];
            foreach ($data->{'parcels'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Afosto\\Sdk\\Model\\LcsParcel', 'json', $context);
            }
            $object->setParcels($values_3);
        }
        if (property_exists($data, 'secret') && null !== $data->{'secret'}) {
            $object->setSecret($data->{'secret'});
        }
        if (property_exists($data, 'prior_shipments') && null !== $data->{'prior_shipments'}) {
            $values_4 = [];
            foreach ($data->{'prior_shipments'} as $value_4) {
                $values_4[] = $value_4;
            }
            $object->setPriorShipments($values_4);
        }
        if (property_exists($data, 'list_id') && null !== $data->{'list_id'}) {
            $object->setListId($data->{'list_id'});
        }
        if (property_exists($data, 'created_at') && null !== $data->{'created_at'}) {
            $object->setCreatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'created_at'}));
        }
        if (property_exists($data, 'updated_at') && null !== $data->{'updated_at'}) {
            $object->setUpdatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'updated_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getNumber()) {
            $data->{'number'} = $object->getNumber();
        }
        if (null !== $object->getType()) {
            $data->{'type'} = $object->getType();
        }
        if (null !== $object->getMethodId()) {
            $data->{'method_id'} = $object->getMethodId();
        }
        if (null !== $object->getContactId()) {
            $data->{'contact_id'} = $object->getContactId();
        }
        if (null !== $object->getChannelId()) {
            $data->{'channel_id'} = $object->getChannelId();
        }
        if (null !== $object->getOrderId()) {
            $data->{'order_id'} = $object->getOrderId();
        }
        if (null !== $object->getAddressing()) {
            $data->{'addressing'} = $this->normalizer->normalize($object->getAddressing(), 'json', $context);
        }
        if (null !== $object->getShipAt()) {
            $data->{'ship_at'} = $object->getShipAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getEstimatedShipAt()) {
            $data->{'estimated_ship_at'} = $object->getEstimatedShipAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getExpectedAt()) {
            $data->{'expected_at'} = $object->getExpectedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getStackId()) {
            $data->{'stack_id'} = $object->getStackId();
        }
        if (null !== $object->getIsEditable()) {
            $data->{'is_editable'} = $object->getIsEditable();
        }
        if (null !== $object->getIsOutbound()) {
            $data->{'is_outbound'} = $object->getIsOutbound();
        }
        if (null !== $object->getIsLabeled()) {
            $data->{'is_labeled'} = $object->getIsLabeled();
        }
        if (null !== $object->getIsServiced()) {
            $data->{'is_serviced'} = $object->getIsServiced();
        }
        if (null !== $object->getIsComplete()) {
            $data->{'is_complete'} = $object->getIsComplete();
        }
        if (null !== $object->getIsOvercomplete()) {
            $data->{'is_overcomplete'} = $object->getIsOvercomplete();
        }
        if (null !== $object->getIsBoxed()) {
            $data->{'is_boxed'} = $object->getIsBoxed();
        }
        if (null !== $object->getIsHandled()) {
            $data->{'is_handled'} = $object->getIsHandled();
        }
        if (null !== $object->getIsListed()) {
            $data->{'is_listed'} = $object->getIsListed();
        }
        if (null !== $object->getIsFinished()) {
            $data->{'is_finished'} = $object->getIsFinished();
        }
        if (null !== $object->getIsInTransit()) {
            $data->{'is_in_transit'} = $object->getIsInTransit();
        }
        if (null !== $object->getIsCanceled()) {
            $data->{'is_canceled'} = $object->getIsCanceled();
        }
        if (null !== $object->getItems()) {
            $values = [];
            foreach ($object->getItems() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'items'} = $values;
        }
        if (null !== $object->getBackorders()) {
            $values_1 = [];
            foreach ($object->getBackorders() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'backorders'} = $values_1;
        }
        if (null !== $object->getOverage()) {
            $values_2 = [];
            foreach ($object->getOverage() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'overage'} = $values_2;
        }
        if (null !== $object->getParcels()) {
            $values_3 = [];
            foreach ($object->getParcels() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'parcels'} = $values_3;
        }
        if (null !== $object->getSecret()) {
            $data->{'secret'} = $object->getSecret();
        }
        if (null !== $object->getPriorShipments()) {
            $values_4 = [];
            foreach ($object->getPriorShipments() as $value_4) {
                $values_4[] = $value_4;
            }
            $data->{'prior_shipments'} = $values_4;
        }
        if (null !== $object->getListId()) {
            $data->{'list_id'} = $object->getListId();
        }
        if (null !== $object->getCreatedAt()) {
            $data->{'created_at'} = $object->getCreatedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getUpdatedAt()) {
            $data->{'updated_at'} = $object->getUpdatedAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
