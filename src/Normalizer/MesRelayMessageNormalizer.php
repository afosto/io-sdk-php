<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class MesRelayMessageNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\MesRelayMessage' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\MesRelayMessage' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\MesRelayMessage();
        if (property_exists($data, 'id') && null !== $data->{'id'}) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'hash') && null !== $data->{'hash'}) {
            $object->setHash($data->{'hash'});
        }
        if (property_exists($data, 'payload') && null !== $data->{'payload'}) {
            $object->setPayload($data->{'payload'});
        }
        if (property_exists($data, 'is_valid') && null !== $data->{'is_valid'}) {
            $object->setIsValid($data->{'is_valid'});
        }
        if (property_exists($data, 'is_relayed') && null !== $data->{'is_relayed'}) {
            $object->setIsRelayed($data->{'is_relayed'});
        }
        if (property_exists($data, 'is_duplicate') && null !== $data->{'is_duplicate'}) {
            $object->setIsDuplicate($data->{'is_duplicate'});
        }
        if (property_exists($data, 'source') && null !== $data->{'source'}) {
            $object->setSource($this->denormalizer->denormalize($data->{'source'}, 'Afosto\\Sdk\\Model\\MesRelayMessageSource', 'json', $context));
        }
        if (property_exists($data, 'relayed_at') && null !== $data->{'relayed_at'}) {
            $object->setRelayedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'relayed_at'}));
        }
        if (property_exists($data, 'created_at') && null !== $data->{'created_at'}) {
            $object->setCreatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'created_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getHash()) {
            $data->{'hash'} = $object->getHash();
        }
        if (null !== $object->getPayload()) {
            $data->{'payload'} = $object->getPayload();
        }
        if (null !== $object->getIsValid()) {
            $data->{'is_valid'} = $object->getIsValid();
        }
        if (null !== $object->getIsRelayed()) {
            $data->{'is_relayed'} = $object->getIsRelayed();
        }
        if (null !== $object->getIsDuplicate()) {
            $data->{'is_duplicate'} = $object->getIsDuplicate();
        }
        if (null !== $object->getSource()) {
            $data->{'source'} = $this->normalizer->normalize($object->getSource(), 'json', $context);
        }
        if (null !== $object->getRelayedAt()) {
            $data->{'relayed_at'} = $object->getRelayedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getCreatedAt()) {
            $data->{'created_at'} = $object->getCreatedAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
