<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class LcsShipmentModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\LcsShipmentModel' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\LcsShipmentModel' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\LcsShipmentModel();
        if (property_exists($data, 'addressing') && null !== $data->{'addressing'}) {
            $object->setAddressing($this->denormalizer->denormalize($data->{'addressing'}, 'Afosto\\Sdk\\Model\\LcsShipmentModelAddressing', 'json', $context));
        }
        if (property_exists($data, 'is_outbound') && null !== $data->{'is_outbound'}) {
            $object->setIsOutbound($data->{'is_outbound'});
        }
        if (property_exists($data, 'type') && null !== $data->{'type'}) {
            $object->setType($data->{'type'});
        }
        if (property_exists($data, 'items') && null !== $data->{'items'}) {
            $values = [];
            foreach ($data->{'items'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Afosto\\Sdk\\Model\\LcsShipmentItemModel', 'json', $context);
            }
            $object->setItems($values);
        }
        if (property_exists($data, 'backorders') && null !== $data->{'backorders'}) {
            $values_1 = [];
            foreach ($data->{'backorders'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Afosto\\Sdk\\Model\\LcsShipmentItemCorrection', 'json', $context);
            }
            $object->setBackorders($values_1);
        }
        if (property_exists($data, 'overage') && null !== $data->{'overage'}) {
            $values_2 = [];
            foreach ($data->{'overage'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Afosto\\Sdk\\Model\\LcsShipmentItemCorrection', 'json', $context);
            }
            $object->setOverage($values_2);
        }
        if (property_exists($data, 'expected_at') && null !== $data->{'expected_at'}) {
            $object->setExpectedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'expected_at'}));
        }
        if (property_exists($data, 'ship_at') && null !== $data->{'ship_at'}) {
            $object->setShipAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'ship_at'}));
        }
        if (property_exists($data, 'method_id') && null !== $data->{'method_id'}) {
            $object->setMethodId($data->{'method_id'});
        }
        if (property_exists($data, 'contact_id') && null !== $data->{'contact_id'}) {
            $object->setContactId($data->{'contact_id'});
        }
        if (property_exists($data, 'order_id') && null !== $data->{'order_id'}) {
            $object->setOrderId($data->{'order_id'});
        }
        if (property_exists($data, 'prior_shipments') && null !== $data->{'prior_shipments'}) {
            $values_3 = [];
            foreach ($data->{'prior_shipments'} as $value_3) {
                $values_3[] = $value_3;
            }
            $object->setPriorShipments($values_3);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAddressing()) {
            $data->{'addressing'} = $this->normalizer->normalize($object->getAddressing(), 'json', $context);
        }
        if (null !== $object->getIsOutbound()) {
            $data->{'is_outbound'} = $object->getIsOutbound();
        }
        if (null !== $object->getType()) {
            $data->{'type'} = $object->getType();
        }
        if (null !== $object->getItems()) {
            $values = [];
            foreach ($object->getItems() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'items'} = $values;
        }
        if (null !== $object->getBackorders()) {
            $values_1 = [];
            foreach ($object->getBackorders() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'backorders'} = $values_1;
        }
        if (null !== $object->getOverage()) {
            $values_2 = [];
            foreach ($object->getOverage() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'overage'} = $values_2;
        }
        if (null !== $object->getExpectedAt()) {
            $data->{'expected_at'} = $object->getExpectedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getShipAt()) {
            $data->{'ship_at'} = $object->getShipAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getMethodId()) {
            $data->{'method_id'} = $object->getMethodId();
        }
        if (null !== $object->getContactId()) {
            $data->{'contact_id'} = $object->getContactId();
        }
        if (null !== $object->getOrderId()) {
            $data->{'order_id'} = $object->getOrderId();
        }
        if (null !== $object->getPriorShipments()) {
            $values_3 = [];
            foreach ($object->getPriorShipments() as $value_3) {
                $values_3[] = $value_3;
            }
            $data->{'prior_shipments'} = $values_3;
        }

        return $data;
    }
}
