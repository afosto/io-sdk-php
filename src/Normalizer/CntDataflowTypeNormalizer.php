<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CntDataflowTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\CntDataflowType' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\CntDataflowType' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\CntDataflowType();
        if (property_exists($data, 'type') && null !== $data->{'type'}) {
            $object->setType($data->{'type'});
        }
        if (property_exists($data, 'code') && null !== $data->{'code'}) {
            $object->setCode($data->{'code'});
        }
        if (property_exists($data, 'source') && null !== $data->{'source'}) {
            $object->setSource($data->{'source'});
        }
        if (property_exists($data, 'trigger') && null !== $data->{'trigger'}) {
            $object->setTrigger($data->{'trigger'});
        }
        if (property_exists($data, 'name') && null !== $data->{'name'}) {
            $object->setName($data->{'name'});
        }
        if (property_exists($data, 'is_proprietary') && null !== $data->{'is_proprietary'}) {
            $object->setIsProprietary($data->{'is_proprietary'});
        }
        if (property_exists($data, 'events') && null !== $data->{'events'}) {
            $values = [];
            foreach ($data->{'events'} as $value) {
                $values[] = $value;
            }
            $object->setEvents($values);
        }
        if (property_exists($data, 'schema') && null !== $data->{'schema'}) {
            $object->setSchema($data->{'schema'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getType()) {
            $data->{'type'} = $object->getType();
        }
        if (null !== $object->getCode()) {
            $data->{'code'} = $object->getCode();
        }
        if (null !== $object->getSource()) {
            $data->{'source'} = $object->getSource();
        }
        if (null !== $object->getTrigger()) {
            $data->{'trigger'} = $object->getTrigger();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getIsProprietary()) {
            $data->{'is_proprietary'} = $object->getIsProprietary();
        }
        if (null !== $object->getEvents()) {
            $values = [];
            foreach ($object->getEvents() as $value) {
                $values[] = $value;
            }
            $data->{'events'} = $values;
        }
        if (null !== $object->getSchema()) {
            $data->{'schema'} = $object->getSchema();
        }

        return $data;
    }
}
