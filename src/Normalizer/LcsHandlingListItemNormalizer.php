<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class LcsHandlingListItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\LcsHandlingListItem' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\LcsHandlingListItem' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\LcsHandlingListItem();
        if (property_exists($data, 'ids') && null !== $data->{'ids'}) {
            $values = [];
            foreach ($data->{'ids'} as $value) {
                $values[] = $value;
            }
            $object->setIds($values);
        }
        if (property_exists($data, 'handled_ids') && null !== $data->{'handled_ids'}) {
            $values_1 = [];
            foreach ($data->{'handled_ids'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setHandledIds($values_1);
        }
        if (property_exists($data, 'shipment_id') && null !== $data->{'shipment_id'}) {
            $object->setShipmentId($data->{'shipment_id'});
        }
        if (property_exists($data, 'sku') && null !== $data->{'sku'}) {
            $object->setSku($data->{'sku'});
        }
        if (property_exists($data, 'description') && null !== $data->{'description'}) {
            $object->setDescription($data->{'description'});
        }
        if (property_exists($data, 'position') && null !== $data->{'position'}) {
            $object->setPosition($data->{'position'});
        }
        if (property_exists($data, 'quantity') && null !== $data->{'quantity'}) {
            $object->setQuantity($data->{'quantity'});
        }
        if (property_exists($data, 'sorting_label') && null !== $data->{'sorting_label'}) {
            $object->setSortingLabel($data->{'sorting_label'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getIds()) {
            $values = [];
            foreach ($object->getIds() as $value) {
                $values[] = $value;
            }
            $data->{'ids'} = $values;
        }
        if (null !== $object->getHandledIds()) {
            $values_1 = [];
            foreach ($object->getHandledIds() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'handled_ids'} = $values_1;
        }
        if (null !== $object->getShipmentId()) {
            $data->{'shipment_id'} = $object->getShipmentId();
        }
        if (null !== $object->getSku()) {
            $data->{'sku'} = $object->getSku();
        }
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getPosition()) {
            $data->{'position'} = $object->getPosition();
        }
        if (null !== $object->getQuantity()) {
            $data->{'quantity'} = $object->getQuantity();
        }
        if (null !== $object->getSortingLabel()) {
            $data->{'sorting_label'} = $object->getSortingLabel();
        }

        return $data;
    }
}
