<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SplHubStatusNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Afosto\\Sdk\\Model\\SplHubStatus';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Afosto\\Sdk\\Model\\SplHubStatus';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\SplHubStatus();
        if (property_exists($data, 'is_online') && $data->{'is_online'} !== null) {
            $object->setIsOnline($data->{'is_online'});
        }
        if (property_exists($data, 'is_idle') && $data->{'is_idle'} !== null) {
            $object->setIsIdle($data->{'is_idle'});
        }
        if (property_exists($data, 'location') && $data->{'location'} !== null) {
            $object->setLocation($data->{'location'});
        }
        if (property_exists($data, 'network') && $data->{'network'} !== null) {
            $object->setNetwork($this->denormalizer->denormalize($data->{'network'}, 'Afosto\\Sdk\\Model\\SplHubNetwork', 'json', $context));
        }
        if (property_exists($data, 'image') && $data->{'image'} !== null) {
            $object->setImage($this->denormalizer->denormalize($data->{'image'}, 'Afosto\\Sdk\\Model\\SplHubImage', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getIsOnline()) {
            $data->{'is_online'} = $object->getIsOnline();
        }
        if (null !== $object->getIsIdle()) {
            $data->{'is_idle'} = $object->getIsIdle();
        }
        if (null !== $object->getLocation()) {
            $data->{'location'} = $object->getLocation();
        }
        if (null !== $object->getNetwork()) {
            $data->{'network'} = $this->normalizer->normalize($object->getNetwork(), 'json', $context);
        }
        if (null !== $object->getImage()) {
            $data->{'image'} = $this->normalizer->normalize($object->getImage(), 'json', $context);
        }

        return $data;
    }
}
