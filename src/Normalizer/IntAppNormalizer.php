<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IntAppNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\IntApp' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\IntApp' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\IntApp();
        if (property_exists($data, 'code') && null !== $data->{'code'}) {
            $object->setCode($data->{'code'});
        }
        if (property_exists($data, 'name') && null !== $data->{'name'}) {
            $object->setName($data->{'name'});
        }
        if (property_exists($data, 'description') && null !== $data->{'description'}) {
            $object->setDescription($data->{'description'});
        }
        if (property_exists($data, 'tags') && null !== $data->{'tags'}) {
            $values = [];
            foreach ($data->{'tags'} as $value) {
                $values[] = $value;
            }
            $object->setTags($values);
        }
        if (property_exists($data, 'author') && null !== $data->{'author'}) {
            $object->setAuthor($this->denormalizer->denormalize($data->{'author'}, 'Afosto\\Sdk\\Model\\IntAuthor', 'json', $context));
        }
        if (property_exists($data, 'is_published') && null !== $data->{'is_published'}) {
            $object->setIsPublished($data->{'is_published'});
        }
        if (property_exists($data, 'is_duplicate_allowed') && null !== $data->{'is_duplicate_allowed'}) {
            $object->setIsDuplicateAllowed($data->{'is_duplicate_allowed'});
        }
        if (property_exists($data, 'authentication') && null !== $data->{'authentication'}) {
            $object->setAuthentication($this->denormalizer->denormalize($data->{'authentication'}, 'Afosto\\Sdk\\Model\\IntAppAuthentication', 'json', $context));
        }
        if (property_exists($data, 'config_schema') && null !== $data->{'config_schema'}) {
            $object->setConfigSchema($data->{'config_schema'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCode()) {
            $data->{'code'} = $object->getCode();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getTags()) {
            $values = [];
            foreach ($object->getTags() as $value) {
                $values[] = $value;
            }
            $data->{'tags'} = $values;
        }
        if (null !== $object->getAuthor()) {
            $data->{'author'} = $this->normalizer->normalize($object->getAuthor(), 'json', $context);
        }
        if (null !== $object->getIsPublished()) {
            $data->{'is_published'} = $object->getIsPublished();
        }
        if (null !== $object->getIsDuplicateAllowed()) {
            $data->{'is_duplicate_allowed'} = $object->getIsDuplicateAllowed();
        }
        if (null !== $object->getAuthentication()) {
            $data->{'authentication'} = $this->normalizer->normalize($object->getAuthentication(), 'json', $context);
        }
        if (null !== $object->getConfigSchema()) {
            $data->{'config_schema'} = $object->getConfigSchema();
        }

        return $data;
    }
}
