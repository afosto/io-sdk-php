<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class WmsMetricNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\WmsMetric' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\WmsMetric' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\WmsMetric();
        if (property_exists($data, 'code') && null !== $data->{'code'}) {
            $object->setCode($data->{'code'});
        }
        if (property_exists($data, 'unit') && null !== $data->{'unit'}) {
            $object->setUnit($data->{'unit'});
        }
        if (property_exists($data, 'processable_as') && null !== $data->{'processable_as'}) {
            $object->setProcessableAs($data->{'processable_as'});
        }
        if (property_exists($data, 'quantity') && null !== $data->{'quantity'}) {
            $object->setQuantity($data->{'quantity'});
        }
        if (property_exists($data, 'tenant_id') && null !== $data->{'tenant_id'}) {
            $object->setTenantId($data->{'tenant_id'});
        }
        if (property_exists($data, 'filter_key') && null !== $data->{'filter_key'}) {
            $object->setFilterKey($data->{'filter_key'});
        }
        if (property_exists($data, 'filter_value') && null !== $data->{'filter_value'}) {
            $object->setFilterValue($data->{'filter_value'});
        }
        if (property_exists($data, 'tracked_at') && null !== $data->{'tracked_at'}) {
            $object->setTrackedAt($data->{'tracked_at'});
        }
        if (property_exists($data, 'window_start') && null !== $data->{'window_start'}) {
            $object->setWindowStart($data->{'window_start'});
        }
        if (property_exists($data, 'window_end') && null !== $data->{'window_end'}) {
            $object->setWindowEnd($data->{'window_end'});
        }
        if (property_exists($data, 'interval') && null !== $data->{'interval'}) {
            $object->setInterval($data->{'interval'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCode()) {
            $data->{'code'} = $object->getCode();
        }
        if (null !== $object->getUnit()) {
            $data->{'unit'} = $object->getUnit();
        }
        if (null !== $object->getProcessableAs()) {
            $data->{'processable_as'} = $object->getProcessableAs();
        }
        if (null !== $object->getQuantity()) {
            $data->{'quantity'} = $object->getQuantity();
        }
        if (null !== $object->getTenantId()) {
            $data->{'tenant_id'} = $object->getTenantId();
        }
        if (null !== $object->getFilterKey()) {
            $data->{'filter_key'} = $object->getFilterKey();
        }
        if (null !== $object->getFilterValue()) {
            $data->{'filter_value'} = $object->getFilterValue();
        }
        if (null !== $object->getTrackedAt()) {
            $data->{'tracked_at'} = $object->getTrackedAt();
        }
        if (null !== $object->getWindowStart()) {
            $data->{'window_start'} = $object->getWindowStart();
        }
        if (null !== $object->getWindowEnd()) {
            $data->{'window_end'} = $object->getWindowEnd();
        }
        if (null !== $object->getInterval()) {
            $data->{'interval'} = $object->getInterval();
        }

        return $data;
    }
}
