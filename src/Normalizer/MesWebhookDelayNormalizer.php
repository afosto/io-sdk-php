<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class MesWebhookDelayNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\MesWebhookDelay' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\MesWebhookDelay' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\MesWebhookDelay();
        if (property_exists($data, 'attempt') && null !== $data->{'attempt'}) {
            $object->setAttempt($data->{'attempt'});
        }
        if (property_exists($data, 'delay') && null !== $data->{'delay'}) {
            $object->setDelay($data->{'delay'});
        }
        if (property_exists($data, 'total_delay') && null !== $data->{'total_delay'}) {
            $object->setTotalDelay($data->{'total_delay'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAttempt()) {
            $data->{'attempt'} = $object->getAttempt();
        }
        if (null !== $object->getDelay()) {
            $data->{'delay'} = $object->getDelay();
        }
        if (null !== $object->getTotalDelay()) {
            $data->{'total_delay'} = $object->getTotalDelay();
        }

        return $data;
    }
}
