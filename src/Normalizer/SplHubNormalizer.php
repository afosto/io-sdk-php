<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SplHubNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\SplHub' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\SplHub' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\SplHub();
        if (property_exists($data, 'id') && null !== $data->{'id'}) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'uuid') && null !== $data->{'uuid'}) {
            $object->setUuid($data->{'uuid'});
        }
        if (property_exists($data, 'name') && null !== $data->{'name'}) {
            $object->setName($data->{'name'});
        }
        if (property_exists($data, 'description') && null !== $data->{'description'}) {
            $object->setDescription($data->{'description'});
        }
        if (property_exists($data, 'properties') && null !== $data->{'properties'}) {
            $values = [];
            foreach ($data->{'properties'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Afosto\\Sdk\\Model\\SplProperty', 'json', $context);
            }
            $object->setProperties($values);
        }
        if (property_exists($data, 'status') && null !== $data->{'status'}) {
            $object->setStatus($data->{'status'});
        }
        if (property_exists($data, 'status_updated_at') && null !== $data->{'status_updated_at'}) {
            $object->setStatusUpdatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'status_updated_at'}));
        }
        if (property_exists($data, 'disabled_at') && null !== $data->{'disabled_at'}) {
            $object->setDisabledAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'disabled_at'}));
        }
        if (property_exists($data, 'pubnub') && null !== $data->{'pubnub'}) {
            $object->setPubnub($this->denormalizer->denormalize($data->{'pubnub'}, 'Afosto\\Sdk\\Model\\SplPubnub', 'json', $context));
        }
        if (property_exists($data, 'integration') && null !== $data->{'integration'}) {
            $object->setIntegration($this->denormalizer->denormalize($data->{'integration'}, 'Afosto\\Sdk\\Model\\SplIntegration', 'json', $context));
        }
        if (property_exists($data, 'os_file_id') && null !== $data->{'os_file_id'}) {
            $object->setOsFileId($data->{'os_file_id'});
        }
        if (property_exists($data, 'created_at') && null !== $data->{'created_at'}) {
            $object->setCreatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'created_at'}));
        }
        if (property_exists($data, 'updated_at') && null !== $data->{'updated_at'}) {
            $object->setUpdatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'updated_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getUuid()) {
            $data->{'uuid'} = $object->getUuid();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getProperties()) {
            $values = [];
            foreach ($object->getProperties() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'properties'} = $values;
        }
        if (null !== $object->getStatus()) {
            $data->{'status'} = $object->getStatus();
        }
        if (null !== $object->getStatusUpdatedAt()) {
            $data->{'status_updated_at'} = $object->getStatusUpdatedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getDisabledAt()) {
            $data->{'disabled_at'} = $object->getDisabledAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getPubnub()) {
            $data->{'pubnub'} = $this->normalizer->normalize($object->getPubnub(), 'json', $context);
        }
        if (null !== $object->getIntegration()) {
            $data->{'integration'} = $this->normalizer->normalize($object->getIntegration(), 'json', $context);
        }
        if (null !== $object->getOsFileId()) {
            $data->{'os_file_id'} = $object->getOsFileId();
        }
        if (null !== $object->getCreatedAt()) {
            $data->{'created_at'} = $object->getCreatedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getUpdatedAt()) {
            $data->{'updated_at'} = $object->getUpdatedAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
