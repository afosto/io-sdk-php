<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class TplBuildNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\TplBuild' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\TplBuild' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\TplBuild();
        if (property_exists($data, 'id') && null !== $data->{'id'}) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'git_reference') && null !== $data->{'git_reference'}) {
            $object->setGitReference($this->denormalizer->denormalize($data->{'git_reference'}, 'Afosto\\Sdk\\Model\\TplGitReference', 'json', $context));
        }
        if (property_exists($data, 'is_success') && null !== $data->{'is_success'}) {
            $object->setIsSuccess($data->{'is_success'});
        }
        if (property_exists($data, 'errors') && null !== $data->{'errors'}) {
            $values = [];
            foreach ($data->{'errors'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Afosto\\Sdk\\Model\\TplBuildError', 'json', $context);
            }
            $object->setErrors($values);
        }
        if (property_exists($data, 'started_at') && null !== $data->{'started_at'}) {
            $object->setStartedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'started_at'}));
        }
        if (property_exists($data, 'ended_at') && null !== $data->{'ended_at'}) {
            $object->setEndedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'ended_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getGitReference()) {
            $data->{'git_reference'} = $this->normalizer->normalize($object->getGitReference(), 'json', $context);
        }
        if (null !== $object->getIsSuccess()) {
            $data->{'is_success'} = $object->getIsSuccess();
        }
        if (null !== $object->getErrors()) {
            $values = [];
            foreach ($object->getErrors() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'errors'} = $values;
        }
        if (null !== $object->getStartedAt()) {
            $data->{'started_at'} = $object->getStartedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getEndedAt()) {
            $data->{'ended_at'} = $object->getEndedAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
