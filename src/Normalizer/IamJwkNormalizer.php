<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IamJwkNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Afosto\\Sdk\\Model\\IamJwk';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Afosto\\Sdk\\Model\\IamJwk';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\IamJwk();
        if (property_exists($data, 'alg') && $data->{'alg'} !== null) {
            $object->setAlg($data->{'alg'});
        }
        if (property_exists($data, 'kty') && $data->{'kty'} !== null) {
            $object->setKty($data->{'kty'});
        }
        if (property_exists($data, 'use') && $data->{'use'} !== null) {
            $object->setUse($data->{'use'});
        }
        if (property_exists($data, 'x5c') && $data->{'x5c'} !== null) {
            $values = [];
            foreach ($data->{'x5c'} as $value) {
                $values[] = $value;
            }
            $object->setX5c($values);
        }
        if (property_exists($data, '') && $data->{''} !== null) {
            $object->set($data->{''});
        }
        if (property_exists($data, 'e') && $data->{'e'} !== null) {
            $object->setE($data->{'e'});
        }
        if (property_exists($data, 'kid') && $data->{'kid'} !== null) {
            $object->setKid($data->{'kid'});
        }
        if (property_exists($data, 'x5t') && $data->{'x5t'} !== null) {
            $object->setX5t($data->{'x5t'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAlg()) {
            $data->{'alg'} = $object->getAlg();
        }
        if (null !== $object->getKty()) {
            $data->{'kty'} = $object->getKty();
        }
        if (null !== $object->getUse()) {
            $data->{'use'} = $object->getUse();
        }
        if (null !== $object->getX5c()) {
            $values = [];
            foreach ($object->getX5c() as $value) {
                $values[] = $value;
            }
            $data->{'x5c'} = $values;
        }
        if (null !== $object->get()) {
            $data->{''} = $object->get();
        }
        if (null !== $object->getE()) {
            $data->{'e'} = $object->getE();
        }
        if (null !== $object->getKid()) {
            $data->{'kid'} = $object->getKid();
        }
        if (null !== $object->getX5t()) {
            $data->{'x5t'} = $object->getX5t();
        }

        return $data;
    }
}
