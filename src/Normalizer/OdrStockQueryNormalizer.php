<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OdrStockQueryNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Afosto\\Sdk\\Model\\OdrStockQuery';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Afosto\\Sdk\\Model\\OdrStockQuery';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\OdrStockQuery();
        if (property_exists($data, 'warehouse_ids') && $data->{'warehouse_ids'} !== null) {
            $values = [];
            foreach ($data->{'warehouse_ids'} as $value) {
                $values[] = $value;
            }
            $object->setWarehouseIds($values);
        }
        if (property_exists($data, 'skus') && $data->{'skus'} !== null) {
            $values_1 = [];
            foreach ($data->{'skus'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setSkus($values_1);
        }
        if (property_exists($data, 'is_available') && $data->{'is_available'} !== null) {
            $object->setIsAvailable($data->{'is_available'});
        }
        if (property_exists($data, 'is_in_transit') && $data->{'is_in_transit'} !== null) {
            $object->setIsInTransit($data->{'is_in_transit'});
        }
        if (property_exists($data, 'is_reserved') && $data->{'is_reserved'} !== null) {
            $object->setIsReserved($data->{'is_reserved'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getWarehouseIds()) {
            $values = [];
            foreach ($object->getWarehouseIds() as $value) {
                $values[] = $value;
            }
            $data->{'warehouse_ids'} = $values;
        }
        if (null !== $object->getSkus()) {
            $values_1 = [];
            foreach ($object->getSkus() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'skus'} = $values_1;
        }
        if (null !== $object->getIsAvailable()) {
            $data->{'is_available'} = $object->getIsAvailable();
        }
        if (null !== $object->getIsInTransit()) {
            $data->{'is_in_transit'} = $object->getIsInTransit();
        }
        if (null !== $object->getIsReserved()) {
            $data->{'is_reserved'} = $object->getIsReserved();
        }

        return $data;
    }
}
