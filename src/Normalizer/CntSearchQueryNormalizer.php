<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CntSearchQueryNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\CntSearchQuery' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\CntSearchQuery' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\CntSearchQuery();
        if (property_exists($data, 'q') && null !== $data->{'q'}) {
            $values = [];
            foreach ($data->{'q'} as $value) {
                $values[] = $value;
            }
            $object->setQ($values);
        }
        if (property_exists($data, 'is_fuzzy') && null !== $data->{'is_fuzzy'}) {
            $object->setIsFuzzy($data->{'is_fuzzy'});
        }
        if (property_exists($data, 'filter') && null !== $data->{'filter'}) {
            $values_1 = [];
            foreach ($data->{'filter'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Afosto\\Sdk\\Model\\CntFilter', 'json', $context);
            }
            $object->setFilter($values_1);
        }
        if (property_exists($data, 'facets') && null !== $data->{'facets'}) {
            $values_2 = [];
            foreach ($data->{'facets'} as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setFacets($values_2);
        }
        if (property_exists($data, 'limit') && null !== $data->{'limit'}) {
            $object->setLimit($data->{'limit'});
        }
        if (property_exists($data, 'threshold') && null !== $data->{'threshold'}) {
            $object->setThreshold($data->{'threshold'});
        }
        if (property_exists($data, 'page_cursor') && null !== $data->{'page_cursor'}) {
            $object->setPageCursor($data->{'page_cursor'});
        }
        if (property_exists($data, 'sort') && null !== $data->{'sort'}) {
            $values_3 = [];
            foreach ($data->{'sort'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Afosto\\Sdk\\Model\\CntSort', 'json', $context);
            }
            $object->setSort($values_3);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getQ()) {
            $values = [];
            foreach ($object->getQ() as $value) {
                $values[] = $value;
            }
            $data->{'q'} = $values;
        }
        if (null !== $object->getIsFuzzy()) {
            $data->{'is_fuzzy'} = $object->getIsFuzzy();
        }
        if (null !== $object->getFilter()) {
            $values_1 = [];
            foreach ($object->getFilter() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'filter'} = $values_1;
        }
        if (null !== $object->getFacets()) {
            $values_2 = [];
            foreach ($object->getFacets() as $value_2) {
                $values_2[] = $value_2;
            }
            $data->{'facets'} = $values_2;
        }
        if (null !== $object->getLimit()) {
            $data->{'limit'} = $object->getLimit();
        }
        if (null !== $object->getThreshold()) {
            $data->{'threshold'} = $object->getThreshold();
        }
        if (null !== $object->getPageCursor()) {
            $data->{'page_cursor'} = $object->getPageCursor();
        }
        if (null !== $object->getSort()) {
            $values_3 = [];
            foreach ($object->getSort() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'sort'} = $values_3;
        }

        return $data;
    }
}
