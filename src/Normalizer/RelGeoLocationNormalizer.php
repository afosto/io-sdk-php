<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class RelGeoLocationNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return 'Afosto\\Sdk\\Model\\RelGeoLocation' === $type;
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && 'Afosto\\Sdk\\Model\\RelGeoLocation' === get_class($data);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Afosto\Sdk\Model\RelGeoLocation();
        if (property_exists($data, 'lat') && null !== $data->{'lat'}) {
            $object->setLat($data->{'lat'});
        }
        if (property_exists($data, 'long') && null !== $data->{'long'}) {
            $object->setLong($data->{'long'});
        }
        if (property_exists($data, 'box') && null !== $data->{'box'}) {
            $object->setBox($this->denormalizer->denormalize($data->{'box'}, 'Afosto\\Sdk\\Model\\RelGeoLocationBox', 'json', $context));
        }
        if (property_exists($data, 'is_precise') && null !== $data->{'is_precise'}) {
            $object->setIsPrecise($data->{'is_precise'});
        }
        if (property_exists($data, 'address') && null !== $data->{'address'}) {
            $object->setAddress($this->denormalizer->denormalize($data->{'address'}, 'Afosto\\Sdk\\Model\\RelGeoLocationAddress', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getLat()) {
            $data->{'lat'} = $object->getLat();
        }
        if (null !== $object->getLong()) {
            $data->{'long'} = $object->getLong();
        }
        if (null !== $object->getBox()) {
            $data->{'box'} = $this->normalizer->normalize($object->getBox(), 'json', $context);
        }
        if (null !== $object->getIsPrecise()) {
            $data->{'is_precise'} = $object->getIsPrecise();
        }
        if (null !== $object->getAddress()) {
            $data->{'address'} = $this->normalizer->normalize($object->getAddress(), 'json', $context);
        }

        return $data;
    }
}
