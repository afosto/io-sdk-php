<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Afosto\Sdk;

class Client extends \Jane\OpenApiRuntime\Client\Psr7HttplugClient
{
    /**
     * Returns a list of conversations.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListConversationsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListConversationsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListConversationsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListConversationsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListConversationsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListConversationsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesConversation[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listConversations(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListConversations($headerParameters), $fetch);
    }

    /**
     * Instantiate a conversation.
     *
     * @param \Afosto\Sdk\Model\MesConversationCreate $body  Conversation object
     * @param string                                  $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\StartConversationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\StartConversationNotFoundException
     * @throws \Afosto\Sdk\Exception\StartConversationBadRequestException
     * @throws \Afosto\Sdk\Exception\StartConversationForbiddenException
     * @throws \Afosto\Sdk\Exception\StartConversationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\StartConversationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesConversation|\Psr\Http\Message\ResponseInterface|null
     */
    public function startConversation(\Afosto\Sdk\Model\MesConversationCreate $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\StartConversation($body), $fetch);
    }

    /**
     * Run a complex search to find conversations.
     *
     * @param \Afosto\Sdk\Model\MesSearch $body             Search query object
     * @param array                       $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SearchConversationsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SearchConversationsNotFoundException
     * @throws \Afosto\Sdk\Exception\SearchConversationsBadRequestException
     * @throws \Afosto\Sdk\Exception\SearchConversationsForbiddenException
     * @throws \Afosto\Sdk\Exception\SearchConversationsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SearchConversationsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesConversation[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function searchConversations(\Afosto\Sdk\Model\MesSearch $body, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SearchConversations($body, $headerParameters), $fetch);
    }

    /**
     * Retrieve a single conversation.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetConversationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetConversationNotFoundException
     * @throws \Afosto\Sdk\Exception\GetConversationBadRequestException
     * @throws \Afosto\Sdk\Exception\GetConversationForbiddenException
     * @throws \Afosto\Sdk\Exception\GetConversationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetConversationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesConversation|\Psr\Http\Message\ResponseInterface|null
     */
    public function getConversation(int $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetConversation($id), $fetch);
    }

    /**
     * Append a message to the conversation.
     *
     * @param \Afosto\Sdk\Model\MesMessageAdd $body  The new message
     * @param string                          $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AddMessageUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AddMessageNotFoundException
     * @throws \Afosto\Sdk\Exception\AddMessageBadRequestException
     * @throws \Afosto\Sdk\Exception\AddMessageForbiddenException
     * @throws \Afosto\Sdk\Exception\AddMessageInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AddMessageServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesConversation|\Psr\Http\Message\ResponseInterface|null
     */
    public function addMessage(int $id, \Afosto\Sdk\Model\MesMessageAdd $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AddMessage($id, $body), $fetch);
    }

    /**
     * Register a new participant in the conversation.
     *
     * @param \Afosto\Sdk\Model\MesParticipantCreate $body  The new message
     * @param string                                 $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AddRegistrationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AddRegistrationNotFoundException
     * @throws \Afosto\Sdk\Exception\AddRegistrationBadRequestException
     * @throws \Afosto\Sdk\Exception\AddRegistrationForbiddenException
     * @throws \Afosto\Sdk\Exception\AddRegistrationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AddRegistrationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesConversation|\Psr\Http\Message\ResponseInterface|null
     */
    public function addRegistration(int $id, \Afosto\Sdk\Model\MesParticipantCreate $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AddRegistration($id, $body), $fetch);
    }

    /**
     * Add a subscription to recieve updates on this conversation.
     *
     * @param \Afosto\Sdk\Model\MesSubscription $body  The subscription data
     * @param string                            $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SubscribeUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SubscribeNotFoundException
     * @throws \Afosto\Sdk\Exception\SubscribeBadRequestException
     * @throws \Afosto\Sdk\Exception\SubscribeForbiddenException
     * @throws \Afosto\Sdk\Exception\SubscribeInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SubscribeServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesConversation|\Psr\Http\Message\ResponseInterface|null
     */
    public function subscribe(int $id, \Afosto\Sdk\Model\MesSubscription $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\Subscribe($id, $body), $fetch);
    }

    /**
     * Remove a subscription to recieve updates on this conversation.
     *
     * @param \Afosto\Sdk\Model\MesCancel $body  The subscription data
     * @param string                      $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UnsubscribeUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UnsubscribeNotFoundException
     * @throws \Afosto\Sdk\Exception\UnsubscribeBadRequestException
     * @throws \Afosto\Sdk\Exception\UnsubscribeForbiddenException
     * @throws \Afosto\Sdk\Exception\UnsubscribeInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UnsubscribeServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesConversation|\Psr\Http\Message\ResponseInterface|null
     */
    public function unsubscribe(int $id, \Afosto\Sdk\Model\MesCancel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\Unsubscribe($id, $body), $fetch);
    }

    /**
     * Returns a list of orders.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListOrdersUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListOrdersNotFoundException
     * @throws \Afosto\Sdk\Exception\ListOrdersBadRequestException
     * @throws \Afosto\Sdk\Exception\ListOrdersForbiddenException
     * @throws \Afosto\Sdk\Exception\ListOrdersInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListOrdersServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrOrder[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listOrders(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListOrders($headerParameters), $fetch);
    }

    /**
     * Creates and returns the new order.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-idempotency-key
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateStackUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateStackNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateStackBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateStackForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateStackInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateStackServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrOrder|\Psr\Http\Message\ResponseInterface|null
     */
    public function createStack(\Afosto\Sdk\Model\OdrOrderModel $body, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateStack($body, $headerParameters), $fetch);
    }

    /**
     * Removes an order.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteOrderUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteOrderNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteOrderBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteOrderForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteOrderInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteOrderServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrStack|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteOrder(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteOrder($id), $fetch);
    }

    /**
     * Returns an order.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetOrderUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetOrderNotFoundException
     * @throws \Afosto\Sdk\Exception\GetOrderBadRequestException
     * @throws \Afosto\Sdk\Exception\GetOrderForbiddenException
     * @throws \Afosto\Sdk\Exception\GetOrderInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetOrderServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrOrder|\Psr\Http\Message\ResponseInterface|null
     */
    public function getOrder(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetOrder($id), $fetch);
    }

    /**
     * Updates order settings.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateOrderSettingsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateOrderSettingsNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateOrderSettingsBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateOrderSettingsForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateOrderSettingsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateOrderSettingsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrOrder|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateOrderSettings(string $id, \Afosto\Sdk\Model\OdrOrderModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateOrderSettings($id, $body), $fetch);
    }

    /**
     * Returns affiliated orders.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetOrderReferencesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetOrderReferencesNotFoundException
     * @throws \Afosto\Sdk\Exception\GetOrderReferencesBadRequestException
     * @throws \Afosto\Sdk\Exception\GetOrderReferencesForbiddenException
     * @throws \Afosto\Sdk\Exception\GetOrderReferencesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetOrderReferencesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrOrder[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getOrderReferences(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetOrderReferences($id), $fetch);
    }

    /**
     * Returns all affiliated line sets that orginate from the order. For example inventory allocation, shipment or parcel data.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetOrderStacksUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetOrderStacksNotFoundException
     * @throws \Afosto\Sdk\Exception\GetOrderStacksBadRequestException
     * @throws \Afosto\Sdk\Exception\GetOrderStacksForbiddenException
     * @throws \Afosto\Sdk\Exception\GetOrderStacksInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetOrderStacksServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrStack[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getOrderStacks(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetOrderStacks($id), $fetch);
    }

    /**
     * Creates and returns the new stack.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-idempotency-key
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\TransitionStackUnauthorizedException
     * @throws \Afosto\Sdk\Exception\TransitionStackNotFoundException
     * @throws \Afosto\Sdk\Exception\TransitionStackBadRequestException
     * @throws \Afosto\Sdk\Exception\TransitionStackForbiddenException
     * @throws \Afosto\Sdk\Exception\TransitionStackInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\TransitionStackServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrStack|\Psr\Http\Message\ResponseInterface|null
     */
    public function transitionStack(string $id, \Afosto\Sdk\Model\OdrReferenceModel $body, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\TransitionStack($id, $body, $headerParameters), $fetch);
    }

    /**
     * Returns an order's projection.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetOrderProjectionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetOrderProjectionNotFoundException
     * @throws \Afosto\Sdk\Exception\GetOrderProjectionBadRequestException
     * @throws \Afosto\Sdk\Exception\GetOrderProjectionForbiddenException
     * @throws \Afosto\Sdk\Exception\GetOrderProjectionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetOrderProjectionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrProjection|\Psr\Http\Message\ResponseInterface|null
     */
    public function getOrderProjection(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetOrderProjection($id), $fetch);
    }

    /**
     * Returns the newest, non expired, calculation for the order.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetOrderCalculationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetOrderCalculationNotFoundException
     * @throws \Afosto\Sdk\Exception\GetOrderCalculationBadRequestException
     * @throws \Afosto\Sdk\Exception\GetOrderCalculationForbiddenException
     * @throws \Afosto\Sdk\Exception\GetOrderCalculationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetOrderCalculationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrCalculations|\Psr\Http\Message\ResponseInterface|null
     */
    public function getOrderCalculation(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetOrderCalculation($id), $fetch);
    }

    /**
     * Request calculation for the order.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-idempotency-key
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateCalculationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateCalculationNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateCalculationBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateCalculationForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateCalculationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateCalculationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrCalculations|\Psr\Http\Message\ResponseInterface|null
     */
    public function createCalculation(string $id, \Afosto\Sdk\Model\OdrOrderCalculationRequest $body, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateCalculation($id, $body, $headerParameters), $fetch);
    }

    /**
     * Request authorization for the order. Upon authorization (directly or after payment), the order will be processed automatically.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-idempotency-key
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AuthorizeOrderUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AuthorizeOrderNotFoundException
     * @throws \Afosto\Sdk\Exception\AuthorizeOrderBadRequestException
     * @throws \Afosto\Sdk\Exception\AuthorizeOrderForbiddenException
     * @throws \Afosto\Sdk\Exception\AuthorizeOrderInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AuthorizeOrderServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrOrderAuthorizationResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function authorizeOrder(string $id, \Afosto\Sdk\Model\OdrOrdersIdAuthorizePostBody $body, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AuthorizeOrder($id, $body, $headerParameters), $fetch);
    }

    /**
     * Update the order state.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AcceptOrderUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AcceptOrderNotFoundException
     * @throws \Afosto\Sdk\Exception\AcceptOrderBadRequestException
     * @throws \Afosto\Sdk\Exception\AcceptOrderForbiddenException
     * @throws \Afosto\Sdk\Exception\AcceptOrderInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AcceptOrderServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function acceptOrder(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AcceptOrder($id), $fetch);
    }

    /**
     * Update the order state.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ConfirmOrderUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ConfirmOrderNotFoundException
     * @throws \Afosto\Sdk\Exception\ConfirmOrderBadRequestException
     * @throws \Afosto\Sdk\Exception\ConfirmOrderForbiddenException
     * @throws \Afosto\Sdk\Exception\ConfirmOrderInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ConfirmOrderServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function confirmOrder(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ConfirmOrder($id), $fetch);
    }

    /**
     * Update the order state.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateStateUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateStateNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateStateBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateStateForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateStateInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateStateServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function updateState(string $id, \Afosto\Sdk\Model\OdrOrdersIdFlowPutBody $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateState($id, $body), $fetch);
    }

    /**
     * Delete items by ID.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteItemsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteItemsNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteItemsBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteItemsForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteItemsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteItemsServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function deleteItems(string $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteItems($id, $body), $fetch);
    }

    /**
     * Returns a list of items.
     *
     * @param array $queryParameters {
     *
     *     @var string $stack_id
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListItemsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListItemsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListItemsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListItemsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListItemsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListItemsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrGroup[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listItems(string $id, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListItems($id, $queryParameters, $headerParameters), $fetch);
    }

    /**
     * Adds items to the stack that was previously created.
     *
     * @param \Afosto\Sdk\Model\OdrOrderItemModel[] $body
     * @param array                                 $headerParameters {
     *
     *     @var string $x-idempotency-key
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AddItemsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AddItemsNotFoundException
     * @throws \Afosto\Sdk\Exception\AddItemsBadRequestException
     * @throws \Afosto\Sdk\Exception\AddItemsForbiddenException
     * @throws \Afosto\Sdk\Exception\AddItemsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AddItemsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSimpleOrderItem|\Psr\Http\Message\ResponseInterface|null
     */
    public function addItems(string $id, array $body, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AddItems($id, $body, $headerParameters), $fetch);
    }

    /**
     * Returns a list items.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SearchGroupsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SearchGroupsNotFoundException
     * @throws \Afosto\Sdk\Exception\SearchGroupsBadRequestException
     * @throws \Afosto\Sdk\Exception\SearchGroupsForbiddenException
     * @throws \Afosto\Sdk\Exception\SearchGroupsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SearchGroupsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrGroup[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function searchGroups(\Afosto\Sdk\Model\OdrSearch $body, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SearchGroups($body, $headerParameters), $fetch);
    }

    /**
     * Provide the service with a set of valid skus.
     *
     * @param \Afosto\Sdk\Model\OdrSku[] $body
     * @param string                     $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AnnounceSkusUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AnnounceSkusNotFoundException
     * @throws \Afosto\Sdk\Exception\AnnounceSkusBadRequestException
     * @throws \Afosto\Sdk\Exception\AnnounceSkusForbiddenException
     * @throws \Afosto\Sdk\Exception\AnnounceSkusInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AnnounceSkusServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSkuResult|\Psr\Http\Message\ResponseInterface|null
     */
    public function announceSkus(array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AnnounceSkus($body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetFilterSetsBadRequestException
     * @throws \Afosto\Sdk\Exception\GetFilterSetsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetFilterSetsForbiddenException
     * @throws \Afosto\Sdk\Exception\GetFilterSetsNotFoundException
     * @throws \Afosto\Sdk\Exception\GetFilterSetsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetFilterSetsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrFilterSet[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getFilterSets(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetFilterSets(), $fetch);
    }

    /**
     * Create or update filters for products.
     *
     * @param \Afosto\Sdk\Model\OdrFilterSet[] $body
     * @param string                           $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AttachFiltersUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AttachFiltersNotFoundException
     * @throws \Afosto\Sdk\Exception\AttachFiltersBadRequestException
     * @throws \Afosto\Sdk\Exception\AttachFiltersForbiddenException
     * @throws \Afosto\Sdk\Exception\AttachFiltersInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AttachFiltersServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrFiltersPutResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function attachFilters(array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AttachFilters($body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetFilterKeysBadRequestException
     * @throws \Afosto\Sdk\Exception\GetFilterKeysUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetFilterKeysForbiddenException
     * @throws \Afosto\Sdk\Exception\GetFilterKeysNotFoundException
     * @throws \Afosto\Sdk\Exception\GetFilterKeysInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetFilterKeysServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function getFilterKeys(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetFilterKeys(), $fetch);
    }

    /**
     * Returns distinct filter values.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetFilterValuesBadRequestException
     * @throws \Afosto\Sdk\Exception\GetFilterValuesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetFilterValuesForbiddenException
     * @throws \Afosto\Sdk\Exception\GetFilterValuesNotFoundException
     * @throws \Afosto\Sdk\Exception\GetFilterValuesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetFilterValuesServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function getFilterValues(string $key, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetFilterValues($key), $fetch);
    }

    /**
     * Returns a list of domains.
     *
     * @param array $queryParameters {
     *
     *     @var int $is_verified
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListDomainsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListDomainsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListDomainsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListDomainsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListDomainsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListDomainsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesDomain[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listDomains(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListDomains($queryParameters), $fetch);
    }

    /**
     * Adds a domain to the list.
     *
     * @param \Afosto\Sdk\Model\MesDomainModel $body  Domain object
     * @param string                           $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateDomainUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateDomainNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateDomainBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateDomainForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateDomainInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateDomainServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesDomain|\Psr\Http\Message\ResponseInterface|null
     */
    public function createDomain(\Afosto\Sdk\Model\MesDomainModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateDomain($body), $fetch);
    }

    /**
     * Deletes a domain.
     *
     * @param string $id    Id that belongs to the domain
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteDomainUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteDomainNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteDomainBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteDomainForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteDomainInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteDomainServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesDomain|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteDomain(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteDomain($id), $fetch);
    }

    /**
     * Returns a single domain.
     *
     * @param string $id    Id that belongs to the domain
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetDomainUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetDomainNotFoundException
     * @throws \Afosto\Sdk\Exception\GetDomainBadRequestException
     * @throws \Afosto\Sdk\Exception\GetDomainForbiddenException
     * @throws \Afosto\Sdk\Exception\GetDomainInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetDomainServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesDomain|\Psr\Http\Message\ResponseInterface|null
     */
    public function getDomain(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetDomain($id), $fetch);
    }

    /**
     * Returns a list of inboxes.
     *
     * @param array $queryParameters {
     *
     *     @var string $fqdn
     *     @var string $public
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListInboxesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListInboxesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListInboxesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListInboxesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListInboxesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListInboxesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesInbox[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listInboxes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListInboxes($queryParameters), $fetch);
    }

    /**
     * Adds a inbox to the list.
     *
     * @param \Afosto\Sdk\Model\MesInboxModel $body  Inbox object
     * @param string                          $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateInboxUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateInboxNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateInboxBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateInboxForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateInboxInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateInboxServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesInbox|\Psr\Http\Message\ResponseInterface|null
     */
    public function createInbox(\Afosto\Sdk\Model\MesInboxModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateInbox($body), $fetch);
    }

    /**
     * Deletes an inbox.
     *
     * @param string $id    Id that belongs to the inbox
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteInboxUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteInboxNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteInboxBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteInboxForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteInboxInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteInboxServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesInbox|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteInbox(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteInbox($id), $fetch);
    }

    /**
     * Returns a single inbox.
     *
     * @param string $id    Id that belongs to the inbox
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetInboxUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetInboxNotFoundException
     * @throws \Afosto\Sdk\Exception\GetInboxBadRequestException
     * @throws \Afosto\Sdk\Exception\GetInboxForbiddenException
     * @throws \Afosto\Sdk\Exception\GetInboxInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetInboxServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesInbox|\Psr\Http\Message\ResponseInterface|null
     */
    public function getInbox(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetInbox($id), $fetch);
    }

    /**
     * Update an existing inbox.
     *
     * @param string                                $id    Id that belongs to the inbox
     * @param \Afosto\Sdk\Model\MesInboxUpdateModel $body  Inbox object
     * @param string                                $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateInboxUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateInboxNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateInboxBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateInboxForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateInboxInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateInboxServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesInbox|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateInbox(string $id, \Afosto\Sdk\Model\MesInboxUpdateModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateInbox($id, $body), $fetch);
    }

    /**
     * Returns a list of emails.
     *
     * @param array $queryParameters {
     *
     *     @var string $inbox
     *     @var string $folder
     *     @var string $addressee
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListEmailsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListEmailsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListEmailsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListEmailsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListEmailsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListEmailsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesMail[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listEmails(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListEmails($queryParameters, $headerParameters), $fetch);
    }

    /**
     * Adds a email.
     *
     * @param \Afosto\Sdk\Model\MesMailModel $body  Mail object
     * @param string                         $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateMailUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateMailNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateMailBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateMailForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateMailInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateMailServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesMail|\Psr\Http\Message\ResponseInterface|null
     */
    public function createMail(\Afosto\Sdk\Model\MesMailModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateMail($body), $fetch);
    }

    /**
     * Update an existing email.
     *
     * @param string $id    Id that belongs to the email
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteMailUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteMailNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteMailBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteMailForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteMailInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteMailServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesMail|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteMail(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteMail($id), $fetch);
    }

    /**
     * Mark as read and return email.
     *
     * @param string $id              Id that belongs to the email
     * @param array  $queryParameters {
     *
     *     @var string $mark_as Mark the email
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\MarkAsReadUnauthorizedException
     * @throws \Afosto\Sdk\Exception\MarkAsReadNotFoundException
     * @throws \Afosto\Sdk\Exception\MarkAsReadBadRequestException
     * @throws \Afosto\Sdk\Exception\MarkAsReadForbiddenException
     * @throws \Afosto\Sdk\Exception\MarkAsReadInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\MarkAsReadServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesMail|\Psr\Http\Message\ResponseInterface|null
     */
    public function markAsRead(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\MarkAsRead($id, $queryParameters), $fetch);
    }

    /**
     * Update an existing email.
     *
     * @param string                         $id    Id that belongs to the email
     * @param \Afosto\Sdk\Model\MesMailModel $body  Mail object
     * @param string                         $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateEmailUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateEmailNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateEmailBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateEmailForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateEmailInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateEmailServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesMail|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateEmail(string $id, \Afosto\Sdk\Model\MesMailModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateEmail($id, $body), $fetch);
    }

    /**
     * Returns a cost projection.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateProjectionBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateProjectionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateProjectionForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateProjectionNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateProjectionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateProjectionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrProjection|\Psr\Http\Message\ResponseInterface|null
     */
    public function createProjection(\Afosto\Sdk\Model\OdrProjectionModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateProjection($body), $fetch);
    }

    /**
     * Returns a calculation.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetCalculationBadRequestException
     * @throws \Afosto\Sdk\Exception\GetCalculationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetCalculationForbiddenException
     * @throws \Afosto\Sdk\Exception\GetCalculationNotFoundException
     * @throws \Afosto\Sdk\Exception\GetCalculationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetCalculationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrCalculation|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCalculation(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetCalculation($id), $fetch);
    }

    /**
     * Creates the invoice.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateInvoiceForCalculationBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateInvoiceForCalculationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateInvoiceForCalculationForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateInvoiceForCalculationNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateInvoiceForCalculationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateInvoiceForCalculationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrInvoice[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function createInvoiceForCalculation(string $id, \Afosto\Sdk\Model\OdrCalculatedInvoiceRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateInvoiceForCalculation($id, $body), $fetch);
    }

    /**
     * Returns a list of invoices.
     *
     * @param array $queryParameters {
     *
     *     @var string $order_id
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListInvoicesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListInvoicesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListInvoicesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListInvoicesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListInvoicesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListInvoicesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrInvoiceListItem[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listInvoices(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListInvoices($queryParameters), $fetch);
    }

    /**
     * Create a new invoice.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateInvoiceBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateInvoiceUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateInvoiceForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateInvoiceNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateInvoiceInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateInvoiceServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrInvoice|\Psr\Http\Message\ResponseInterface|null
     */
    public function createInvoice(\Afosto\Sdk\Model\OdrInvoiceRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateInvoice($body), $fetch);
    }

    /**
     * Returns a single invoice by id.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ViewInvoiceBadRequestException
     * @throws \Afosto\Sdk\Exception\ViewInvoiceUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ViewInvoiceForbiddenException
     * @throws \Afosto\Sdk\Exception\ViewInvoiceNotFoundException
     * @throws \Afosto\Sdk\Exception\ViewInvoiceInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ViewInvoiceServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrInvoice|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewInvoice(string $id, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ViewInvoice($id, $headerParameters), $fetch);
    }

    /**
     * Mark invoice as paid.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\MarkPaidBadRequestException
     * @throws \Afosto\Sdk\Exception\MarkPaidUnauthorizedException
     * @throws \Afosto\Sdk\Exception\MarkPaidForbiddenException
     * @throws \Afosto\Sdk\Exception\MarkPaidNotFoundException
     * @throws \Afosto\Sdk\Exception\MarkPaidInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\MarkPaidServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrInvoiceListItem|\Psr\Http\Message\ResponseInterface|null
     */
    public function markPaid(string $id, \Afosto\Sdk\Model\OdrInvoiceState $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\MarkPaid($id, $body), $fetch);
    }

    /**
     * Get a listing of available pricing rules.
     *
     * @param array $headerParameters {
     *
     *     @var int $x-page
     *     @var int $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetPricingRulesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetPricingRulesNotFoundException
     * @throws \Afosto\Sdk\Exception\GetPricingRulesBadRequestException
     * @throws \Afosto\Sdk\Exception\GetPricingRulesForbiddenException
     * @throws \Afosto\Sdk\Exception\GetPricingRulesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetPricingRulesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrPricingRule[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPricingRules(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetPricingRules($headerParameters), $fetch);
    }

    /**
     * Add a new pricing rule to the set.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreatePricingRuleBadRequestException
     * @throws \Afosto\Sdk\Exception\CreatePricingRuleUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreatePricingRuleForbiddenException
     * @throws \Afosto\Sdk\Exception\CreatePricingRuleNotFoundException
     * @throws \Afosto\Sdk\Exception\CreatePricingRuleInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreatePricingRuleServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrPricingRule|\Psr\Http\Message\ResponseInterface|null
     */
    public function createPricingRule(\Afosto\Sdk\Model\OdrPricingRuleModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreatePricingRule($body), $fetch);
    }

    /**
     * Get a pricing rule.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetPricingRuleUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetPricingRuleNotFoundException
     * @throws \Afosto\Sdk\Exception\GetPricingRuleBadRequestException
     * @throws \Afosto\Sdk\Exception\GetPricingRuleForbiddenException
     * @throws \Afosto\Sdk\Exception\GetPricingRuleInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetPricingRuleServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrPricingRule|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPricingRule(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetPricingRule($id), $fetch);
    }

    /**
     * Update an existing pricing rule.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdatePricingRuleBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdatePricingRuleUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdatePricingRuleForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdatePricingRuleNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdatePricingRuleInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdatePricingRuleServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrPricingRule|\Psr\Http\Message\ResponseInterface|null
     */
    public function updatePricingRule(string $id, \Afosto\Sdk\Model\OdrPricingRuleModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdatePricingRule($id, $body), $fetch);
    }

    /**
     * Test to see if rules would be applied.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\EvaluateRulesBadRequestException
     * @throws \Afosto\Sdk\Exception\EvaluateRulesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\EvaluateRulesForbiddenException
     * @throws \Afosto\Sdk\Exception\EvaluateRulesNotFoundException
     * @throws \Afosto\Sdk\Exception\EvaluateRulesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\EvaluateRulesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrPricingRule[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function evaluateRules(\Afosto\Sdk\Model\OdrPriceRuleEvaluation $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\EvaluateRules($body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetConstraintOptionsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetConstraintOptionsNotFoundException
     * @throws \Afosto\Sdk\Exception\GetConstraintOptionsBadRequestException
     * @throws \Afosto\Sdk\Exception\GetConstraintOptionsForbiddenException
     * @throws \Afosto\Sdk\Exception\GetConstraintOptionsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetConstraintOptionsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrOptionsRulesConstraintsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getConstraintOptions(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetConstraintOptions(), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListActionsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListActionsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListActionsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListActionsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListActionsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListActionsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntAction[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listActions(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListActions(), $fetch);
    }

    /**
     * Get a single action.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetActionBadRequestException
     * @throws \Afosto\Sdk\Exception\GetActionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetActionForbiddenException
     * @throws \Afosto\Sdk\Exception\GetActionNotFoundException
     * @throws \Afosto\Sdk\Exception\GetActionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetActionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntAction|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAction(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetAction($id), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetBatchesBadRequestException
     * @throws \Afosto\Sdk\Exception\GetBatchesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetBatchesForbiddenException
     * @throws \Afosto\Sdk\Exception\GetBatchesNotFoundException
     * @throws \Afosto\Sdk\Exception\GetBatchesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetBatchesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntBatch[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getBatches(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetBatches(), $fetch);
    }

    /**
     * Create a new batch.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateBatchBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateBatchUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateBatchForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateBatchNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateBatchInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateBatchServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntBatch|\Psr\Http\Message\ResponseInterface|null
     */
    public function createBatch(\Afosto\Sdk\Model\CntBatchRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateBatch($body), $fetch);
    }

    /**
     * Delete an unconfirmed batch.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteBatchBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteBatchUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteBatchForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteBatchNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteBatchInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteBatchServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntBatch[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteBatch(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteBatch($id), $fetch);
    }

    /**
     * Get a single batch.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetBatchBadRequestException
     * @throws \Afosto\Sdk\Exception\GetBatchUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetBatchForbiddenException
     * @throws \Afosto\Sdk\Exception\GetBatchNotFoundException
     * @throws \Afosto\Sdk\Exception\GetBatchInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetBatchServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntBatch[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getBatch(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetBatch($id), $fetch);
    }

    /**
     * Update a batch config or reference.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateBatchBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateBatchUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateBatchForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateBatchNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateBatchInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateBatchServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntBatch[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateBatch(string $id, \Afosto\Sdk\Model\CntBatchRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateBatch($id, $body), $fetch);
    }

    /**
     * Request validation for the batch and the dataset. The dataaset and the batch will be locked. When invalid, lock will be lifted. If batch is valid, is_accepted will become true.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ValidateBatchBadRequestException
     * @throws \Afosto\Sdk\Exception\ValidateBatchUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ValidateBatchForbiddenException
     * @throws \Afosto\Sdk\Exception\ValidateBatchNotFoundException
     * @throws \Afosto\Sdk\Exception\ValidateBatchInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ValidateBatchServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function validateBatch(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ValidateBatch($id), $fetch);
    }

    /**
     * Confirm a batch for processing; processing will start. Only possible when batch is accepted.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ConfirmBatchBadRequestException
     * @throws \Afosto\Sdk\Exception\ConfirmBatchUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ConfirmBatchForbiddenException
     * @throws \Afosto\Sdk\Exception\ConfirmBatchNotFoundException
     * @throws \Afosto\Sdk\Exception\ConfirmBatchInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ConfirmBatchServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function confirmBatch(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ConfirmBatch($id), $fetch);
    }

    /**
     * Get a list of errors for a batch.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var string $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetBatchErrorsBadRequestException
     * @throws \Afosto\Sdk\Exception\GetBatchErrorsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetBatchErrorsForbiddenException
     * @throws \Afosto\Sdk\Exception\GetBatchErrorsNotFoundException
     * @throws \Afosto\Sdk\Exception\GetBatchErrorsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetBatchErrorsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntLineError[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getBatchErrors(string $id, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetBatchErrors($id, $headerParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListDatasetsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListDatasetsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListDatasetsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListDatasetsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListDatasetsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListDatasetsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntDataset[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listDatasets(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListDatasets(), $fetch);
    }

    /**
     * Add a new dataset container.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateDatasetBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateDatasetUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateDatasetForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateDatasetNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateDatasetInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateDatasetServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntDataset|\Psr\Http\Message\ResponseInterface|null
     */
    public function createDataset(\Afosto\Sdk\Model\CntDatasetRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateDataset($body), $fetch);
    }

    /**
     * Get a set of rows.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetDatasetBadRequestException
     * @throws \Afosto\Sdk\Exception\GetDatasetUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetDatasetForbiddenException
     * @throws \Afosto\Sdk\Exception\GetDatasetNotFoundException
     * @throws \Afosto\Sdk\Exception\GetDatasetInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetDatasetServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntDataset|\Psr\Http\Message\ResponseInterface|null
     */
    public function getDataset(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetDataset($id), $fetch);
    }

    /**
     * Select a file and read it to be used as input.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AttachFileBadRequestException
     * @throws \Afosto\Sdk\Exception\AttachFileUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AttachFileForbiddenException
     * @throws \Afosto\Sdk\Exception\AttachFileNotFoundException
     * @throws \Afosto\Sdk\Exception\AttachFileInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AttachFileServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function attachFile(string $id, \Afosto\Sdk\Model\CntBatchFile $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AttachFile($id, $body), $fetch);
    }

    /**
     * Upload data as lines to the dataset.
     *
     * @param \Afosto\Sdk\Model\CntLine[] $body
     * @param string                      $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AttachDataBadRequestException
     * @throws \Afosto\Sdk\Exception\AttachDataUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AttachDataForbiddenException
     * @throws \Afosto\Sdk\Exception\AttachDataNotFoundException
     * @throws \Afosto\Sdk\Exception\AttachDataInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AttachDataServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function attachData(string $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AttachData($id, $body), $fetch);
    }

    /**
     * Request data to be exported to CSV.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ExportDataBadRequestException
     * @throws \Afosto\Sdk\Exception\ExportDataUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ExportDataForbiddenException
     * @throws \Afosto\Sdk\Exception\ExportDataNotFoundException
     * @throws \Afosto\Sdk\Exception\ExportDataInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ExportDataServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function exportData(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ExportData($id), $fetch);
    }

    /**
     * Browse all dataset lines.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetLinesBadRequestException
     * @throws \Afosto\Sdk\Exception\GetLinesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetLinesForbiddenException
     * @throws \Afosto\Sdk\Exception\GetLinesNotFoundException
     * @throws \Afosto\Sdk\Exception\GetLinesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetLinesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntLine[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getLines(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetLines($id), $fetch);
    }

    /**
     * Return DPD's servicepoints.
     *
     * @param array $queryParameters {
     *
     *     @var string $country_code
     *     @var string $postal_code
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetTypesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetTypesNotFoundException
     * @throws \Afosto\Sdk\Exception\GetTypesBadRequestException
     * @throws \Afosto\Sdk\Exception\GetTypesForbiddenException
     * @throws \Afosto\Sdk\Exception\GetTypesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetTypesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsDPDServicePointResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTypes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetTypes($queryParameters), $fetch);
    }

    /**
     * Delete the secret and disable 2FA.
     *
     * @param string $type  Type that needs to be deleted
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteSecretBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteSecretUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteSecretNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteSecretForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteSecretInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteSecretServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamSecretRead|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteSecret(string $type, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteSecret($type), $fetch);
    }

    /**
     * Get the secret for the type for the current user.
     *
     * @param string $type  Type that we look for
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSecretUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSecretNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSecretBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSecretForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSecretInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSecretServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamSecretRead|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSecret(string $type, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSecret($type), $fetch);
    }

    /**
     * Create a new secret for 2FA.
     *
     * @param string                             $type  Type that we look for
     * @param \Afosto\Sdk\Model\IamSecretRequest $body  Secret request
     * @param string                             $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateSecretBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateSecretUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateSecretNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateSecretForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateSecretInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateSecretServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamSecret|\Psr\Http\Message\ResponseInterface|null
     */
    public function createSecret(string $type, \Afosto\Sdk\Model\IamSecretRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateSecret($type, $body), $fetch);
    }

    /**
     * Update an existing secret for 2FA.
     *
     * @param string                            $type  Type that we look for
     * @param \Afosto\Sdk\Model\IamSecretUpdate $body  Secret request
     * @param string                            $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateSecretBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateSecretUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateSecretNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateSecretForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateSecretInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateSecretServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamSecretRead|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateSecret(string $type, \Afosto\Sdk\Model\IamSecretUpdate $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateSecret($type, $body), $fetch);
    }

    /**
     * Verify if one time password was created with known secret.
     *
     * @param string                                 $type  Type that we look for
     * @param \Afosto\Sdk\Model\IamValidationRequest $body  Validation request object
     * @param string                                 $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\VerifyTokenBadRequestException
     * @throws \Afosto\Sdk\Exception\VerifyTokenUnauthorizedException
     * @throws \Afosto\Sdk\Exception\VerifyTokenNotFoundException
     * @throws \Afosto\Sdk\Exception\VerifyTokenForbiddenException
     * @throws \Afosto\Sdk\Exception\VerifyTokenInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\VerifyTokenServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamValidationResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function verifyToken(string $type, \Afosto\Sdk\Model\IamValidationRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\VerifyToken($type, $body), $fetch);
    }

    /**
     * Request a otp over the given channel.
     *
     * @param string $type    Type that we look for
     * @param string $channel Channel of choice
     * @param string $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\RequestBackupBadRequestException
     * @throws \Afosto\Sdk\Exception\RequestBackupUnauthorizedException
     * @throws \Afosto\Sdk\Exception\RequestBackupNotFoundException
     * @throws \Afosto\Sdk\Exception\RequestBackupForbiddenException
     * @throws \Afosto\Sdk\Exception\RequestBackupInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\RequestBackupServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamBackupResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function requestBackup(string $type, string $channel, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\RequestBackup($type, $channel), $fetch);
    }

    /**
     * Returns a list of active printers.
     *
     * @param array $queryParameters {
     *
     *     @var string $hub_id ID of hub to filter for
     *     @var string $inbox_id ID of inbox to filter for
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListPrintersUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListPrintersBadRequestException
     * @throws \Afosto\Sdk\Exception\ListPrintersForbiddenException
     * @throws \Afosto\Sdk\Exception\ListPrintersNotFoundException
     * @throws \Afosto\Sdk\Exception\ListPrintersInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListPrintersServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplPrinter[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listPrinters(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListPrinters($queryParameters), $fetch);
    }

    /**
     * Add a new printer.
     *
     * @param \Afosto\Sdk\Model\SplPrinterModel $body  The new printer
     * @param string                            $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreatePrinterUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreatePrinterBadRequestException
     * @throws \Afosto\Sdk\Exception\CreatePrinterNotFoundException
     * @throws \Afosto\Sdk\Exception\CreatePrinterForbiddenException
     * @throws \Afosto\Sdk\Exception\CreatePrinterInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreatePrinterServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplPrinter|\Psr\Http\Message\ResponseInterface|null
     */
    public function createPrinter(\Afosto\Sdk\Model\SplPrinterModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreatePrinter($body), $fetch);
    }

    /**
     * Disables a printer.
     *
     * @param string $id    ID of printer to delete
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeletePrinterBadRequestException
     * @throws \Afosto\Sdk\Exception\DeletePrinterUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeletePrinterNotFoundException
     * @throws \Afosto\Sdk\Exception\DeletePrinterForbiddenException
     * @throws \Afosto\Sdk\Exception\DeletePrinterInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeletePrinterServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplPrinter|\Psr\Http\Message\ResponseInterface|null
     */
    public function deletePrinter(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeletePrinter($id), $fetch);
    }

    /**
     * Returns a single printer.
     *
     * @param string $id    ID of printer to return
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetPrinterUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetPrinterNotFoundException
     * @throws \Afosto\Sdk\Exception\GetPrinterBadRequestException
     * @throws \Afosto\Sdk\Exception\GetPrinterForbiddenException
     * @throws \Afosto\Sdk\Exception\GetPrinterInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetPrinterServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplPrinter|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPrinter(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetPrinter($id), $fetch);
    }

    /**
     * Update a printer to a new configuration.
     *
     * @param string                            $id    ID of printer to update
     * @param \Afosto\Sdk\Model\SplPrinterModel $body  The new printer configuration
     * @param string                            $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdatePrinterBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdatePrinterUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdatePrinterNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdatePrinterForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdatePrinterInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdatePrinterServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplPrinter|\Psr\Http\Message\ResponseInterface|null
     */
    public function updatePrinter(string $id, \Afosto\Sdk\Model\SplPrinterModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdatePrinter($id, $body), $fetch);
    }

    /**
     * Update a printer to a new configuration.
     *
     * @param string                     $id    ID of printer to attach the inbox to
     * @param \Afosto\Sdk\Model\SplInbox $body  The new printer configuration
     * @param string                     $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AttachInboxBadRequestException
     * @throws \Afosto\Sdk\Exception\AttachInboxUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AttachInboxNotFoundException
     * @throws \Afosto\Sdk\Exception\AttachInboxForbiddenException
     * @throws \Afosto\Sdk\Exception\AttachInboxInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AttachInboxServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplPrinter|\Psr\Http\Message\ResponseInterface|null
     */
    public function attachInbox(string $id, \Afosto\Sdk\Model\SplInbox $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AttachInbox($id, $body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListProxiesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListProxiesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListProxiesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListProxiesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListProxiesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListProxiesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntProxy[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listProxies(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListProxies(), $fetch);
    }

    /**
     * Add a new proxy configuration.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateProxyBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateProxyUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateProxyForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateProxyNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateProxyInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateProxyServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntProxy|\Psr\Http\Message\ResponseInterface|null
     */
    public function createProxy(\Afosto\Sdk\Model\CntProxyModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateProxy($body), $fetch);
    }

    /**
     * Returns the proxy configuration.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetProxyBadRequestException
     * @throws \Afosto\Sdk\Exception\GetProxyUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetProxyForbiddenException
     * @throws \Afosto\Sdk\Exception\GetProxyNotFoundException
     * @throws \Afosto\Sdk\Exception\GetProxyInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetProxyServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntProxy|\Psr\Http\Message\ResponseInterface|null
     */
    public function getProxy(string $key, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetProxy($key), $fetch);
    }

    /**
     * Updates the proxy.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateProxyBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateProxyUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateProxyForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateProxyNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateProxyInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateProxyServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntProxy|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateProxy(string $key, \Afosto\Sdk\Model\CntProxyUpdateModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateProxy($key, $body), $fetch);
    }

    /**
     * Announce an new profile.
     *
     * @param string    $path  the key we want to register
     * @param \stdClass $body  Announce a profile definition for a given path
     * @param string    $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AnnounceProfileBadRequestException
     * @throws \Afosto\Sdk\Exception\AnnounceProfileUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AnnounceProfileForbiddenException
     * @throws \Afosto\Sdk\Exception\AnnounceProfileConflictException
     * @throws \Afosto\Sdk\Exception\AnnounceProfileNotFoundException
     * @throws \Afosto\Sdk\Exception\AnnounceProfileInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AnnounceProfileServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function announceProfile(string $path, \stdClass $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AnnounceProfile($path, $body), $fetch);
    }

    /**
     * Announce new profiles.
     *
     * @param string $path  the key we want to register
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetProfileDefinitionsBadRequestException
     * @throws \Afosto\Sdk\Exception\GetProfileDefinitionsForbiddenException
     * @throws \Afosto\Sdk\Exception\GetProfileDefinitionsNotFoundException
     * @throws \Afosto\Sdk\Exception\GetProfileDefinitionsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetProfileDefinitionsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetProfileDefinitionsServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function getProfileDefinitions(string $path, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetProfileDefinitions($path), $fetch);
    }

    /**
     * Get the profiles by its key.
     *
     * @param string $path  The correlationID of a configuration where we are updating the configuration off
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetProfileForbiddenException
     * @throws \Afosto\Sdk\Exception\GetProfileNotFoundException
     * @throws \Afosto\Sdk\Exception\GetProfileBadRequestException
     * @throws \Afosto\Sdk\Exception\GetProfileUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetProfileInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetProfileServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function getProfile(string $path, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetProfile($path), $fetch);
    }

    /**
     * Update the profile content.
     *
     * @param string    $path  The correlationID of a configuration where we are updating the configuration off
     * @param \stdClass $body  update a profile
     * @param string    $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateProfileBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateProfileUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateProfileForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateProfileConflictException
     * @throws \Afosto\Sdk\Exception\UpdateProfileNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateProfileInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateProfileServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function updateProfile(string $path, \stdClass $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateProfile($path, $body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetBillingInformationBadRequestException
     * @throws \Afosto\Sdk\Exception\GetBillingInformationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetBillingInformationForbiddenException
     * @throws \Afosto\Sdk\Exception\GetBillingInformationNotFoundException
     * @throws \Afosto\Sdk\Exception\GetBillingInformationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetBillingInformationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamBillingCompany|\Psr\Http\Message\ResponseInterface|null
     */
    public function getBillingInformation(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetBillingInformation(), $fetch);
    }

    /**
     * Update customer information regarding billing data.
     *
     * @param \Afosto\Sdk\Model\IamBillingCompany $body  Email object
     * @param string                              $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateBillingInformationBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateBillingInformationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateBillingInformationForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateBillingInformationNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateBillingInformationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateBillingInformationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamBillingCompany|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateBillingInformation(\Afosto\Sdk\Model\IamBillingCompany $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateBillingInformation($body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListPaymentSourcesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListPaymentSourcesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListPaymentSourcesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListPaymentSourcesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListPaymentSourcesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListPaymentSourcesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamPaymentSource[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listPaymentSources(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListPaymentSources(), $fetch);
    }

    /**
     * Add a payment source.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AddPaymentSourceBadRequestException
     * @throws \Afosto\Sdk\Exception\AddPaymentSourceUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AddPaymentSourceForbiddenException
     * @throws \Afosto\Sdk\Exception\AddPaymentSourceNotFoundException
     * @throws \Afosto\Sdk\Exception\AddPaymentSourceInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AddPaymentSourceServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamPaymentSource[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function addPaymentSource(\Afosto\Sdk\Model\IamSourcesPostBody $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AddPaymentSource($body), $fetch);
    }

    /**
     * Remove an active payment source.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\RemovePaymentSourceBadRequestException
     * @throws \Afosto\Sdk\Exception\RemovePaymentSourceUnauthorizedException
     * @throws \Afosto\Sdk\Exception\RemovePaymentSourceForbiddenException
     * @throws \Afosto\Sdk\Exception\RemovePaymentSourceNotFoundException
     * @throws \Afosto\Sdk\Exception\RemovePaymentSourceInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\RemovePaymentSourceServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamPaymentSource[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function removePaymentSource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\RemovePaymentSource($id), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListProductsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListProductsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListProductsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListProductsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListProductsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListProductsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamProduct[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listProducts(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListProducts(), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListSubscriptionsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListSubscriptionsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListSubscriptionsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListSubscriptionsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListSubscriptionsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListSubscriptionsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamSubscription[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listSubscriptions(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListSubscriptions(), $fetch);
    }

    /**
     * Add a product to the subscription.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AddSubscriptionBadRequestException
     * @throws \Afosto\Sdk\Exception\AddSubscriptionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AddSubscriptionForbiddenException
     * @throws \Afosto\Sdk\Exception\AddSubscriptionNotFoundException
     * @throws \Afosto\Sdk\Exception\AddSubscriptionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AddSubscriptionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUsageRecord[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function addSubscription(\Afosto\Sdk\Model\IamSubscribe $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AddSubscription($body), $fetch);
    }

    /**
     * Add an add on to a subscription.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AddAddOnBadRequestException
     * @throws \Afosto\Sdk\Exception\AddAddOnUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AddAddOnForbiddenException
     * @throws \Afosto\Sdk\Exception\AddAddOnNotFoundException
     * @throws \Afosto\Sdk\Exception\AddAddOnInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AddAddOnServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUsageRecord[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function addAddOn(\Afosto\Sdk\Model\IamAddOn $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AddAddOn($body), $fetch);
    }

    /**
     * List of the invoices.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var string $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListSubscriptionInvoicesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListSubscriptionInvoicesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListSubscriptionInvoicesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListSubscriptionInvoicesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListSubscriptionInvoicesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListSubscriptionInvoicesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamInvoice[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listSubscriptionInvoices(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListSubscriptionInvoices($headerParameters), $fetch);
    }

    /**
     * Get information about the next invoice.
     *
     * @param array $queryParameters {
     *
     *     @var string $code cnt
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetUpcomingBadRequestException
     * @throws \Afosto\Sdk\Exception\GetUpcomingUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetUpcomingForbiddenException
     * @throws \Afosto\Sdk\Exception\GetUpcomingNotFoundException
     * @throws \Afosto\Sdk\Exception\GetUpcomingInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetUpcomingServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUpcomingInvoice|\Psr\Http\Message\ResponseInterface|null
     */
    public function getUpcoming(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetUpcoming($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetTrialBadRequestException
     * @throws \Afosto\Sdk\Exception\GetTrialUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetTrialForbiddenException
     * @throws \Afosto\Sdk\Exception\GetTrialNotFoundException
     * @throws \Afosto\Sdk\Exception\GetTrialInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetTrialServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamTrial|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTrial(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetTrial(), $fetch);
    }

    /**
     * List of subscribed products.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetUsagesBadRequestException
     * @throws \Afosto\Sdk\Exception\GetUsagesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetUsagesForbiddenException
     * @throws \Afosto\Sdk\Exception\GetUsagesNotFoundException
     * @throws \Afosto\Sdk\Exception\GetUsagesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetUsagesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUsageRecord[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getUsages(\Afosto\Sdk\Model\IamUsageRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetUsages($body), $fetch);
    }

    /**
     * Returns a list of records.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var string $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListRecordsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListRecordsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListRecordsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListRecordsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListRecordsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListRecordsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesUsageRecord[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listRecords(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListRecords($headerParameters), $fetch);
    }

    /**
     * Returns a set of usage records for given query.
     *
     * @param \Afosto\Sdk\Model\MesReportRequest $body            Report request object
     * @param array                              $queryParameters {
     *
     *     @var int $page_size
     *     @var int $page
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\QueryUsageUnauthorizedException
     * @throws \Afosto\Sdk\Exception\QueryUsageNotFoundException
     * @throws \Afosto\Sdk\Exception\QueryUsageBadRequestException
     * @throws \Afosto\Sdk\Exception\QueryUsageForbiddenException
     * @throws \Afosto\Sdk\Exception\QueryUsageInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\QueryUsageServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesReport[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function queryUsage(\Afosto\Sdk\Model\MesReportRequest $body, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\QueryUsage($body, $queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListTypesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListTypesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListTypesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListTypesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListTypesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListTypesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesType[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listTypes(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListTypes(), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListHubsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListHubsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListHubsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListHubsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListHubsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListHubsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplHub[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listHubs(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListHubs(), $fetch);
    }

    /**
     * Creates a new hub.
     *
     * @param \Afosto\Sdk\Model\SplHubModel $body  The new hub
     * @param string                        $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateHubBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateHubUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateHubForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateHubNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateHubInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateHubServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplHub|\Psr\Http\Message\ResponseInterface|null
     */
    public function createHub(\Afosto\Sdk\Model\SplHubModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateHub($body), $fetch);
    }

    /**
     * @param string $id    ID of hub to delete
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteHubUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteHubNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteHubBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteHubForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteHubInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteHubServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplHub|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteHub(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteHub($id), $fetch);
    }

    /**
     * Returns the hub.
     *
     * @param string $id    ID of hub to return
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetHubUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetHubNotFoundException
     * @throws \Afosto\Sdk\Exception\GetHubBadRequestException
     * @throws \Afosto\Sdk\Exception\GetHubForbiddenException
     * @throws \Afosto\Sdk\Exception\GetHubInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetHubServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplHub|\Psr\Http\Message\ResponseInterface|null
     */
    public function getHub(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetHub($id), $fetch);
    }

    /**
     * Update the hub to new hub settings.
     *
     * @param string                        $id    ID of hub to update
     * @param \Afosto\Sdk\Model\SplHubModel $body  The updated hub data
     * @param string                        $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateHubBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateHubUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateHubNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateHubForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateHubInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateHubServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplHub|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateHub(string $id, \Afosto\Sdk\Model\SplHubModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateHub($id, $body), $fetch);
    }

    /**
     * Returns the hub information.
     *
     * @param string $id    ID of hub to look for
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetHubStatusUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetHubStatusNotFoundException
     * @throws \Afosto\Sdk\Exception\GetHubStatusBadRequestException
     * @throws \Afosto\Sdk\Exception\GetHubStatusForbiddenException
     * @throws \Afosto\Sdk\Exception\GetHubStatusInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetHubStatusServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplHubStatus|\Psr\Http\Message\ResponseInterface|null
     */
    public function getHubStatus(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetHubStatus($id), $fetch);
    }

    /**
     * Returns the hub network list.
     *
     * @param int    $id    ID of hub to add a token for
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListHubNetworkUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListHubNetworkBadRequestException
     * @throws \Afosto\Sdk\Exception\ListHubNetworkForbiddenException
     * @throws \Afosto\Sdk\Exception\ListHubNetworkNotFoundException
     * @throws \Afosto\Sdk\Exception\ListHubNetworkInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListHubNetworkServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplNetworkDevice[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listHubNetwork(int $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListHubNetwork($id), $fetch);
    }

    /**
     * Updates the hub network.
     *
     * @param int                                        $id    ID of hub to update network information for
     * @param \Afosto\Sdk\Model\SplCreateNetworkDevice[] $body  The new hub
     * @param string                                     $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateHubNetworkUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateHubNetworkBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateHubNetworkForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateHubNetworkNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateHubNetworkInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateHubNetworkServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplNetworkDevice[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateHubNetwork(int $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateHubNetwork($id, $body), $fetch);
    }

    /**
     * Returns the hub log list.
     *
     * @param int    $id    ID of hub to add a token for
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListHubLogsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListHubLogsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListHubLogsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListHubLogsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListHubLogsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListHubLogsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplHubError[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listHubLogs(int $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListHubLogs($id), $fetch);
    }

    /**
     * Adds a new logged error for the hub.
     *
     * @param string                             $id    Id of hub to add a log for
     * @param \Afosto\Sdk\Model\SplHubErrorModel $body  The new hub
     * @param string                             $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AddHubLogBadRequestException
     * @throws \Afosto\Sdk\Exception\AddHubLogUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AddHubLogForbiddenException
     * @throws \Afosto\Sdk\Exception\AddHubLogNotFoundException
     * @throws \Afosto\Sdk\Exception\AddHubLogInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AddHubLogServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplHubError|\Psr\Http\Message\ResponseInterface|null
     */
    public function addHubLog(string $id, \Afosto\Sdk\Model\SplHubErrorModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AddHubLog($id, $body), $fetch);
    }

    /**
     * Returns the hub.
     *
     * @param string $id    The UUID of the hub to return
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetHubByUuidUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetHubByUuidNotFoundException
     * @throws \Afosto\Sdk\Exception\GetHubByUuidBadRequestException
     * @throws \Afosto\Sdk\Exception\GetHubByUuidForbiddenException
     * @throws \Afosto\Sdk\Exception\GetHubByUuidInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetHubByUuidServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplHub|\Psr\Http\Message\ResponseInterface|null
     */
    public function getHubByUuid(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetHubByUuid($id), $fetch);
    }

    /**
     * Returns a list of logs.
     *
     * @param array $queryParameters {
     *
     *     @var string $method The method filter
     *     @var string $resource The resource filter
     *     @var string $user The user filter
     *     @var string $logged_after Timestamp to filter log date
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page The page token
     *     @var string $x-page-size The amount of results for the page
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListAuditLogUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListAuditLogNotFoundException
     * @throws \Afosto\Sdk\Exception\ListAuditLogBadRequestException
     * @throws \Afosto\Sdk\Exception\ListAuditLogForbiddenException
     * @throws \Afosto\Sdk\Exception\ListAuditLogInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListAuditLogServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamLog[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listAuditLog(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListAuditLog($queryParameters, $headerParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListAuditLogFiltersUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListAuditLogFiltersNotFoundException
     * @throws \Afosto\Sdk\Exception\ListAuditLogFiltersBadRequestException
     * @throws \Afosto\Sdk\Exception\ListAuditLogFiltersForbiddenException
     * @throws \Afosto\Sdk\Exception\ListAuditLogFiltersInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListAuditLogFiltersServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamLogsFiltersGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function listAuditLogFilters(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListAuditLogFilters(), $fetch);
    }

    /**
     * Returns information regarding the GIF.
     *
     * @param array $queryParameters {
     *
     *     @var string $url the requested URL
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetGifInfoNotFoundException
     * @throws \Afosto\Sdk\Exception\GetGifInfoBadRequestException
     * @throws \Afosto\Sdk\Exception\GetGifInfoUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetGifInfoForbiddenException
     * @throws \Afosto\Sdk\Exception\GetGifInfoInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetGifInfoServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntGifInfo|\Psr\Http\Message\ResponseInterface|null
     */
    public function getGifInfo(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetGifInfo($queryParameters), $fetch);
    }

    /**
     * Returns information regarding the GIF.
     *
     * @param array $queryParameters {
     *
     *     @var string $url the requested URL
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\TransformGifNotFoundException
     * @throws \Afosto\Sdk\Exception\TransformGifBadRequestException
     * @throws \Afosto\Sdk\Exception\TransformGifUnauthorizedException
     * @throws \Afosto\Sdk\Exception\TransformGifForbiddenException
     * @throws \Afosto\Sdk\Exception\TransformGifInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\TransformGifServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function transformGif(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\TransformGif($queryParameters), $fetch);
    }

    /**
     * Returns a new authorization response.
     *
     * @param \Afosto\Sdk\Model\IamSignup $body  Signup object
     * @param string                      $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateTenantUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateTenantNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateTenantBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateTenantForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateTenantInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateTenantServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamTenantsPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function createTenant(\Afosto\Sdk\Model\IamSignup $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateTenant($body), $fetch);
    }

    /**
     * Return the current tenant information.
     *
     * @param string $id    Id that belongs to the tenant
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetTenantUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetTenantNotFoundException
     * @throws \Afosto\Sdk\Exception\GetTenantBadRequestException
     * @throws \Afosto\Sdk\Exception\GetTenantForbiddenException
     * @throws \Afosto\Sdk\Exception\GetTenantInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetTenantServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamTenant|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTenant(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetTenant($id), $fetch);
    }

    /**
     * Update the company name.
     *
     * @param string $id    Id that belongs to the tenant
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateCompanyNameUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateCompanyNameNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateCompanyNameBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateCompanyNameForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateCompanyNameInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateCompanyNameServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamTenant|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateCompanyName(string $id, \Afosto\Sdk\Model\IamTenantsIdPutBody $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateCompanyName($id, $body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListSubtenantsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListSubtenantsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListSubtenantsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListSubtenantsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListSubtenantsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListSubtenantsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamSubtenant[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listSubtenants(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListSubtenants(), $fetch);
    }

    /**
     * Returns a list of subtenants.
     *
     * @param array $queryParameters {
     *
     *     @var string $state
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListPendingInvitesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListPendingInvitesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListPendingInvitesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListPendingInvitesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListPendingInvitesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListPendingInvitesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamSubtenant[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listPendingInvites(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListPendingInvites($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetDefaultSubtenantUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetDefaultSubtenantNotFoundException
     * @throws \Afosto\Sdk\Exception\GetDefaultSubtenantBadRequestException
     * @throws \Afosto\Sdk\Exception\GetDefaultSubtenantForbiddenException
     * @throws \Afosto\Sdk\Exception\GetDefaultSubtenantInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetDefaultSubtenantServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamSubtenant|\Psr\Http\Message\ResponseInterface|null
     */
    public function getDefaultSubtenant(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetDefaultSubtenant(), $fetch);
    }

    /**
     * Updates the invite state.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateInviteUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateInviteNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateInviteBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateInviteForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateInviteInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateInviteServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamSubtenant|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateInvite(string $id, \Afosto\Sdk\Model\IamSubtenantsInvitesIdPutBody $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateInvite($id, $body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListPendingSubtenantsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListPendingSubtenantsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListPendingSubtenantsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListPendingSubtenantsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListPendingSubtenantsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListPendingSubtenantsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamPendingRequest[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listPendingSubtenants(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListPendingSubtenants(), $fetch);
    }

    /**
     * Create a new subtenant request.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SendSubtenantRequestUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SendSubtenantRequestNotFoundException
     * @throws \Afosto\Sdk\Exception\SendSubtenantRequestBadRequestException
     * @throws \Afosto\Sdk\Exception\SendSubtenantRequestForbiddenException
     * @throws \Afosto\Sdk\Exception\SendSubtenantRequestInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SendSubtenantRequestServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamPendingRequest|\Psr\Http\Message\ResponseInterface|null
     */
    public function sendSubtenantRequest(\Afosto\Sdk\Model\IamSubtenantsRequestsPostBody $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SendSubtenantRequest($body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListAuthorizationsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListAuthorizationsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListAuthorizationsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListAuthorizationsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListAuthorizationsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListAuthorizationsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamAuthorization[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listAuthorizations(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListAuthorizations(), $fetch);
    }

    /**
     * Returns a list of subtenants.
     *
     * @param array $queryParameters {
     *
     *     @var string $state
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListPendingAuthorizationRequestsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListPendingAuthorizationRequestsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListPendingAuthorizationRequestsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListPendingAuthorizationRequestsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListPendingAuthorizationRequestsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListPendingAuthorizationRequestsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamAuthorization[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listPendingAuthorizationRequests(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListPendingAuthorizationRequests($queryParameters), $fetch);
    }

    /**
     * Updates the request state.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateRequestUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateRequestNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateRequestBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateRequestForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateRequestInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateRequestServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamAuthorization|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateRequest(string $id, \Afosto\Sdk\Model\IamSubtenantsAuthorizationsRequestsIdPutBody $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateRequest($id, $body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListPendingAuthorizationInvitesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListPendingAuthorizationInvitesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListPendingAuthorizationInvitesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListPendingAuthorizationInvitesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListPendingAuthorizationInvitesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListPendingAuthorizationInvitesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamPendingAuthorization[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listPendingAuthorizationInvites(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListPendingAuthorizationInvites(), $fetch);
    }

    /**
     * Create a new subtenant request.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SendInviteUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SendInviteNotFoundException
     * @throws \Afosto\Sdk\Exception\SendInviteBadRequestException
     * @throws \Afosto\Sdk\Exception\SendInviteForbiddenException
     * @throws \Afosto\Sdk\Exception\SendInviteInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SendInviteServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamPendingAuthorization|\Psr\Http\Message\ResponseInterface|null
     */
    public function sendInvite(\Afosto\Sdk\Model\IamSubtenantsAuthorizationsInvitesPostBody $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SendInvite($body), $fetch);
    }

    /**
     * Returns a list of users.
     *
     * @param array $queryParameters {
     *
     *     @var int $is_pending_invite
     *     @var int $is_deleted
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListUsersUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListUsersNotFoundException
     * @throws \Afosto\Sdk\Exception\ListUsersBadRequestException
     * @throws \Afosto\Sdk\Exception\ListUsersForbiddenException
     * @throws \Afosto\Sdk\Exception\ListUsersInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListUsersServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUser[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listUsers(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListUsers($queryParameters), $fetch);
    }

    /**
     * Returns a new authorization response.
     *
     * @param \Afosto\Sdk\Model\IamUserModel $body  User object
     * @param string                         $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateUserUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateUserNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateUserBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateUserForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateUserInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateUserServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUser|\Psr\Http\Message\ResponseInterface|null
     */
    public function createUser(\Afosto\Sdk\Model\IamUserModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateUser($body), $fetch);
    }

    /**
     * Deletes a user.
     *
     * @param string $id    Id that belongs to the user
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteUserUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteUserNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteUserBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteUserForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteUserInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteUserServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUser|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteUser(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteUser($id), $fetch);
    }

    /**
     * Returns a single user.
     *
     * @param string $id    Id that belongs to the user
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetUserUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetUserNotFoundException
     * @throws \Afosto\Sdk\Exception\GetUserBadRequestException
     * @throws \Afosto\Sdk\Exception\GetUserForbiddenException
     * @throws \Afosto\Sdk\Exception\GetUserInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetUserServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUser|\Psr\Http\Message\ResponseInterface|null
     */
    public function getUser(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetUser($id), $fetch);
    }

    /**
     * Updates a user.
     *
     * @param string                               $id    Id that belongs to the user
     * @param \Afosto\Sdk\Model\IamUserUpdateModel $body  User object
     * @param string                               $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateUserUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateUserNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateUserBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateUserForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateUserInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateUserServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUser|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateUser(string $id, \Afosto\Sdk\Model\IamUserUpdateModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateUser($id, $body), $fetch);
    }

    /**
     * Returns a list of tokens.
     *
     * @param string $id              Id that belongs to the user
     * @param array  $queryParameters {
     *
     *     @var string $type
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListTokensUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListTokensNotFoundException
     * @throws \Afosto\Sdk\Exception\ListTokensBadRequestException
     * @throws \Afosto\Sdk\Exception\ListTokensForbiddenException
     * @throws \Afosto\Sdk\Exception\ListTokensInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListTokensServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUserTokenResponse[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listTokens(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListTokens($id, $queryParameters), $fetch);
    }

    /**
     * Updates the roles that belong to a user.
     *
     * @param string $id    Id that belongs to the user
     * @param array  $body  Array of role id's
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateUserRolesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateUserRolesNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateUserRolesBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateUserRolesForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateUserRolesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateUserRolesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUser|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateUserRoles(string $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateUserRoles($id, $body), $fetch);
    }

    /**
     * Accept an invite, set the password and mark user's email as verified.
     *
     * @param \Afosto\Sdk\Model\IamPasswordReset $body  Reset object
     * @param string                             $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\JoinTenantUnauthorizedException
     * @throws \Afosto\Sdk\Exception\JoinTenantNotFoundException
     * @throws \Afosto\Sdk\Exception\JoinTenantBadRequestException
     * @throws \Afosto\Sdk\Exception\JoinTenantForbiddenException
     * @throws \Afosto\Sdk\Exception\JoinTenantInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\JoinTenantServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUser|\Psr\Http\Message\ResponseInterface|null
     */
    public function joinTenant(\Afosto\Sdk\Model\IamPasswordReset $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\JoinTenant($body), $fetch);
    }

    /**
     * So the user can login.
     *
     * @param \Afosto\Sdk\Model\IamPasswordReset $body  Reset object
     * @param string                             $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ResetPasswordUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ResetPasswordNotFoundException
     * @throws \Afosto\Sdk\Exception\ResetPasswordBadRequestException
     * @throws \Afosto\Sdk\Exception\ResetPasswordForbiddenException
     * @throws \Afosto\Sdk\Exception\ResetPasswordInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ResetPasswordServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUser|\Psr\Http\Message\ResponseInterface|null
     */
    public function resetPassword(\Afosto\Sdk\Model\IamPasswordReset $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ResetPassword($body), $fetch);
    }

    /**
     * So the user can login.
     *
     * @param \Afosto\Sdk\Model\IamVerifyRequest $body  Verify object
     * @param string                             $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\VerifyUserUnauthorizedException
     * @throws \Afosto\Sdk\Exception\VerifyUserNotFoundException
     * @throws \Afosto\Sdk\Exception\VerifyUserBadRequestException
     * @throws \Afosto\Sdk\Exception\VerifyUserForbiddenException
     * @throws \Afosto\Sdk\Exception\VerifyUserInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\VerifyUserServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUser|\Psr\Http\Message\ResponseInterface|null
     */
    public function verifyUser(\Afosto\Sdk\Model\IamVerifyRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\VerifyUser($body), $fetch);
    }

    /**
     * So the user can receive a password reset mail or confirm mail.
     *
     * @param \Afosto\Sdk\Model\IamUserTokenRequest $body  Request reset object
     * @param string                                $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\RequestTokenUnauthorizedException
     * @throws \Afosto\Sdk\Exception\RequestTokenNotFoundException
     * @throws \Afosto\Sdk\Exception\RequestTokenBadRequestException
     * @throws \Afosto\Sdk\Exception\RequestTokenForbiddenException
     * @throws \Afosto\Sdk\Exception\RequestTokenInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\RequestTokenServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUserTokenResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function requestToken(\Afosto\Sdk\Model\IamUserTokenRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\RequestToken($body), $fetch);
    }

    /**
     * Invalidate all pending tokens of given type for user.
     *
     * @param \Afosto\Sdk\Model\IamUserTokenRequest $body  Request reset object
     * @param string                                $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\InvalidateTokensUnauthorizedException
     * @throws \Afosto\Sdk\Exception\InvalidateTokensNotFoundException
     * @throws \Afosto\Sdk\Exception\InvalidateTokensBadRequestException
     * @throws \Afosto\Sdk\Exception\InvalidateTokensForbiddenException
     * @throws \Afosto\Sdk\Exception\InvalidateTokensInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\InvalidateTokensServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamUserTokenResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function invalidateTokens(\Afosto\Sdk\Model\IamUserTokenRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\InvalidateTokens($body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListRolesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListRolesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListRolesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListRolesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListRolesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListRolesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamRole[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listRoles(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListRoles(), $fetch);
    }

    /**
     * Make a new RBAC role available.
     *
     * @param \Afosto\Sdk\Model\IamRoleModel $body  Role object
     * @param string                         $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateRoleUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateRoleNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateRoleBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateRoleForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateRoleInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateRoleServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamRole|\Psr\Http\Message\ResponseInterface|null
     */
    public function createRole(\Afosto\Sdk\Model\IamRoleModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateRole($body), $fetch);
    }

    /**
     * Delete a RBAC role.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteRoleUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteRoleNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteRoleBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteRoleForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteRoleInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteRoleServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamRole|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteRole(int $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteRole($id), $fetch);
    }

    /**
     * Returns the rbac role.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetRoleUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetRoleNotFoundException
     * @throws \Afosto\Sdk\Exception\GetRoleBadRequestException
     * @throws \Afosto\Sdk\Exception\GetRoleForbiddenException
     * @throws \Afosto\Sdk\Exception\GetRoleInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetRoleServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamRole|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRole(int $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetRole($id), $fetch);
    }

    /**
     * Update a RBAC role.
     *
     * @param \Afosto\Sdk\Model\IamRoleModel $body  Role object
     * @param string                         $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateRoleUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateRoleNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateRoleBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateRoleForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateRoleInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateRoleServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamRole|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateRole(int $id, \Afosto\Sdk\Model\IamRoleModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateRole($id, $body), $fetch);
    }

    /**
     * Returns a list of available rbac roles.
     *
     * @param array $queryParameters {
     *
     *     @var string $client_id
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListSystemRolesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListSystemRolesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListSystemRolesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListSystemRolesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListSystemRolesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListSystemRolesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamSystemRole[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listSystemRoles(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListSystemRoles($queryParameters), $fetch);
    }

    /**
     * Returns a single rbac role.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSystemRoleUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSystemRoleNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSystemRoleBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSystemRoleForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSystemRoleInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSystemRoleServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamSystemRole[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSystemRole(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSystemRole($id), $fetch);
    }

    /**
     * Returns a list of clients.
     *
     * @param array $queryParameters {
     *
     *     @var int $is_deleted
     *     @var string $scope
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListClientsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListClientsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListClientsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListClientsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListClientsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListClientsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamClient[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listClients(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListClients($queryParameters), $fetch);
    }

    /**
     * Returns a new client.
     *
     * @param \Afosto\Sdk\Model\IamClientModel $body  Create object
     * @param string                           $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateClientUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateClientNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateClientBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateClientForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateClientInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateClientServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamClient|\Psr\Http\Message\ResponseInterface|null
     */
    public function createClient(\Afosto\Sdk\Model\IamClientModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateClient($body), $fetch);
    }

    /**
     * Returns the deleted client.
     *
     * @param string $id    Id that belongs to the oauth client
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteClientUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteClientNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteClientBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteClientForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteClientInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteClientServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamClient|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteClient(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteClient($id), $fetch);
    }

    /**
     * Returns the oauth client for the given client id.
     *
     * @param string $id    Id that belongs to the oauth client
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetClientNotFoundException
     * @throws \Afosto\Sdk\Exception\GetClientBadRequestException
     * @throws \Afosto\Sdk\Exception\GetClientUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetClientForbiddenException
     * @throws \Afosto\Sdk\Exception\GetClientInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetClientServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamClient|\Psr\Http\Message\ResponseInterface|null
     */
    public function getClient(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetClient($id), $fetch);
    }

    /**
     * Returns an updated client.
     *
     * @param string                                 $id    Id that belongs to the oauth client
     * @param \Afosto\Sdk\Model\IamClientUpdateModel $body  Update object
     * @param string                                 $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateClientBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateClientUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateClientNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateClientForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateClientInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateClientServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamClient|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateClient(string $id, \Afosto\Sdk\Model\IamClientUpdateModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateClient($id, $body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListOpenClientsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListOpenClientsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListOpenClientsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListOpenClientsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListOpenClientsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListOpenClientsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamClient[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listOpenClients(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListOpenClients(), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetScopesListUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetScopesListNotFoundException
     * @throws \Afosto\Sdk\Exception\GetScopesListBadRequestException
     * @throws \Afosto\Sdk\Exception\GetScopesListForbiddenException
     * @throws \Afosto\Sdk\Exception\GetScopesListInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetScopesListServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamScope[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getScopesList(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetScopesList(), $fetch);
    }

    /**
     * Get scope by it's id.
     *
     * @param string $id    Identifier that belongs to the scope
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetScopeUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetScopeNotFoundException
     * @throws \Afosto\Sdk\Exception\GetScopeBadRequestException
     * @throws \Afosto\Sdk\Exception\GetScopeForbiddenException
     * @throws \Afosto\Sdk\Exception\GetScopeInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetScopeServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamScope|\Psr\Http\Message\ResponseInterface|null
     */
    public function getScope(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetScope($id), $fetch);
    }

    /**
     * Returns a new authorization response.
     *
     * @param array $queryParameters {
     *
     *     @var string $redirect_uri
     *     @var string $client_id
     *     @var string $response_type
     *     @var string $scope
     *     @var string $tenant
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $Authorization Bearer ID token
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetRedirectBadRequestException
     * @throws \Afosto\Sdk\Exception\GetRedirectUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetRedirectNotFoundException
     * @throws \Afosto\Sdk\Exception\GetRedirectForbiddenException
     * @throws \Afosto\Sdk\Exception\GetRedirectInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetRedirectServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamAuthorizationResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRedirect(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetRedirect($queryParameters, $headerParameters), $fetch);
    }

    /**
     * Returns a new access token.
     *
     * @param \Afosto\Sdk\Model\IamTokenRequest $body  Token request object
     * @param string                            $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetAccessTokenBadRequestException
     * @throws \Afosto\Sdk\Exception\GetAccessTokenUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetAccessTokenNotFoundException
     * @throws \Afosto\Sdk\Exception\GetAccessTokenForbiddenException
     * @throws \Afosto\Sdk\Exception\GetAccessTokenInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetAccessTokenServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamAccessToken|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccessToken(\Afosto\Sdk\Model\IamTokenRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetAccessToken($body), $fetch);
    }

    /**
     * Log the authorization, store approval and redirect the user.
     *
     * @param string $reference       Reference that belongs to the authorize request
     * @param array  $queryParameters {
     *
     *     @var string $silent Pass along to change the redirect response into a response with a body. Note that this option only works on previously approved authorizations.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetRedirect302UnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetRedirect302NotFoundException
     * @throws \Afosto\Sdk\Exception\GetRedirect302BadRequestException
     * @throws \Afosto\Sdk\Exception\GetRedirect302ForbiddenException
     * @throws \Afosto\Sdk\Exception\GetRedirect302InternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetRedirect302ServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamOauthForwardReferenceGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRedirect302(string $reference, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetRedirect302($reference, $queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\RefreshAccessTokenUnauthorizedException
     * @throws \Afosto\Sdk\Exception\RefreshAccessTokenNotFoundException
     * @throws \Afosto\Sdk\Exception\RefreshAccessTokenBadRequestException
     * @throws \Afosto\Sdk\Exception\RefreshAccessTokenForbiddenException
     * @throws \Afosto\Sdk\Exception\RefreshAccessTokenInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\RefreshAccessTokenServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamAccessToken|\Psr\Http\Message\ResponseInterface|null
     */
    public function refreshAccessToken(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\RefreshAccessToken(), $fetch);
    }

    /**
     * Revoke the current access token or all the users' tokens. Both options will revoke all the users' refresh tokens.
     *
     * @param array $queryParameters {
     *
     *     @var string $tokens Current (default value) will revoke only the token that is passed as Authorization header. JWT will revoke all the users' JWT tokens. All will revoke all JWT and refresh tokens that belong to the user.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\RevokeTokensUnauthorizedException
     * @throws \Afosto\Sdk\Exception\RevokeTokensNotFoundException
     * @throws \Afosto\Sdk\Exception\RevokeTokensBadRequestException
     * @throws \Afosto\Sdk\Exception\RevokeTokensForbiddenException
     * @throws \Afosto\Sdk\Exception\RevokeTokensInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\RevokeTokensServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamAccessToken|\Psr\Http\Message\ResponseInterface|null
     */
    public function revokeTokens(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\RevokeTokens($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListNumbersUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListNumbersNotFoundException
     * @throws \Afosto\Sdk\Exception\ListNumbersBadRequestException
     * @throws \Afosto\Sdk\Exception\ListNumbersForbiddenException
     * @throws \Afosto\Sdk\Exception\ListNumbersInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListNumbersServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamPhoneNumber[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listNumbers(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListNumbers(), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateNumberUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateNumberNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateNumberBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateNumberForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateNumberInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateNumberServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\IamPhoneNumber|\Psr\Http\Message\ResponseInterface|null
     */
    public function createNumber(\Afosto\Sdk\Model\IamPhoneNumberModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateNumber($body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListProvidersBadRequestException
     * @throws \Afosto\Sdk\Exception\ListProvidersUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListProvidersForbiddenException
     * @throws \Afosto\Sdk\Exception\ListProvidersNotFoundException
     * @throws \Afosto\Sdk\Exception\ListProvidersInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListProvidersServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrProvider[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listProviders(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListProviders(), $fetch);
    }

    /**
     * Returns list of transactions.
     *
     * @param array $queryParameters {
     *
     *     @var string $entity_type
     *     @var string $entity_id
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListTransactionsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListTransactionsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListTransactionsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListTransactionsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListTransactionsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListTransactionsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrTransaction[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listTransactions(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListTransactions($queryParameters), $fetch);
    }

    /**
     * Returns a new signed upload url.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateTransactionBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateTransactionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateTransactionForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateTransactionNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateTransactionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateTransactionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrTransaction|\Psr\Http\Message\ResponseInterface|null
     */
    public function createTransaction(\Afosto\Sdk\Model\OdrTransactionModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateTransaction($body), $fetch);
    }

    /**
     * Marks a payment as paid.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\MarkPaymentAsPaidBadRequestException
     * @throws \Afosto\Sdk\Exception\MarkPaymentAsPaidUnauthorizedException
     * @throws \Afosto\Sdk\Exception\MarkPaymentAsPaidForbiddenException
     * @throws \Afosto\Sdk\Exception\MarkPaymentAsPaidNotFoundException
     * @throws \Afosto\Sdk\Exception\MarkPaymentAsPaidInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\MarkPaymentAsPaidServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrPayment|\Psr\Http\Message\ResponseInterface|null
     */
    public function markPaymentAsPaid(string $secret, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\MarkPaymentAsPaid($secret), $fetch);
    }

    /**
     * Returns the details of a transaction.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetTransactionBadRequestException
     * @throws \Afosto\Sdk\Exception\GetTransactionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetTransactionForbiddenException
     * @throws \Afosto\Sdk\Exception\GetTransactionNotFoundException
     * @throws \Afosto\Sdk\Exception\GetTransactionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetTransactionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrTransaction|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTransaction(string $secret, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetTransaction($secret), $fetch);
    }

    /**
     * Start a payment for a transaction.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreatePaymentBadRequestException
     * @throws \Afosto\Sdk\Exception\CreatePaymentUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreatePaymentForbiddenException
     * @throws \Afosto\Sdk\Exception\CreatePaymentNotFoundException
     * @throws \Afosto\Sdk\Exception\CreatePaymentInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreatePaymentServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrPayment|\Psr\Http\Message\ResponseInterface|null
     */
    public function createPayment(string $secret, \Afosto\Sdk\Model\OdrPaymentIntent $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreatePayment($secret, $body), $fetch);
    }

    /**
     * Returns a list of payment methods available for the transaction.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListMethodsForTransactionBadRequestException
     * @throws \Afosto\Sdk\Exception\ListMethodsForTransactionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListMethodsForTransactionForbiddenException
     * @throws \Afosto\Sdk\Exception\ListMethodsForTransactionNotFoundException
     * @throws \Afosto\Sdk\Exception\ListMethodsForTransactionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListMethodsForTransactionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrMethod[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listMethodsForTransaction(string $secret, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListMethodsForTransaction($secret), $fetch);
    }

    /**
     * Returns the live details of a payment.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetPaymentBadRequestException
     * @throws \Afosto\Sdk\Exception\GetPaymentUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetPaymentForbiddenException
     * @throws \Afosto\Sdk\Exception\GetPaymentNotFoundException
     * @throws \Afosto\Sdk\Exception\GetPaymentInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetPaymentServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrProcess|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPayment(string $secret, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetPayment($secret), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListEventsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListEventsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListEventsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListEventsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListEventsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListEventsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesWebhookEvent[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listEvents(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListEvents(), $fetch);
    }

    /**
     * List currenty active webhook subscriptions.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var int $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListWebhookSubscriptionsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListWebhookSubscriptionsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListWebhookSubscriptionsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListWebhookSubscriptionsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListWebhookSubscriptionsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListWebhookSubscriptionsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesWebhookSubscription[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listWebhookSubscriptions(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListWebhookSubscriptions($headerParameters), $fetch);
    }

    /**
     * Create a new webhook subscription.
     *
     * @param \Afosto\Sdk\Model\MesSubscriptionModel $body  Subscription data
     * @param string                                 $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateWebhookSubscriptionBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateWebhookSubscriptionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateWebhookSubscriptionForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateWebhookSubscriptionNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateWebhookSubscriptionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateWebhookSubscriptionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesWebhookSubscription|\Psr\Http\Message\ResponseInterface|null
     */
    public function createWebhookSubscription(\Afosto\Sdk\Model\MesSubscriptionModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateWebhookSubscription($body), $fetch);
    }

    /**
     * Delete a webhook subscription.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteWebhookSubscriptionBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteWebhookSubscriptionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteWebhookSubscriptionForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteWebhookSubscriptionNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteWebhookSubscriptionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteWebhookSubscriptionServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function deleteWebhookSubscription(int $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteWebhookSubscription($id), $fetch);
    }

    /**
     * Get an active webhook subscription.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetWebhookSubscriptionBadRequestException
     * @throws \Afosto\Sdk\Exception\GetWebhookSubscriptionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetWebhookSubscriptionForbiddenException
     * @throws \Afosto\Sdk\Exception\GetWebhookSubscriptionNotFoundException
     * @throws \Afosto\Sdk\Exception\GetWebhookSubscriptionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetWebhookSubscriptionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesWebhookSubscription|\Psr\Http\Message\ResponseInterface|null
     */
    public function getWebhookSubscription(int $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetWebhookSubscription($id), $fetch);
    }

    /**
     * Update webhook subscription.
     *
     * @param \Afosto\Sdk\Model\MesSubscriptionModel $body  Subscription data
     * @param string                                 $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateWebhookSubscriptionBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateWebhookSubscriptionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateWebhookSubscriptionForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateWebhookSubscriptionNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateWebhookSubscriptionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateWebhookSubscriptionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesWebhookSubscription|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateWebhookSubscription(int $id, \Afosto\Sdk\Model\MesSubscriptionModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateWebhookSubscription($id, $body), $fetch);
    }

    /**
     * Test a subscription / webhook delivery for an event.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\TriggerEventBadRequestException
     * @throws \Afosto\Sdk\Exception\TriggerEventUnauthorizedException
     * @throws \Afosto\Sdk\Exception\TriggerEventForbiddenException
     * @throws \Afosto\Sdk\Exception\TriggerEventNotFoundException
     * @throws \Afosto\Sdk\Exception\TriggerEventInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\TriggerEventServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesWebhookTestMessage|\Psr\Http\Message\ResponseInterface|null
     */
    public function triggerEvent(int $id, \Afosto\Sdk\Model\MesTrigger $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\TriggerEvent($id, $body), $fetch);
    }

    /**
     * List of messages created in the past 30 days, both pending or deliverd.
     *
     * @param array $queryParameters {
     *
     *     @var string $is_delivered
     *     @var string $is_pending
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var int $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListWebhookMessagesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListWebhookMessagesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListWebhookMessagesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListWebhookMessagesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListWebhookMessagesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListWebhookMessagesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesWebhookMessage[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listWebhookMessages(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListWebhookMessages($queryParameters, $headerParameters), $fetch);
    }

    /**
     * Get a single message.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetWebhookMessageBadRequestException
     * @throws \Afosto\Sdk\Exception\GetWebhookMessageUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetWebhookMessageForbiddenException
     * @throws \Afosto\Sdk\Exception\GetWebhookMessageNotFoundException
     * @throws \Afosto\Sdk\Exception\GetWebhookMessageInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetWebhookMessageServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesWebhookMessage|\Psr\Http\Message\ResponseInterface|null
     */
    public function getWebhookMessage(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetWebhookMessage($id), $fetch);
    }

    /**
     * Manually retry a single message.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\RetryWebhookMessageBadRequestException
     * @throws \Afosto\Sdk\Exception\RetryWebhookMessageUnauthorizedException
     * @throws \Afosto\Sdk\Exception\RetryWebhookMessageForbiddenException
     * @throws \Afosto\Sdk\Exception\RetryWebhookMessageNotFoundException
     * @throws \Afosto\Sdk\Exception\RetryWebhookMessageInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\RetryWebhookMessageServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesWebhookTestMessage|\Psr\Http\Message\ResponseInterface|null
     */
    public function retryWebhookMessage(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\RetryWebhookMessage($id), $fetch);
    }

    /**
     * List the delivery attempts for a single message.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var int $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetWebhookAttemptsBadRequestException
     * @throws \Afosto\Sdk\Exception\GetWebhookAttemptsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetWebhookAttemptsForbiddenException
     * @throws \Afosto\Sdk\Exception\GetWebhookAttemptsNotFoundException
     * @throws \Afosto\Sdk\Exception\GetWebhookAttemptsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetWebhookAttemptsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesWebhookAttempt[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getWebhookAttempts(string $id, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetWebhookAttempts($id, $headerParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetDelaysBadRequestException
     * @throws \Afosto\Sdk\Exception\GetDelaysUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetDelaysForbiddenException
     * @throws \Afosto\Sdk\Exception\GetDelaysNotFoundException
     * @throws \Afosto\Sdk\Exception\GetDelaysInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetDelaysServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesWebhookDelay[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getDelays(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetDelays(), $fetch);
    }

    /**
     * List all routes.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetRoutesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetRoutesNotFoundException
     * @throws \Afosto\Sdk\Exception\GetRoutesBadRequestException
     * @throws \Afosto\Sdk\Exception\GetRoutesForbiddenException
     * @throws \Afosto\Sdk\Exception\GetRoutesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetRoutesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsRoute[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRoutes(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetRoutes($headerParameters), $fetch);
    }

    /**
     * Add a new route.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateRouteUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateRouteNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateRouteBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateRouteForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateRouteInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateRouteServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsRoute|\Psr\Http\Message\ResponseInterface|null
     */
    public function createRoute(\Afosto\Sdk\Model\WmsCreateRouteRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateRoute($body), $fetch);
    }

    /**
     * Update a route.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateRouteUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateRouteNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateRouteBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateRouteForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateRouteInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateRouteServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsRoute|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateRoute(\Afosto\Sdk\Model\WmsUpdateRouteRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateRoute($body), $fetch);
    }

    /**
     * Marks a route as deleted.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteRouteUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteRouteNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteRouteBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteRouteForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteRouteInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteRouteServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsRoute|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteRoute(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteRoute($id), $fetch);
    }

    /**
     * View a route.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ViewRouteUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ViewRouteNotFoundException
     * @throws \Afosto\Sdk\Exception\ViewRouteBadRequestException
     * @throws \Afosto\Sdk\Exception\ViewRouteForbiddenException
     * @throws \Afosto\Sdk\Exception\ViewRouteInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ViewRouteServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsRoute|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewRoute(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ViewRoute($id), $fetch);
    }

    /**
     * List existing locations.
     *
     * @param array $headerParameters {
     *
     *     @var int $X-Page-Size
     *     @var int $X-Page
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListLocationsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListLocationsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListLocationsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListLocationsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListLocationsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListLocationsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsLocation[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listLocations(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListLocations($headerParameters), $fetch);
    }

    /**
     * A location is a reference to a warehouse.
     *
     * @param \Afosto\Sdk\Model\WmsCreateLocationRequest $body  Location model
     * @param string                                     $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateLocationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateLocationNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateLocationBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateLocationForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateLocationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateLocationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsLocation|\Psr\Http\Message\ResponseInterface|null
     */
    public function createLocation(\Afosto\Sdk\Model\WmsCreateLocationRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateLocation($body), $fetch);
    }

    /**
     * Update a location.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateLocationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateLocationNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateLocationBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateLocationForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateLocationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateLocationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsLocation|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateLocation(\Afosto\Sdk\Model\WmsUpdateLocationRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateLocation($body), $fetch);
    }

    /**
     * Mark a location as deleted.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteLocationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteLocationNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteLocationBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteLocationForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteLocationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteLocationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsLocation|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteLocation(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteLocation($id), $fetch);
    }

    /**
     * Get a location.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetLocationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetLocationNotFoundException
     * @throws \Afosto\Sdk\Exception\GetLocationBadRequestException
     * @throws \Afosto\Sdk\Exception\GetLocationForbiddenException
     * @throws \Afosto\Sdk\Exception\GetLocationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetLocationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsLocation|\Psr\Http\Message\ResponseInterface|null
     */
    public function getLocation(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetLocation($id), $fetch);
    }

    /**
     * List all hops.
     *
     * @param array $headerParameters {
     *
     *     @var int $x-page the requested page id
     *     @var int $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListHopsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListHopsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListHopsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListHopsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListHopsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListHopsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsHop[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listHops(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListHops($headerParameters), $fetch);
    }

    /**
     * Add an hop.
     *
     * @param \Afosto\Sdk\Model\WmsCreateHopRequest $body  Hop model
     * @param string                                $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateHopUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateHopNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateHopBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateHopForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateHopInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateHopServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsHop|\Psr\Http\Message\ResponseInterface|null
     */
    public function createHop(\Afosto\Sdk\Model\WmsCreateHopRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateHop($body), $fetch);
    }

    /**
     * update the applied schedules.
     *
     * @param \Afosto\Sdk\Model\WmsCreateHopScheduleRequest $body  Hop model
     * @param string                                        $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateHopSchedulesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateHopSchedulesNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateHopSchedulesBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateHopSchedulesForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateHopSchedulesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateHopSchedulesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsHop|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateHopSchedules(\Afosto\Sdk\Model\WmsCreateHopScheduleRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateHopSchedules($body), $fetch);
    }

    /**
     * Mark a hop as deleted.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteHopUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteHopNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteHopBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteHopForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteHopInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteHopServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsHop|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteHop(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteHop($id), $fetch);
    }

    /**
     * Get a hop.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetHopUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetHopNotFoundException
     * @throws \Afosto\Sdk\Exception\GetHopBadRequestException
     * @throws \Afosto\Sdk\Exception\GetHopForbiddenException
     * @throws \Afosto\Sdk\Exception\GetHopInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetHopServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsHop|\Psr\Http\Message\ResponseInterface|null
     */
    public function getHop(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetHop($id), $fetch);
    }

    /**
     * List all schedules.
     *
     * @param array $queryParameters {
     *
     *     @var string $hop_id
     * }
     *
     * @param array $headerParameters {
     *
     *     @var int $X-Page-Size
     *     @var int $X-Page
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListSchedulesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListSchedulesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListSchedulesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListSchedulesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListSchedulesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListSchedulesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsSchedule[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listSchedules(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListSchedules($queryParameters, $headerParameters), $fetch);
    }

    /**
     * Add a schedule.
     *
     * @param \Afosto\Sdk\Model\WmsCreateScheduleRequest $body  Hop model
     * @param string                                     $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateScheduleUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateScheduleNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateScheduleBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateScheduleForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateScheduleInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateScheduleServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsSchedule|\Psr\Http\Message\ResponseInterface|null
     */
    public function createSchedule(\Afosto\Sdk\Model\WmsCreateScheduleRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateSchedule($body), $fetch);
    }

    /**
     * update a schedule.
     *
     * @param \Afosto\Sdk\Model\WmsUpdateScheduleRequest $body  Hop model
     * @param string                                     $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateScheduleUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateScheduleNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateScheduleBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateScheduleForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateScheduleInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateScheduleServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsHop|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateSchedule(\Afosto\Sdk\Model\WmsUpdateScheduleRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateSchedule($body), $fetch);
    }

    /**
     * Mark a schedule as deleted.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteScheduleUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteScheduleNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteScheduleBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteScheduleForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteScheduleInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteScheduleServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsSchedule|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteSchedule(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteSchedule($id), $fetch);
    }

    /**
     * Get a schedule.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetScheduleUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetScheduleNotFoundException
     * @throws \Afosto\Sdk\Exception\GetScheduleBadRequestException
     * @throws \Afosto\Sdk\Exception\GetScheduleForbiddenException
     * @throws \Afosto\Sdk\Exception\GetScheduleInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetScheduleServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsSchedule|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSchedule(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSchedule($id), $fetch);
    }

    /**
     * returns a real time calculation for the route.
     *
     * @param \Afosto\Sdk\Model\WmsCreateDurationRequest $body  Hop model
     * @param string                                     $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetDurationForRouteUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetDurationForRouteNotFoundException
     * @throws \Afosto\Sdk\Exception\GetDurationForRouteBadRequestException
     * @throws \Afosto\Sdk\Exception\GetDurationForRouteForbiddenException
     * @throws \Afosto\Sdk\Exception\GetDurationForRouteInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetDurationForRouteServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsDuration|\Psr\Http\Message\ResponseInterface|null
     */
    public function getDurationForRoute(\Afosto\Sdk\Model\WmsCreateDurationRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetDurationForRoute($body), $fetch);
    }

    /**
     * Get a list of warehouses.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetWarehousesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetWarehousesNotFoundException
     * @throws \Afosto\Sdk\Exception\GetWarehousesBadRequestException
     * @throws \Afosto\Sdk\Exception\GetWarehousesForbiddenException
     * @throws \Afosto\Sdk\Exception\GetWarehousesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetWarehousesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsWarehouse[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getWarehouses(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetWarehouses($headerParameters), $fetch);
    }

    /**
     * Add a warehouse.
     *
     * @param \Afosto\Sdk\Model\WmsCreateWarehouseRequest $body  The new warehouse
     * @param string                                      $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateWarehouseUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateWarehouseNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateWarehouseBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateWarehouseForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateWarehouseInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateWarehouseServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsWarehouse|\Psr\Http\Message\ResponseInterface|null
     */
    public function createWarehouse(\Afosto\Sdk\Model\WmsCreateWarehouseRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateWarehouse($body), $fetch);
    }

    /**
     * Add a warehouse.
     *
     * @param \Afosto\Sdk\Model\WmsUpdateWarehouseRequest $body  The new warehouse
     * @param string                                      $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateWarehouseUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateWarehouseNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateWarehouseBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateWarehouseForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateWarehouseInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateWarehouseServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsWarehouse|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateWarehouse(\Afosto\Sdk\Model\WmsUpdateWarehouseRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateWarehouse($body), $fetch);
    }

    /**
     * Get a warehouse.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetWarehouseUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetWarehouseNotFoundException
     * @throws \Afosto\Sdk\Exception\GetWarehouseBadRequestException
     * @throws \Afosto\Sdk\Exception\GetWarehouseForbiddenException
     * @throws \Afosto\Sdk\Exception\GetWarehouseInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetWarehouseServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsWarehouse|\Psr\Http\Message\ResponseInterface|null
     */
    public function getWarehouse(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetWarehouse($id), $fetch);
    }

    /**
     * Create a Projection to generate the available allocation options.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateClaimProjectionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateClaimProjectionNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateClaimProjectionBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateClaimProjectionForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateClaimProjectionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateClaimProjectionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsProjection|\Psr\Http\Message\ResponseInterface|null
     */
    public function createClaimProjection(\Afosto\Sdk\Model\WmsCreateProjectionRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateClaimProjection($body), $fetch);
    }

    /**
     * Get a claim and it's status.
     *
     * @param array $headerParameters {
     *
     *     @var int $X-Page-Size
     *     @var int $X-Page
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetClaimsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetClaimsNotFoundException
     * @throws \Afosto\Sdk\Exception\GetClaimsBadRequestException
     * @throws \Afosto\Sdk\Exception\GetClaimsForbiddenException
     * @throws \Afosto\Sdk\Exception\GetClaimsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetClaimsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsClaim[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getClaims(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetClaims($headerParameters), $fetch);
    }

    /**
     * Create an optimized set of claims.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateClaimsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateClaimsNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateClaimsBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateClaimsForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateClaimsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateClaimsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsClaimsPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function createClaims(\Afosto\Sdk\Model\WmsCreateClaimRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateClaims($body), $fetch);
    }

    /**
     * Get a claim and it's status.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetClaimUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetClaimNotFoundException
     * @throws \Afosto\Sdk\Exception\GetClaimBadRequestException
     * @throws \Afosto\Sdk\Exception\GetClaimForbiddenException
     * @throws \Afosto\Sdk\Exception\GetClaimInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetClaimServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsClaim|\Psr\Http\Message\ResponseInterface|null
     */
    public function getClaim(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetClaim($id), $fetch);
    }

    /**
     * Extend the time the inventory is claimed.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ExtendClaimUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ExtendClaimNotFoundException
     * @throws \Afosto\Sdk\Exception\ExtendClaimBadRequestException
     * @throws \Afosto\Sdk\Exception\ExtendClaimForbiddenException
     * @throws \Afosto\Sdk\Exception\ExtendClaimInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ExtendClaimServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsClaim|\Psr\Http\Message\ResponseInterface|null
     */
    public function extendClaim(string $id, \Afosto\Sdk\Model\WmsClaimsIdExtendPutBody $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ExtendClaim($id, $body), $fetch);
    }

    /**
     * Confirm a reservation claim and make it an actual claim.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ConfirmClaimUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ConfirmClaimNotFoundException
     * @throws \Afosto\Sdk\Exception\ConfirmClaimBadRequestException
     * @throws \Afosto\Sdk\Exception\ConfirmClaimForbiddenException
     * @throws \Afosto\Sdk\Exception\ConfirmClaimInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ConfirmClaimServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsClaim|\Psr\Http\Message\ResponseInterface|null
     */
    public function confirmClaim(string $id, \stdClass $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ConfirmClaim($id, $body), $fetch);
    }

    /**
     * Create an optimized set of claims.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateTransferProjectionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateTransferProjectionNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateTransferProjectionBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateTransferProjectionForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateTransferProjectionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateTransferProjectionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsTransfer|\Psr\Http\Message\ResponseInterface|null
     */
    public function createTransferProjection(\Afosto\Sdk\Model\WmsCreateTransferRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateTransferProjection($body), $fetch);
    }

    /**
     * Create an optimized set of claims.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetTransfersUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetTransfersNotFoundException
     * @throws \Afosto\Sdk\Exception\GetTransfersBadRequestException
     * @throws \Afosto\Sdk\Exception\GetTransfersForbiddenException
     * @throws \Afosto\Sdk\Exception\GetTransfersInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetTransfersServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsTransfer[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTransfers(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetTransfers($headerParameters), $fetch);
    }

    /**
     * Create a new transfer.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateTransferUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateTransferNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateTransferBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateTransferForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateTransferInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateTransferServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsTransfer|\Psr\Http\Message\ResponseInterface|null
     */
    public function createTransfer(\Afosto\Sdk\Model\WmsCreateTransferRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateTransfer($body), $fetch);
    }

    /**
     * Create an optimized set of claims.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetTransferUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetTransferNotFoundException
     * @throws \Afosto\Sdk\Exception\GetTransferBadRequestException
     * @throws \Afosto\Sdk\Exception\GetTransferForbiddenException
     * @throws \Afosto\Sdk\Exception\GetTransferInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetTransferServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsTransfer|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTransfer(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetTransfer($id), $fetch);
    }

    /**
     * Create an optimized set of claims.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSubTransfersUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSubTransfersNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSubTransfersBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSubTransfersForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSubTransfersInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSubTransfersServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsSubTransfer[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSubTransfers(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSubTransfers($headerParameters), $fetch);
    }

    /**
     * Update items' last known location.
     *
     * @param \Afosto\Sdk\Model\WmsUpdateTransferRequest $body  Transfer request object
     * @param string                                     $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateSubTransferUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateSubTransferNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateSubTransferBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateSubTransferForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateSubTransferInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateSubTransferServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsSubTransfer|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateSubTransfer(\Afosto\Sdk\Model\WmsUpdateTransferRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateSubTransfer($body), $fetch);
    }

    /**
     * Returns a sub transfer.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSubTransferUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSubTransferNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSubTransferBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSubTransferForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSubTransferInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSubTransferServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsSubTransfer|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSubTransfer(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSubTransfer($id), $fetch);
    }

    /**
     * reports claim items at a certain location.
     *
     * @param \Afosto\Sdk\Model\WmsTransferReport $body  Transfer request object
     * @param string                              $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ReportClaimItemsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ReportClaimItemsNotFoundException
     * @throws \Afosto\Sdk\Exception\ReportClaimItemsBadRequestException
     * @throws \Afosto\Sdk\Exception\ReportClaimItemsForbiddenException
     * @throws \Afosto\Sdk\Exception\ReportClaimItemsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ReportClaimItemsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsWarehouseItem[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function reportClaimItems(\Afosto\Sdk\Model\WmsTransferReport $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ReportClaimItems($body), $fetch);
    }

    /**
     * Get a list of warehouse items.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetWarehouseItemsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetWarehouseItemsNotFoundException
     * @throws \Afosto\Sdk\Exception\GetWarehouseItemsBadRequestException
     * @throws \Afosto\Sdk\Exception\GetWarehouseItemsForbiddenException
     * @throws \Afosto\Sdk\Exception\GetWarehouseItemsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetWarehouseItemsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsWarehouseItem[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getWarehouseItems(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetWarehouseItems($headerParameters), $fetch);
    }

    /**
     * Get a list of inventory summaries.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SearchInventoryUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SearchInventoryNotFoundException
     * @throws \Afosto\Sdk\Exception\SearchInventoryBadRequestException
     * @throws \Afosto\Sdk\Exception\SearchInventoryForbiddenException
     * @throws \Afosto\Sdk\Exception\SearchInventoryInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SearchInventoryServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsStock[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function searchInventory(\Afosto\Sdk\Model\WmsInventoryPostBody $body, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SearchInventory($body, $headerParameters), $fetch);
    }

    /**
     * Get a list of inventory summaries.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SetInventoryUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SetInventoryNotFoundException
     * @throws \Afosto\Sdk\Exception\SetInventoryBadRequestException
     * @throws \Afosto\Sdk\Exception\SetInventoryForbiddenException
     * @throws \Afosto\Sdk\Exception\SetInventoryInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SetInventoryServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsStock[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function setInventory(\Afosto\Sdk\Model\WmsStockUpRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SetInventory($body), $fetch);
    }

    /**
     * Create an optimized set of claims.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetWarehouseItemUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetWarehouseItemNotFoundException
     * @throws \Afosto\Sdk\Exception\GetWarehouseItemBadRequestException
     * @throws \Afosto\Sdk\Exception\GetWarehouseItemForbiddenException
     * @throws \Afosto\Sdk\Exception\GetWarehouseItemInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetWarehouseItemServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsWarehouseItem|\Psr\Http\Message\ResponseInterface|null
     */
    public function getWarehouseItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetWarehouseItem($id), $fetch);
    }

    /**
     * Update the warehouse item.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateItemUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateItemNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateItemBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateItemForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateItemInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateItemServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\WmsWarehouseItem|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateItem(string $id, \Afosto\Sdk\Model\WmsUpdateWarehouseItemRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateItem($id, $body), $fetch);
    }

    /**
     * start a checkout session.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\StartSessionBadRequestException
     * @throws \Afosto\Sdk\Exception\StartSessionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\StartSessionForbiddenException
     * @throws \Afosto\Sdk\Exception\StartSessionNotFoundException
     * @throws \Afosto\Sdk\Exception\StartSessionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\StartSessionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrStartSessionResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function startSession(\Afosto\Sdk\Model\OdrStartSessionRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\StartSession($body), $fetch);
    }

    /**
     * Returns the session expiry date.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSessionBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSessionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSessionForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSessionNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSessionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSessionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrGetSessionResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSession(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSession($id), $fetch);
    }

    /**
     * Lets an user authenticate their contact through username and password.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AuthenticateSessionBadRequestException
     * @throws \Afosto\Sdk\Exception\AuthenticateSessionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AuthenticateSessionForbiddenException
     * @throws \Afosto\Sdk\Exception\AuthenticateSessionNotFoundException
     * @throws \Afosto\Sdk\Exception\AuthenticateSessionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AuthenticateSessionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrAuthenticationResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function authenticateSession(string $id, \Afosto\Sdk\Model\OdrAuthenticationRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AuthenticateSession($id, $body), $fetch);
    }

    /**
     * Lets an user authenticate their contact through username and password.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AttachSessionBadRequestException
     * @throws \Afosto\Sdk\Exception\AttachSessionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AttachSessionForbiddenException
     * @throws \Afosto\Sdk\Exception\AttachSessionNotFoundException
     * @throws \Afosto\Sdk\Exception\AttachSessionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AttachSessionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrAttachSessionRequest|\Psr\Http\Message\ResponseInterface|null
     */
    public function attachSession(string $id, \Afosto\Sdk\Model\OdrAttachSessionRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AttachSession($id, $body), $fetch);
    }

    /**
     * Returns a 204 when the identity exists.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SessionIdentityExistsBadRequestException
     * @throws \Afosto\Sdk\Exception\SessionIdentityExistsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SessionIdentityExistsForbiddenException
     * @throws \Afosto\Sdk\Exception\SessionIdentityExistsNotFoundException
     * @throws \Afosto\Sdk\Exception\SessionIdentityExistsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SessionIdentityExistsServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function sessionIdentityExists(string $id, \Afosto\Sdk\Model\OdrIdentityExistsRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SessionIdentityExists($id, $body), $fetch);
    }

    /**
     * Returns the primary phonenumber of the customer.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSessionPhonenumberBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSessionPhonenumberUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSessionPhonenumberForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSessionPhonenumberNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSessionPhonenumberInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSessionPhonenumberServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrPhonenumber|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSessionPhonenumber(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSessionPhonenumber($id), $fetch);
    }

    /**
     * Create a phonenumber.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateSessionPhoneNumberBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateSessionPhoneNumberUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateSessionPhoneNumberForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateSessionPhoneNumberNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateSessionPhoneNumberInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateSessionPhoneNumberServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrPhonenumber|\Psr\Http\Message\ResponseInterface|null
     */
    public function createSessionPhoneNumber(string $id, \Afosto\Sdk\Model\OdrNewPhonenumber $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateSessionPhoneNumber($id, $body), $fetch);
    }

    /**
     * Returns the contact information.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSessionContactBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSessionContactUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSessionContactForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSessionContactNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSessionContactInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSessionContactServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSessionContact|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSessionContact(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSessionContact($id), $fetch);
    }

    /**
     * create a new contact and add it to the session.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateSessionContactBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateSessionContactUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateSessionContactForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateSessionContactNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateSessionContactInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateSessionContactServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function createSessionContact(string $id, \Afosto\Sdk\Model\OdrNewContact $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateSessionContact($id, $body), $fetch);
    }

    /**
     * Returns a list of suggested billing addresses.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSessionSessionProjectionBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSessionSessionProjectionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSessionSessionProjectionForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSessionSessionProjectionNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSessionSessionProjectionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSessionSessionProjectionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSessionProjection|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSessionSessionProjection(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSessionSessionProjection($id), $fetch);
    }

    /**
     * Returns a list of suggested billing addresses.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSessionSessionCalculationBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSessionSessionCalculationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSessionSessionCalculationForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSessionSessionCalculationNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSessionSessionCalculationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSessionSessionCalculationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSessionCalculation|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSessionSessionCalculation(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSessionSessionCalculation($id), $fetch);
    }

    /**
     * authorize session and continue to payment.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AuthorizeSessionBadRequestException
     * @throws \Afosto\Sdk\Exception\AuthorizeSessionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AuthorizeSessionForbiddenException
     * @throws \Afosto\Sdk\Exception\AuthorizeSessionNotFoundException
     * @throws \Afosto\Sdk\Exception\AuthorizeSessionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AuthorizeSessionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrAuthorizationResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function authorizeSession(string $id, \Afosto\Sdk\Model\OdrAuthorizationRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AuthorizeSession($id, $body), $fetch);
    }

    /**
     * Returns a list of applicable shipping methods.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSessionBillingBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSessionBillingUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSessionBillingForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSessionBillingNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSessionBillingInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSessionBillingServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSessionsIdBillingGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSessionBilling(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSessionBilling($id), $fetch);
    }

    /**
     * set the shipping address used for the session.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingOptionBadRequestException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingOptionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingOptionForbiddenException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingOptionNotFoundException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingOptionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingOptionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrAddress|\Psr\Http\Message\ResponseInterface|null
     */
    public function selectSessionShippingOption(string $id, \Afosto\Sdk\Model\OdrSelectSessionShippingRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SelectSessionShippingOption($id, $body), $fetch);
    }

    /**
     * Create a address.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateSessionAddressBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateSessionAddressUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateSessionAddressForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateSessionAddressNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateSessionAddressInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateSessionAddressServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrAddress|\Psr\Http\Message\ResponseInterface|null
     */
    public function createSessionAddress(string $id, \Afosto\Sdk\Model\OdrNewAddress $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateSessionAddress($id, $body), $fetch);
    }

    /**
     * Returns a list of known shipping addresses.
     *
     * @param array $queryParameters {
     *
     *     @var string $country_code
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSessionShippingMethodBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingMethodUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingMethodForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingMethodNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingMethodInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingMethodServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSessionsIdShippingMethodsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSessionShippingMethod(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSessionShippingMethod($id, $queryParameters), $fetch);
    }

    /**
     * select the used shipping method.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingMethodBadRequestException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingMethodUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingMethodForbiddenException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingMethodNotFoundException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingMethodInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingMethodServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSelectSessionShippingMethodRequest|\Psr\Http\Message\ResponseInterface|null
     */
    public function selectSessionShippingMethod(string $id, \Afosto\Sdk\Model\OdrSelectSessionShippingMethodRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SelectSessionShippingMethod($id, $body), $fetch);
    }

    /**
     * Returns a list of known shipping addresses.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSessionShippingWindowBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingWindowUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingWindowForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingWindowNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingWindowInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingWindowServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSessionsIdShippingWindowGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSessionShippingWindow(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSessionShippingWindow($id), $fetch);
    }

    /**
     * select the used shipping window.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingWindowBadRequestException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingWindowUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingWindowForbiddenException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingWindowNotFoundException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingWindowInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingWindowServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSelectSessionShippingWindowResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function selectSessionShippingWindow(string $id, \Afosto\Sdk\Model\OdrSelectSessionShippingWindowRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SelectSessionShippingWindow($id, $body), $fetch);
    }

    /**
     * Returns a list of known shipping addresses.
     *
     * @param array $queryParameters {
     *
     *     @var string $country_code the country used to select shipping points
     *     @var string $method_id method_id
     *     @var string $zipcode prefiled with the zipcode of the primary address
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSessionShippingPointBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingPointUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingPointForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingPointNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingPointInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSessionShippingPointServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSessionsIdShippingPointGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSessionShippingPoint(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSessionShippingPoint($id, $queryParameters), $fetch);
    }

    /**
     * select the used shipping method.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingPointBadRequestException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingPointUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingPointForbiddenException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingPointNotFoundException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingPointInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SelectSessionShippingPointServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSelectSessionShippingPointRequest|\Psr\Http\Message\ResponseInterface|null
     */
    public function selectSessionShippingPoint(string $id, \Afosto\Sdk\Model\OdrSelectSessionShippingPointRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SelectSessionShippingPoint($id, $body), $fetch);
    }

    /**
     * RReturns the shipping address and available options.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSessionShipppingAddressBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSessionShipppingAddressUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSessionShipppingAddressForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSessionShipppingAddressNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSessionShipppingAddressInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSessionShipppingAddressServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSessionsIdShippingGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSessionShipppingAddress(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSessionShipppingAddress($id), $fetch);
    }

    /**
     * Select a billing address.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SelectSessionBillingRequestBadRequestException
     * @throws \Afosto\Sdk\Exception\SelectSessionBillingRequestUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SelectSessionBillingRequestForbiddenException
     * @throws \Afosto\Sdk\Exception\SelectSessionBillingRequestNotFoundException
     * @throws \Afosto\Sdk\Exception\SelectSessionBillingRequestInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SelectSessionBillingRequestServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrAddress|\Psr\Http\Message\ResponseInterface|null
     */
    public function selectSessionBillingRequest(string $id, \Afosto\Sdk\Model\OdrSelectSessionBillingRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SelectSessionBillingRequest($id, $body), $fetch);
    }

    /**
     * Returns a list of known shipping addresses.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSessionBillingMethodBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSessionBillingMethodUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSessionBillingMethodForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSessionBillingMethodNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSessionBillingMethodInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSessionBillingMethodServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSessionsIdBillingMethodsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSessionBillingMethod(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSessionBillingMethod($id), $fetch);
    }

    /**
     * Select billing method.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SelectSessionBillingMethodRequestBadRequestException
     * @throws \Afosto\Sdk\Exception\SelectSessionBillingMethodRequestUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SelectSessionBillingMethodRequestForbiddenException
     * @throws \Afosto\Sdk\Exception\SelectSessionBillingMethodRequestNotFoundException
     * @throws \Afosto\Sdk\Exception\SelectSessionBillingMethodRequestInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SelectSessionBillingMethodRequestServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSelectSessionBillingMethodRequest|\Psr\Http\Message\ResponseInterface|null
     */
    public function selectSessionBillingMethodRequest(string $id, \Afosto\Sdk\Model\OdrSelectSessionBillingMethodRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SelectSessionBillingMethodRequest($id, $body), $fetch);
    }

    /**
     * get the current organisation information.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetSessionOrganisationBadRequestException
     * @throws \Afosto\Sdk\Exception\GetSessionOrganisationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetSessionOrganisationForbiddenException
     * @throws \Afosto\Sdk\Exception\GetSessionOrganisationNotFoundException
     * @throws \Afosto\Sdk\Exception\GetSessionOrganisationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetSessionOrganisationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrSessionsIdOrganisationsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSessionOrganisation(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetSessionOrganisation($id), $fetch);
    }

    /**
     * create an organisation.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateSessionOrganisationBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateSessionOrganisationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateSessionOrganisationForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateSessionOrganisationNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateSessionOrganisationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateSessionOrganisationServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function createSessionOrganisation(string $id, \Afosto\Sdk\Model\OdrNewOrganisation $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateSessionOrganisation($id, $body), $fetch);
    }

    /**
     * Select an organisation.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SelectSessionOrganisationRequestBadRequestException
     * @throws \Afosto\Sdk\Exception\SelectSessionOrganisationRequestUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SelectSessionOrganisationRequestForbiddenException
     * @throws \Afosto\Sdk\Exception\SelectSessionOrganisationRequestNotFoundException
     * @throws \Afosto\Sdk\Exception\SelectSessionOrganisationRequestInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SelectSessionOrganisationRequestServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\OdrOrganisation|\Psr\Http\Message\ResponseInterface|null
     */
    public function selectSessionOrganisationRequest(string $id, \Afosto\Sdk\Model\OdrSelectSessionOrganisationRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SelectSessionOrganisationRequest($id, $body), $fetch);
    }

    /**
     * Deletes a direcotry.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteDirectoryBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteDirectoryUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteDirectoryForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteDirectoryNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteDirectoryInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteDirectoryServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function deleteDirectory(\Afosto\Sdk\Model\CntDirectoryRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteDirectory($body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListDirectoriesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListDirectoriesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListDirectoriesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListDirectoriesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListDirectoriesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListDirectoriesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntDirectoriesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function listDirectories(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListDirectories(), $fetch);
    }

    /**
     * Add a directory.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateDirectoryBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateDirectoryUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateDirectoryForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateDirectoryNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateDirectoryInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateDirectoryServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function createDirectory(\Afosto\Sdk\Model\CntDirectoryRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateDirectory($body), $fetch);
    }

    /**
     * Returns a list of files.
     *
     * @param array $queryParameters {
     *
     *     @var string $dir
     *     @var string $is_public
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var string $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListFilesBadRequestException
     * @throws \Afosto\Sdk\Exception\ListFilesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListFilesForbiddenException
     * @throws \Afosto\Sdk\Exception\ListFilesNotFoundException
     * @throws \Afosto\Sdk\Exception\ListFilesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListFilesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntFile[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listFiles(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListFiles($queryParameters, $headerParameters), $fetch);
    }

    /**
     * Deletes a file.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteFileBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteFileUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteFileForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteFileNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteFileInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteFileServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntFile|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteFile(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteFile($id), $fetch);
    }

    /**
     * Returns a file.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetFileBadRequestException
     * @throws \Afosto\Sdk\Exception\GetFileUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetFileForbiddenException
     * @throws \Afosto\Sdk\Exception\GetFileNotFoundException
     * @throws \Afosto\Sdk\Exception\GetFileInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetFileServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntFile[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getFile(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetFile($id), $fetch);
    }

    /**
     * Returns a new upload signature.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateSignedUrlBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateSignedUrlUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateSignedUrlForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateSignedUrlNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateSignedUrlInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateSignedUrlServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntUploadResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function createSignedUrl(\Afosto\Sdk\Model\CntUploadRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateSignedUrl($body), $fetch);
    }

    /**
     * Upload a new file.
     *
     * @param array $formParameters {
     *
     *     @var string|resource|\Psr\Http\Message\StreamInterface $file
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UploadFileBadRequestException
     * @throws \Afosto\Sdk\Exception\UploadFileUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UploadFileForbiddenException
     * @throws \Afosto\Sdk\Exception\UploadFileNotFoundException
     * @throws \Afosto\Sdk\Exception\UploadFileInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UploadFileServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntFile[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function uploadFile(string $signature, array $formParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UploadFile($signature, $formParameters), $fetch);
    }

    /**
     * Run a search with the option to run an aggregation.
     *
     * @param \Afosto\Sdk\Model\CntSimpleQuery $body             Query object
     * @param array                            $headerParameters {
     *
     *     @var string $x-page
     *     @var int $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SearchUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SearchNotFoundException
     * @throws \Afosto\Sdk\Exception\SearchBadRequestException
     * @throws \Afosto\Sdk\Exception\SearchForbiddenException
     * @throws \Afosto\Sdk\Exception\SearchInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SearchServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntSimpleSeachResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function search(\Afosto\Sdk\Model\CntSimpleQuery $body, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\Search($body, $headerParameters), $fetch);
    }

    /**
     * Run a complex search.
     *
     * @param string                           $namespace        the namespace
     * @param \Afosto\Sdk\Model\CntSearchQuery $body             Query object
     * @param array                            $headerParameters {
     *
     *     @var string $x-page
     *     @var int $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SearchModelUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SearchModelNotFoundException
     * @throws \Afosto\Sdk\Exception\SearchModelBadRequestException
     * @throws \Afosto\Sdk\Exception\SearchModelForbiddenException
     * @throws \Afosto\Sdk\Exception\SearchModelInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SearchModelServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntSeachResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function searchModel(string $namespace = 'default', string $code, string $model, \Afosto\Sdk\Model\CntSearchQuery $body, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SearchModel($namespace, $code, $model, $body, $headerParameters), $fetch);
    }

    /**
     * Run a simple, fast suggest search.
     *
     * @param array $queryParameters {
     *
     *     @var string $q The query
     *     @var int $limit The query
     *     @var array $codes The query
     *     @var array $models The models we want to query
     *     @var array $namespaces The namesapce we want to query
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SuggestUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SuggestNotFoundException
     * @throws \Afosto\Sdk\Exception\SuggestBadRequestException
     * @throws \Afosto\Sdk\Exception\SuggestForbiddenException
     * @throws \Afosto\Sdk\Exception\SuggestInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SuggestServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntSuggestResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function suggest(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\Suggest($queryParameters), $fetch);
    }

    /**
     * List the set of definitions.
     *
     * @param array $queryParameters {
     *
     *     @var string $code
     *     @var string $model
     *     @var string $namespace
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListDefinitionsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListDefinitionsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListDefinitionsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListDefinitionsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListDefinitionsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListDefinitionsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntDefinition[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listDefinitions(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListDefinitions($queryParameters), $fetch);
    }

    /**
     * Either create a new, or update an existing definition.
     *
     * @param \Afosto\Sdk\Model\CntDefinitionModel $body  Query object
     * @param string                               $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpsertDefinitionUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpsertDefinitionNotFoundException
     * @throws \Afosto\Sdk\Exception\UpsertDefinitionBadRequestException
     * @throws \Afosto\Sdk\Exception\UpsertDefinitionForbiddenException
     * @throws \Afosto\Sdk\Exception\UpsertDefinitionInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpsertDefinitionServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntDefinition|\Psr\Http\Message\ResponseInterface|null
     */
    public function upsertDefinition(\Afosto\Sdk\Model\CntDefinitionModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpsertDefinition($body), $fetch);
    }

    /**
     * Returns a list of handling lists.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var string $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListHandlingListsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListHandlingListsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListHandlingListsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListHandlingListsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListHandlingListsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListHandlingListsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsListedHandlingList[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listHandlingLists(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListHandlingLists($headerParameters), $fetch);
    }

    /**
     * Add a new handling list.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateHandlingListBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateHandlingListUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateHandlingListForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateHandlingListNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateHandlingListInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateHandlingListServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsHandlingListResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function createHandlingList(\Afosto\Sdk\Model\LcsHandlingModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateHandlingList($body), $fetch);
    }

    /**
     * Search for a set of lists.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var string $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SearchListsBadRequestException
     * @throws \Afosto\Sdk\Exception\SearchListsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SearchListsForbiddenException
     * @throws \Afosto\Sdk\Exception\SearchListsNotFoundException
     * @throws \Afosto\Sdk\Exception\SearchListsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SearchListsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsHandlingList[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function searchLists(\Afosto\Sdk\Model\LcsListSearch $body, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SearchLists($body, $headerParameters), $fetch);
    }

    /**
     * Delete a handling list.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteHandlingListBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteHandlingListUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteHandlingListForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteHandlingListNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteHandlingListInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteHandlingListServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function deleteHandlingList(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteHandlingList($id), $fetch);
    }

    /**
     * Returns a handling list.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ViewHandlingListBadRequestException
     * @throws \Afosto\Sdk\Exception\ViewHandlingListUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ViewHandlingListForbiddenException
     * @throws \Afosto\Sdk\Exception\ViewHandlingListNotFoundException
     * @throws \Afosto\Sdk\Exception\ViewHandlingListInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ViewHandlingListServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsHandlingList|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewHandlingList(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ViewHandlingList($id), $fetch);
    }

    /**
     * Update items' state on a handling list.
     *
     * @param \Afosto\Sdk\Model\LcsHandlingListItemUpdate[] $body
     * @param string                                        $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateHandlingListItemBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateHandlingListItemUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateHandlingListItemForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateHandlingListItemNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateHandlingListItemInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateHandlingListItemServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsListsIdItemsPutResponse204|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateHandlingListItem(string $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateHandlingListItem($id, $body), $fetch);
    }

    /**
     * Update state of an handling list.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateListStateBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateListStateUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateListStateForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateListStateNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateListStateInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateListStateServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function updateListState(string $id, \Afosto\Sdk\Model\LcsHandlingListUpdate $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateListState($id, $body), $fetch);
    }

    /**
     * Get a list of shipments.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var string $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListShipmentsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListShipmentsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListShipmentsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListShipmentsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListShipmentsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListShipmentsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsListedShipment[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listShipments(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListShipments($headerParameters), $fetch);
    }

    /**
     * Add a new shipment to the list.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateShipmentBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateShipmentUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateShipmentForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateShipmentNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateShipmentInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateShipmentServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsShipment[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function createShipment(\Afosto\Sdk\Model\LcsShipmentModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateShipment($body), $fetch);
    }

    /**
     * Search for a set of shipments.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var string $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SearchShipmentsBadRequestException
     * @throws \Afosto\Sdk\Exception\SearchShipmentsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SearchShipmentsForbiddenException
     * @throws \Afosto\Sdk\Exception\SearchShipmentsNotFoundException
     * @throws \Afosto\Sdk\Exception\SearchShipmentsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SearchShipmentsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsListedShipment[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function searchShipments(\Afosto\Sdk\Model\LcsShipmentSearch $body, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SearchShipments($body, $headerParameters), $fetch);
    }

    /**
     * Returns a single shipment.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ViewShipmentBadRequestException
     * @throws \Afosto\Sdk\Exception\ViewShipmentUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ViewShipmentForbiddenException
     * @throws \Afosto\Sdk\Exception\ViewShipmentNotFoundException
     * @throws \Afosto\Sdk\Exception\ViewShipmentInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ViewShipmentServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsShipment|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewShipment(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ViewShipment($id), $fetch);
    }

    /**
     * Update the shipment method or addressing.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateShipmentBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsShipment|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateShipment(string $id, \Afosto\Sdk\Model\LcsShipmentUpdateModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateShipment($id, $body), $fetch);
    }

    /**
     * Delete items from the shipment.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteShipmentItemsBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteShipmentItemsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteShipmentItemsForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteShipmentItemsNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteShipmentItemsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteShipmentItemsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsShipmentItem|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteShipmentItems(string $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteShipmentItems($id, $body), $fetch);
    }

    /**
     * Returns items for a single shipment.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var string $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListShipmentItemsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListShipmentItemsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListShipmentItemsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListShipmentItemsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListShipmentItemsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListShipmentItemsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsShipmentItem|\Psr\Http\Message\ResponseInterface|null
     */
    public function listShipmentItems(string $id, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListShipmentItems($id, $headerParameters), $fetch);
    }

    /**
     * Add items to the shipment.
     *
     * @param \Afosto\Sdk\Model\LcsShipmentItemModel[] $body
     * @param string                                   $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AddShipmentItemsBadRequestException
     * @throws \Afosto\Sdk\Exception\AddShipmentItemsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AddShipmentItemsForbiddenException
     * @throws \Afosto\Sdk\Exception\AddShipmentItemsNotFoundException
     * @throws \Afosto\Sdk\Exception\AddShipmentItemsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AddShipmentItemsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsShipmentItem|\Psr\Http\Message\ResponseInterface|null
     */
    public function addShipmentItems(string $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AddShipmentItems($id, $body), $fetch);
    }

    /**
     * Update the shipment's items that are backorder.
     *
     * @param \Afosto\Sdk\Model\LcsShipmentItemCorrection[] $body
     * @param string                                        $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateShipmentBackordersBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentBackordersUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentBackordersForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentBackordersNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentBackordersInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentBackordersServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsShipment|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateShipmentBackorders(string $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateShipmentBackorders($id, $body), $fetch);
    }

    /**
     * Update items that were not expected.
     *
     * @param \Afosto\Sdk\Model\LcsShipmentItemCorrection[] $body
     * @param string                                        $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateShipmentOverageBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentOverageUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentOverageForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentOverageNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentOverageInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateShipmentOverageServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsShipment|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateShipmentOverage(string $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateShipmentOverage($id, $body), $fetch);
    }

    /**
     * List all methods.
     *
     * @param array $queryParameters {
     *
     *     @var string $country_code
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListMethodsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListMethodsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListMethodsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListMethodsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListMethodsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListMethodsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsMethod[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listMethods(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListMethods($queryParameters), $fetch);
    }

    /**
     * List all methods.
     *
     * @param array $queryParameters {
     *
     *     @var string $country_code
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetShippingMethodBadRequestException
     * @throws \Afosto\Sdk\Exception\GetShippingMethodUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetShippingMethodForbiddenException
     * @throws \Afosto\Sdk\Exception\GetShippingMethodNotFoundException
     * @throws \Afosto\Sdk\Exception\GetShippingMethodInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetShippingMethodServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsMethod[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getShippingMethod(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetShippingMethod($id, $queryParameters), $fetch);
    }

    /**
     * List all parcels.
     *
     * @param array $headerParameters {
     *
     *     @var int $x-page
     *     @var int $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListParcelsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListParcelsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListParcelsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListParcelsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListParcelsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListParcelsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsParcel[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listParcels(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListParcels($headerParameters), $fetch);
    }

    /**
     * Add a new parcel to the list.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateParcelBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateParcelUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateParcelForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateParcelNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateParcelInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateParcelServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsParcel|\Psr\Http\Message\ResponseInterface|null
     */
    public function createParcel(\Afosto\Sdk\Model\LcsParcelCreateModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateParcel($body), $fetch);
    }

    /**
     * Remove a parcel.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\RemoveParcelBadRequestException
     * @throws \Afosto\Sdk\Exception\RemoveParcelUnauthorizedException
     * @throws \Afosto\Sdk\Exception\RemoveParcelForbiddenException
     * @throws \Afosto\Sdk\Exception\RemoveParcelNotFoundException
     * @throws \Afosto\Sdk\Exception\RemoveParcelInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\RemoveParcelServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function removeParcel(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\RemoveParcel($id), $fetch);
    }

    /**
     * Get a single parcel.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetParcelBadRequestException
     * @throws \Afosto\Sdk\Exception\GetParcelUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetParcelForbiddenException
     * @throws \Afosto\Sdk\Exception\GetParcelNotFoundException
     * @throws \Afosto\Sdk\Exception\GetParcelInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetParcelServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsParcel|\Psr\Http\Message\ResponseInterface|null
     */
    public function getParcel(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetParcel($id), $fetch);
    }

    /**
     * Update the parcel parameters.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateParcelBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateParcelUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateParcelForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateParcelNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateParcelInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateParcelServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function updateParcel(string $id, \Afosto\Sdk\Model\LcsParcelModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateParcel($id, $body), $fetch);
    }

    /**
     * Remove items from parcel.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\RemoveFromParcelBadRequestException
     * @throws \Afosto\Sdk\Exception\RemoveFromParcelUnauthorizedException
     * @throws \Afosto\Sdk\Exception\RemoveFromParcelForbiddenException
     * @throws \Afosto\Sdk\Exception\RemoveFromParcelNotFoundException
     * @throws \Afosto\Sdk\Exception\RemoveFromParcelInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\RemoveFromParcelServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsParcelsIdItemsDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function removeFromParcel(string $id, \Afosto\Sdk\Model\LcsPlace $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\RemoveFromParcel($id, $body), $fetch);
    }

    /**
     * Add items to a parcel.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AddToParcelBadRequestException
     * @throws \Afosto\Sdk\Exception\AddToParcelUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AddToParcelForbiddenException
     * @throws \Afosto\Sdk\Exception\AddToParcelNotFoundException
     * @throws \Afosto\Sdk\Exception\AddToParcelInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AddToParcelServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsParcelsIdItemsPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function addToParcel(string $id, \Afosto\Sdk\Model\LcsPlace $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AddToParcel($id, $body), $fetch);
    }

    /**
     * Mark parcel as in-transit.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SetParcelInTransitBadRequestException
     * @throws \Afosto\Sdk\Exception\SetParcelInTransitUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SetParcelInTransitForbiddenException
     * @throws \Afosto\Sdk\Exception\SetParcelInTransitNotFoundException
     * @throws \Afosto\Sdk\Exception\SetParcelInTransitInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SetParcelInTransitServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function setParcelInTransit(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SetParcelInTransit($id), $fetch);
    }

    /**
     * Mark parcel as finished.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SetParcelFinishedBadRequestException
     * @throws \Afosto\Sdk\Exception\SetParcelFinishedUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SetParcelFinishedForbiddenException
     * @throws \Afosto\Sdk\Exception\SetParcelFinishedNotFoundException
     * @throws \Afosto\Sdk\Exception\SetParcelFinishedInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SetParcelFinishedServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function setParcelFinished(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SetParcelFinished($id), $fetch);
    }

    /**
     * Returns a list of fulfilment locations.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var string $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListFulfilmentLocationsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListFulfilmentLocationsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListFulfilmentLocationsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListFulfilmentLocationsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListFulfilmentLocationsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListFulfilmentLocationsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsFulfilmentLocation[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listFulfilmentLocations(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListFulfilmentLocations($headerParameters), $fetch);
    }

    /**
     * Create a new fulfilment location.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateFulfilmentLocationBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateFulfilmentLocationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateFulfilmentLocationForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateFulfilmentLocationNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateFulfilmentLocationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateFulfilmentLocationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsFulfilmentLocation|\Psr\Http\Message\ResponseInterface|null
     */
    public function createFulfilmentLocation(\Afosto\Sdk\Model\LcsFulfilmentLocationCreate $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateFulfilmentLocation($body), $fetch);
    }

    /**
     * Returns a fulfilment location.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetFulfilmentLocationBadRequestException
     * @throws \Afosto\Sdk\Exception\GetFulfilmentLocationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetFulfilmentLocationForbiddenException
     * @throws \Afosto\Sdk\Exception\GetFulfilmentLocationNotFoundException
     * @throws \Afosto\Sdk\Exception\GetFulfilmentLocationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetFulfilmentLocationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsFulfilmentLocation|\Psr\Http\Message\ResponseInterface|null
     */
    public function getFulfilmentLocation(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetFulfilmentLocation($id), $fetch);
    }

    /**
     * Updates a location.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateFulfilmentLocationBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateFulfilmentLocationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateFulfilmentLocationForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateFulfilmentLocationNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateFulfilmentLocationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateFulfilmentLocationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsFulfilmentLocation|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateFulfilmentLocation(string $id, \Afosto\Sdk\Model\LcsFulfilmentLocationCreate $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateFulfilmentLocation($id, $body), $fetch);
    }

    /**
     * Returns a list of fulfilment locations.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListPositionsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListPositionsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListPositionsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListPositionsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListPositionsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListPositionsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsLocationPosition[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listPositions(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListPositions($id), $fetch);
    }

    /**
     * Updates the position order for a location.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdatePositionOrderBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdatePositionOrderUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdatePositionOrderForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdatePositionOrderNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdatePositionOrderInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdatePositionOrderServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsLocationsIdPositionsPutResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function updatePositionOrder(string $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdatePositionOrder($id, $body), $fetch);
    }

    /**
     * Searches a set of positions based on sku's.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SearchPositionsBadRequestException
     * @throws \Afosto\Sdk\Exception\SearchPositionsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SearchPositionsForbiddenException
     * @throws \Afosto\Sdk\Exception\SearchPositionsNotFoundException
     * @throws \Afosto\Sdk\Exception\SearchPositionsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SearchPositionsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsLocationSku|\Psr\Http\Message\ResponseInterface|null
     */
    public function searchPositions(string $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SearchPositions($id, $body), $fetch);
    }

    /**
     * Returns a list of fulfilment locations.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListLocationSkusBadRequestException
     * @throws \Afosto\Sdk\Exception\ListLocationSkusUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListLocationSkusForbiddenException
     * @throws \Afosto\Sdk\Exception\ListLocationSkusNotFoundException
     * @throws \Afosto\Sdk\Exception\ListLocationSkusInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListLocationSkusServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsLocationSku[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listLocationSkus(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListLocationSkus($id), $fetch);
    }

    /**
     * Updates the position order for a location.
     *
     * @param \Afosto\Sdk\Model\LcsLocationSku[] $body
     * @param string                             $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpsertLocationSkusBadRequestException
     * @throws \Afosto\Sdk\Exception\UpsertLocationSkusUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpsertLocationSkusForbiddenException
     * @throws \Afosto\Sdk\Exception\UpsertLocationSkusNotFoundException
     * @throws \Afosto\Sdk\Exception\UpsertLocationSkusInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpsertLocationSkusServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsLocationsIdSkusPutResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function upsertLocationSkus(string $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpsertLocationSkus($id, $body), $fetch);
    }

    /**
     * Requests a label for the parcel.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\RequestLabelBadRequestException
     * @throws \Afosto\Sdk\Exception\RequestLabelUnauthorizedException
     * @throws \Afosto\Sdk\Exception\RequestLabelForbiddenException
     * @throws \Afosto\Sdk\Exception\RequestLabelNotFoundException
     * @throws \Afosto\Sdk\Exception\RequestLabelInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\RequestLabelServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function requestLabel(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\RequestLabel($id), $fetch);
    }

    /**
     * List all service points.
     *
     * @param array $queryParameters {
     *
     *     @var string $country_code
     *     @var string $postal_code
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListServicePointsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListServicePointsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListServicePointsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListServicePointsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListServicePointsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListServicePointsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsPointsItem[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listServicePoints(string $carrier, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListServicePoints($carrier, $queryParameters), $fetch);
    }

    /**
     * Returns a single service.
     *
     * @param array $queryParameters {
     *
     *     @var string $country_code
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetServicePointBadRequestException
     * @throws \Afosto\Sdk\Exception\GetServicePointUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetServicePointForbiddenException
     * @throws \Afosto\Sdk\Exception\GetServicePointNotFoundException
     * @throws \Afosto\Sdk\Exception\GetServicePointInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetServicePointServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\LcsPoint|\Psr\Http\Message\ResponseInterface|null
     */
    public function getServicePoint(string $id, string $carrier, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetServicePoint($id, $carrier, $queryParameters), $fetch);
    }

    /**
     * Filter with a single value (multiple is not supported).
     *
     * @param array $queryParameters {
     *
     *     @var string $status Status values that need to be considered for filter
     *     @var string $printer_id The printer id that we want to filter
     *     @var string $tag The tag id that we want to filter for
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page The page token
     *     @var string $x-page-size The amount of results for the page
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListJobsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListJobsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListJobsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListJobsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListJobsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListJobsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplJob[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listJobs(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListJobs($queryParameters, $headerParameters), $fetch);
    }

    /**
     * @param \Afosto\Sdk\Model\SplJobModel $body  The new print job
     * @param string                        $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AddJobNotFoundException
     * @throws \Afosto\Sdk\Exception\AddJobUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AddJobBadRequestException
     * @throws \Afosto\Sdk\Exception\AddJobForbiddenException
     * @throws \Afosto\Sdk\Exception\AddJobInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AddJobServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplJob|\Psr\Http\Message\ResponseInterface|null
     */
    public function addJob(\Afosto\Sdk\Model\SplJobModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AddJob($body), $fetch);
    }

    /**
     * Retrieve printjob status.
     *
     * @param string $reference The id of the job that we look for, returned when job is pushed to queue
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetJobStatusNotFoundException
     * @throws \Afosto\Sdk\Exception\GetJobStatusUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetJobStatusBadRequestException
     * @throws \Afosto\Sdk\Exception\GetJobStatusForbiddenException
     * @throws \Afosto\Sdk\Exception\GetJobStatusInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetJobStatusServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplJob|\Psr\Http\Message\ResponseInterface|null
     */
    public function getJobStatus(string $reference, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetJobStatus($reference), $fetch);
    }

    /**
     * @param string                      $reference The id of the job that we look for, returned when job is pushed to queue
     * @param \Afosto\Sdk\Model\SplStatus $body      The new print job
     * @param string                      $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateStatusNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateStatusUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateStatusBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateStatusForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateStatusInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateStatusServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\SplJobResult|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateStatus(string $reference, \Afosto\Sdk\Model\SplStatus $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateStatus($reference, $body), $fetch);
    }

    /**
     * Get a single task.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetTaskBadRequestException
     * @throws \Afosto\Sdk\Exception\GetTaskUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetTaskForbiddenException
     * @throws \Afosto\Sdk\Exception\GetTaskNotFoundException
     * @throws \Afosto\Sdk\Exception\GetTaskInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetTaskServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\MesTask|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTask(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetTask($id), $fetch);
    }

    /**
     * Transform HTML into a PDF.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GeneratePDFBadRequestException
     * @throws \Afosto\Sdk\Exception\GeneratePDFUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GeneratePDFForbiddenException
     * @throws \Afosto\Sdk\Exception\GeneratePDFNotFoundException
     * @throws \Afosto\Sdk\Exception\GeneratePDFInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GeneratePDFServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CntPdf|\Psr\Http\Message\ResponseInterface|null
     */
    public function generatePDF(\Afosto\Sdk\Model\CntHtmlToPdfRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GeneratePDF($body), $fetch);
    }

    /**
     * Transform HTML into a PDF and return PDF as string.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GenerateInlinePDFBadRequestException
     * @throws \Afosto\Sdk\Exception\GenerateInlinePDFUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GenerateInlinePDFForbiddenException
     * @throws \Afosto\Sdk\Exception\GenerateInlinePDFNotFoundException
     * @throws \Afosto\Sdk\Exception\GenerateInlinePDFInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GenerateInlinePDFServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function generateInlinePDF(\Afosto\Sdk\Model\CntHtmlToInlinePdfRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GenerateInlinePDF($body), $fetch);
    }

    /**
     * Get a listing of available pricing groups.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetPricingGroupsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetPricingGroupsNotFoundException
     * @throws \Afosto\Sdk\Exception\GetPricingGroupsBadRequestException
     * @throws \Afosto\Sdk\Exception\GetPricingGroupsForbiddenException
     * @throws \Afosto\Sdk\Exception\GetPricingGroupsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetPricingGroupsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CatGroup[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPricingGroups(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetPricingGroups($headerParameters), $fetch);
    }

    /**
     * Add a new pricing group to the list.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreatePricingGroupUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreatePricingGroupNotFoundException
     * @throws \Afosto\Sdk\Exception\CreatePricingGroupBadRequestException
     * @throws \Afosto\Sdk\Exception\CreatePricingGroupForbiddenException
     * @throws \Afosto\Sdk\Exception\CreatePricingGroupInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreatePricingGroupServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CatGroup|\Psr\Http\Message\ResponseInterface|null
     */
    public function createPricingGroup(\Afosto\Sdk\Model\CatGroupCreate $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreatePricingGroup($body), $fetch);
    }

    /**
     * Disabling a pricing group makes sure it cannot me added to new settings.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DisableGroupUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DisableGroupNotFoundException
     * @throws \Afosto\Sdk\Exception\DisableGroupBadRequestException
     * @throws \Afosto\Sdk\Exception\DisableGroupForbiddenException
     * @throws \Afosto\Sdk\Exception\DisableGroupInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DisableGroupServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CatGroup|\Psr\Http\Message\ResponseInterface|null
     */
    public function disableGroup(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DisableGroup($id), $fetch);
    }

    /**
     * View the pricing group by id.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ViewGroupUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ViewGroupNotFoundException
     * @throws \Afosto\Sdk\Exception\ViewGroupBadRequestException
     * @throws \Afosto\Sdk\Exception\ViewGroupForbiddenException
     * @throws \Afosto\Sdk\Exception\ViewGroupInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ViewGroupServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CatGroup|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewGroup(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ViewGroup($id), $fetch);
    }

    /**
     * Update metadata or the name of the pricing group.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateGroupUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateGroupNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateGroupBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateGroupForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateGroupInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateGroupServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CatGroup|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateGroup(string $id, \Afosto\Sdk\Model\CatGroupUpdate $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateGroup($id, $body), $fetch);
    }

    /**
     * Get a listing of prices that are stored in the group.
     *
     * @param array $queryParameters {
     *
     *     @var string $country US - use to filter tax rate results
     *     @var string $administrative_area Florida - use to filter tax rate results
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetPricingUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetPricingNotFoundException
     * @throws \Afosto\Sdk\Exception\GetPricingBadRequestException
     * @throws \Afosto\Sdk\Exception\GetPricingForbiddenException
     * @throws \Afosto\Sdk\Exception\GetPricingInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetPricingServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CatPrice[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPricing(string $id, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetPricing($id, $queryParameters, $headerParameters), $fetch);
    }

    /**
     * Query for a set of prices.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SearchPricesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SearchPricesNotFoundException
     * @throws \Afosto\Sdk\Exception\SearchPricesBadRequestException
     * @throws \Afosto\Sdk\Exception\SearchPricesForbiddenException
     * @throws \Afosto\Sdk\Exception\SearchPricesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SearchPricesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CatPrice[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function searchPrices(string $id, \Afosto\Sdk\Model\CatPriceSearch $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SearchPrices($id, $body), $fetch);
    }

    /**
     * Create or update prices.
     *
     * @param \Afosto\Sdk\Model\CatNewPrice[] $body
     * @param string                          $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpsertPricesUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpsertPricesNotFoundException
     * @throws \Afosto\Sdk\Exception\UpsertPricesBadRequestException
     * @throws \Afosto\Sdk\Exception\UpsertPricesForbiddenException
     * @throws \Afosto\Sdk\Exception\UpsertPricesInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpsertPricesServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CatGroupsIdPricesPutResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function upsertPrices(string $id, array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpsertPrices($id, $body), $fetch);
    }

    /**
     * View a historic or planned list of prices for a sku.
     *
     * @param array $queryParameters {
     *
     *     @var string $is_planned Use to query only future / planned prices
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ViewPricingUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ViewPricingNotFoundException
     * @throws \Afosto\Sdk\Exception\ViewPricingBadRequestException
     * @throws \Afosto\Sdk\Exception\ViewPricingForbiddenException
     * @throws \Afosto\Sdk\Exception\ViewPricingInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ViewPricingServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CatPrice[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewPricing(string $id, string $sku, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ViewPricing($id, $sku, $queryParameters, $headerParameters), $fetch);
    }

    /**
     * Get a listing of vat rates per country.
     *
     * @param array $queryParameters {
     *
     *     @var string $country US
     *     @var string $administrative_area Florida
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page the requested page id
     *     @var string $x-page-size the requested page size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetVatListUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetVatListNotFoundException
     * @throws \Afosto\Sdk\Exception\GetVatListBadRequestException
     * @throws \Afosto\Sdk\Exception\GetVatListForbiddenException
     * @throws \Afosto\Sdk\Exception\GetVatListInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetVatListServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CatVatRate[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getVatList(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetVatList($queryParameters, $headerParameters), $fetch);
    }

    /**
     * Create or update the vat group per country for given skus.
     *
     * @param \Afosto\Sdk\Model\CatProductVatModel[] $body
     * @param string                                 $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AttachVatRateUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AttachVatRateNotFoundException
     * @throws \Afosto\Sdk\Exception\AttachVatRateBadRequestException
     * @throws \Afosto\Sdk\Exception\AttachVatRateForbiddenException
     * @throws \Afosto\Sdk\Exception\AttachVatRateInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AttachVatRateServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CatVatProductsPutResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function attachVatRate(array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AttachVatRate($body), $fetch);
    }

    /**
     * Get a single price by its ID.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ViewPriceUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ViewPriceNotFoundException
     * @throws \Afosto\Sdk\Exception\ViewPriceBadRequestException
     * @throws \Afosto\Sdk\Exception\ViewPriceForbiddenException
     * @throws \Afosto\Sdk\Exception\ViewPriceInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ViewPriceServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\CatPrice|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewPrice(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ViewPrice($id), $fetch);
    }

    /**
     * Returns a list of contact information.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var string $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListContactsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListContactsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListContactsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListContactsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListContactsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListContactsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelContact[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listContacts(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListContacts($headerParameters), $fetch);
    }

    /**
     * Search contacts based on their id's or email addresses.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\SearchContactsBadRequestException
     * @throws \Afosto\Sdk\Exception\SearchContactsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\SearchContactsForbiddenException
     * @throws \Afosto\Sdk\Exception\SearchContactsNotFoundException
     * @throws \Afosto\Sdk\Exception\SearchContactsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\SearchContactsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelContact[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function searchContacts(\Afosto\Sdk\Model\RelSearch $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\SearchContacts($body), $fetch);
    }

    /**
     * Create a new or update an existing contact, based on it's emailaddress. Will only update the primary parts of lists. Doing so it will move the old primary to a secondary (on changes).
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpsertContactBadRequestException
     * @throws \Afosto\Sdk\Exception\UpsertContactUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpsertContactForbiddenException
     * @throws \Afosto\Sdk\Exception\UpsertContactNotFoundException
     * @throws \Afosto\Sdk\Exception\UpsertContactInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpsertContactServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelContact|\Psr\Http\Message\ResponseInterface|null
     */
    public function upsertContact(\Afosto\Sdk\Model\RelContactUpdate $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpsertContact($body), $fetch);
    }

    /**
     * Returns a single contact by id.
     *
     * @param array $queryParameters {
     *
     *     @var string $version
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetContactBadRequestException
     * @throws \Afosto\Sdk\Exception\GetContactUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetContactForbiddenException
     * @throws \Afosto\Sdk\Exception\GetContactNotFoundException
     * @throws \Afosto\Sdk\Exception\GetContactInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetContactServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelContact|\Psr\Http\Message\ResponseInterface|null
     */
    public function getContact(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetContact($id, $queryParameters), $fetch);
    }

    /**
     * Returns a version list for the contact.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ViewContactVersionsBadRequestException
     * @throws \Afosto\Sdk\Exception\ViewContactVersionsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ViewContactVersionsForbiddenException
     * @throws \Afosto\Sdk\Exception\ViewContactVersionsNotFoundException
     * @throws \Afosto\Sdk\Exception\ViewContactVersionsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ViewContactVersionsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelVersion[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewContactVersions(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ViewContactVersions($id), $fetch);
    }

    /**
     * Create an address.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateAddressBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateAddressUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateAddressForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateAddressNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateAddressInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateAddressServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelAddress|\Psr\Http\Message\ResponseInterface|null
     */
    public function createAddress(\Afosto\Sdk\Model\RelAddressModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateAddress($body), $fetch);
    }

    /**
     * Returns a single address by id.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ViewAddressBadRequestException
     * @throws \Afosto\Sdk\Exception\ViewAddressUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ViewAddressForbiddenException
     * @throws \Afosto\Sdk\Exception\ViewAddressNotFoundException
     * @throws \Afosto\Sdk\Exception\ViewAddressInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ViewAddressServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelAddress|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewAddress(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ViewAddress($id), $fetch);
    }

    /**
     * Get lat long parameters for party address.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetAddressGeocodeBadRequestException
     * @throws \Afosto\Sdk\Exception\GetAddressGeocodeUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetAddressGeocodeForbiddenException
     * @throws \Afosto\Sdk\Exception\GetAddressGeocodeNotFoundException
     * @throws \Afosto\Sdk\Exception\GetAddressGeocodeInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetAddressGeocodeServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelGeoLocation|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAddressGeocode(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetAddressGeocode($id), $fetch);
    }

    /**
     * Get lat long parameters for party address.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetGeocodeBadRequestException
     * @throws \Afosto\Sdk\Exception\GetGeocodeUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetGeocodeForbiddenException
     * @throws \Afosto\Sdk\Exception\GetGeocodeNotFoundException
     * @throws \Afosto\Sdk\Exception\GetGeocodeInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetGeocodeServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelGeoLocation|\Psr\Http\Message\ResponseInterface|null
     */
    public function getGeocode(\Afosto\Sdk\Model\RelGeocodeRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetGeocode($body), $fetch);
    }

    /**
     * List required fields.
     *
     * @param array $queryParameters {
     *
     *     @var string $country_code Defaults to country that can be linked to client IP
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\GetRequiredAddressFieldsBadRequestException
     * @throws \Afosto\Sdk\Exception\GetRequiredAddressFieldsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\GetRequiredAddressFieldsForbiddenException
     * @throws \Afosto\Sdk\Exception\GetRequiredAddressFieldsNotFoundException
     * @throws \Afosto\Sdk\Exception\GetRequiredAddressFieldsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\GetRequiredAddressFieldsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelFieldList|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRequiredAddressFields(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\GetRequiredAddressFields($queryParameters), $fetch);
    }

    /**
     * Create a phonenumber.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreatePhonenumberBadRequestException
     * @throws \Afosto\Sdk\Exception\CreatePhonenumberUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreatePhonenumberForbiddenException
     * @throws \Afosto\Sdk\Exception\CreatePhonenumberNotFoundException
     * @throws \Afosto\Sdk\Exception\CreatePhonenumberInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreatePhonenumberServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelPhoneNumber|\Psr\Http\Message\ResponseInterface|null
     */
    public function createPhonenumber(\Afosto\Sdk\Model\RelPhoneNumberModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreatePhonenumber($body), $fetch);
    }

    /**
     * Returns a single phonenumber by id.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ViewPhoneNumberBadRequestException
     * @throws \Afosto\Sdk\Exception\ViewPhoneNumberUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ViewPhoneNumberForbiddenException
     * @throws \Afosto\Sdk\Exception\ViewPhoneNumberNotFoundException
     * @throws \Afosto\Sdk\Exception\ViewPhoneNumberInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ViewPhoneNumberServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelPhoneNumber|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewPhoneNumber(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ViewPhoneNumber($id), $fetch);
    }

    /**
     * Returns a list of organisation information.
     *
     * @param array $headerParameters {
     *
     *     @var string $x-page
     *     @var string $x-page-size
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ListOrganisationsBadRequestException
     * @throws \Afosto\Sdk\Exception\ListOrganisationsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ListOrganisationsForbiddenException
     * @throws \Afosto\Sdk\Exception\ListOrganisationsNotFoundException
     * @throws \Afosto\Sdk\Exception\ListOrganisationsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ListOrganisationsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelOrganisation[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function listOrganisations(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ListOrganisations($headerParameters), $fetch);
    }

    /**
     * Create an organisation.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateOrganisationBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateOrganisationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateOrganisationForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateOrganisationNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateOrganisationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateOrganisationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelOrganisation|\Psr\Http\Message\ResponseInterface|null
     */
    public function createOrganisation(\Afosto\Sdk\Model\RelOrganisationUpdateModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateOrganisation($body), $fetch);
    }

    /**
     * delete an existing organisation.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\DeleteOrganisationBadRequestException
     * @throws \Afosto\Sdk\Exception\DeleteOrganisationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\DeleteOrganisationForbiddenException
     * @throws \Afosto\Sdk\Exception\DeleteOrganisationNotFoundException
     * @throws \Afosto\Sdk\Exception\DeleteOrganisationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\DeleteOrganisationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelOrganisation|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteOrganisation(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\DeleteOrganisation($id), $fetch);
    }

    /**
     * Returns a single organisation by id.
     *
     * @param array $queryParameters {
     *
     *     @var string $version
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ViewOrganisationBadRequestException
     * @throws \Afosto\Sdk\Exception\ViewOrganisationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ViewOrganisationForbiddenException
     * @throws \Afosto\Sdk\Exception\ViewOrganisationNotFoundException
     * @throws \Afosto\Sdk\Exception\ViewOrganisationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ViewOrganisationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelOrganisation|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewOrganisation(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ViewOrganisation($id, $queryParameters), $fetch);
    }

    /**
     * Updates an existing organisation.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\UpdateOrganisationBadRequestException
     * @throws \Afosto\Sdk\Exception\UpdateOrganisationUnauthorizedException
     * @throws \Afosto\Sdk\Exception\UpdateOrganisationForbiddenException
     * @throws \Afosto\Sdk\Exception\UpdateOrganisationNotFoundException
     * @throws \Afosto\Sdk\Exception\UpdateOrganisationInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\UpdateOrganisationServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelOrganisation|\Psr\Http\Message\ResponseInterface|null
     */
    public function updateOrganisation(string $id, \Afosto\Sdk\Model\RelOrganisationUpdateModel $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\UpdateOrganisation($id, $body), $fetch);
    }

    /**
     * Returns a version list for the organisation.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ViewOrganisationVersionsBadRequestException
     * @throws \Afosto\Sdk\Exception\ViewOrganisationVersionsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ViewOrganisationVersionsForbiddenException
     * @throws \Afosto\Sdk\Exception\ViewOrganisationVersionsNotFoundException
     * @throws \Afosto\Sdk\Exception\ViewOrganisationVersionsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ViewOrganisationVersionsServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelVersion[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewOrganisationVersions(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ViewOrganisationVersions($id), $fetch);
    }

    /**
     * Returns a  signed id token.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateIdentityBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateIdentityUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateIdentityConflictException
     * @throws \Afosto\Sdk\Exception\CreateIdentityForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateIdentityNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateIdentityInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateIdentityServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelSignedTokenResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function createIdentity(\Afosto\Sdk\Model\RelCreateIdentityRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateIdentity($body), $fetch);
    }

    /**
     * Returns a 204 if the there exists an identity.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\IdentityExistsBadRequestException
     * @throws \Afosto\Sdk\Exception\IdentityExistsUnauthorizedException
     * @throws \Afosto\Sdk\Exception\IdentityExistsConflictException
     * @throws \Afosto\Sdk\Exception\IdentityExistsForbiddenException
     * @throws \Afosto\Sdk\Exception\IdentityExistsNotFoundException
     * @throws \Afosto\Sdk\Exception\IdentityExistsInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\IdentityExistsServiceUnavailableException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function identityExists(\Afosto\Sdk\Model\RelIdentityExistsRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\IdentityExists($body), $fetch);
    }

    /**
     * Returns a  signed id token.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\AuthorizeIdentityBadRequestException
     * @throws \Afosto\Sdk\Exception\AuthorizeIdentityUnauthorizedException
     * @throws \Afosto\Sdk\Exception\AuthorizeIdentityNotFoundException
     * @throws \Afosto\Sdk\Exception\AuthorizeIdentityForbiddenException
     * @throws \Afosto\Sdk\Exception\AuthorizeIdentityInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\AuthorizeIdentityServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelSignedTokenResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function authorizeIdentity(\Afosto\Sdk\Model\RelCreateIdentityRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\AuthorizeIdentity($body), $fetch);
    }

    /**
     * Returns a new token to confirm identity or reset a password.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\CreateTokenIdentityBadRequestException
     * @throws \Afosto\Sdk\Exception\CreateTokenIdentityUnauthorizedException
     * @throws \Afosto\Sdk\Exception\CreateTokenIdentityNotFoundException
     * @throws \Afosto\Sdk\Exception\CreateTokenIdentityForbiddenException
     * @throws \Afosto\Sdk\Exception\CreateTokenIdentityInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\CreateTokenIdentityServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelTokenResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function createTokenIdentity(\Afosto\Sdk\Model\RelCreateTokenRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\CreateTokenIdentity($body), $fetch);
    }

    /**
     * Pass a token to reset the password.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\ResetIdentityBadRequestException
     * @throws \Afosto\Sdk\Exception\ResetIdentityUnauthorizedException
     * @throws \Afosto\Sdk\Exception\ResetIdentityForbiddenException
     * @throws \Afosto\Sdk\Exception\ResetIdentityNotFoundException
     * @throws \Afosto\Sdk\Exception\ResetIdentityInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\ResetIdentityServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelSignedTokenResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function resetIdentity(\Afosto\Sdk\Model\RelCreateResetRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\ResetIdentity($body), $fetch);
    }

    /**
     * Mark the identity as verified.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Afosto\Sdk\Exception\VerifyIdentityBadRequestException
     * @throws \Afosto\Sdk\Exception\VerifyIdentityUnauthorizedException
     * @throws \Afosto\Sdk\Exception\VerifyIdentityNotFoundException
     * @throws \Afosto\Sdk\Exception\VerifyIdentityForbiddenException
     * @throws \Afosto\Sdk\Exception\VerifyIdentityInternalServerErrorException
     * @throws \Afosto\Sdk\Exception\VerifyIdentityServiceUnavailableException
     *
     * @return \Afosto\Sdk\Model\RelSignedTokenResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function verifyIdentity(\Afosto\Sdk\Model\RelCreateConfirmRequest $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Afosto\Sdk\Endpoint\VerifyIdentity($body), $fetch);
    }

    public static function create($httpClient = null)
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\HttpClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\UriFactoryDiscovery::find()->createUri('https://api.afosto.io');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $messageFactory = \Http\Discovery\MessageFactoryDiscovery::find();
        $streamFactory = \Http\Discovery\StreamFactoryDiscovery::find();
        $serializer = new \Symfony\Component\Serializer\Serializer(\Afosto\Sdk\Normalizer\NormalizerFactory::create(), [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode())]);

        return new static($httpClient, $messageFactory, $serializer, $streamFactory);
    }
}
